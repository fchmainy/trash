{
    "$id": "core-schema-cm-stable",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Application Services Definition (cm, stable)",
    "type": "object",
    "properties": {
        "class": {
            "type": "string",
            "enum": [
                "AS3",
                "ADC"
            ]
        }
    },
    "minProperties": 1,
    "allOf": [
        {
            "if": {
                "required": [
                    "class"
                ],
                "properties": {
                    "class": {
                        "const": "AS3"
                    }
                }
            },
            "then": {
                "$ref": "#/definitions/AS3"
            }
        },
        {
            "if": {
                "required": [
                    "class"
                ],
                "properties": {
                    "class": {
                        "const": "ADC"
                    }
                }
            },
            "then": {
                "$ref": "#/definitions/ADC"
            }
        },
        {
            "if": {
                "not": {
                    "required": [
                        "class"
                    ]
                }
            },
            "then": {
                "additionalProperties": {
                    "$ref": "#/definitions/Application"
                }
            }
        }
    ],
    "definitions": {
        "ADC": {
            "title": "ADC Declaration",
            "description": "Indicates this document is an ADC declaration",
            "type": "object",
            "propertyNames": {
                "$ref": "#/definitions/Property_Names"
            },
            "properties": {
                "class": {
                    "title": "Class",
                    "description": "Indicates this document is an ADC declaration",
                    "type": "string",
                    "const": "ADC"
                },
                "schemaVersion": {
                    "title": "Schema version",
                    "description": "Version of ADC Declaration schema this declaration uses",
                    "type": "string",
                    "anyOf": [
                        {
                            "description": "Any version of AS3.",
                            "pattern": "^3[.]([0-9]|[1234][0-9]|5[0-2])($|[.][0-9]+$)"
                        },
                        {
                            "description": "The current version of AS3.",
                            "const": "3.52.0"
                        }
                    ]
                },
                "id": {
                    "title": "Declaration ID",
                    "description": "Unique identifier for this declaration (max 255 printable chars with no spaces, quotation marks, angle brackets, nor backslashes)",
                    "type": "string"
                },
                "controls": {
                    "$ref": "#/definitions/Controls"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "constants": {
                    "$ref": "#/definitions/Constants"
                },
                "target": {
                    "$ref": "#/definitions/Target"
                }
            },
            "required": [
                "class",
                "schemaVersion"
            ],
            "additionalProperties": {
                "$ref": "#/definitions/Tenant"
            }
        },
        "AddressMask": {
            "title": "Address Mask",
            "description": "Specifies the prefix length that you want to use as the mask. The default is None. The length can be the number of set bits in a bitmask between 0 and 32 for IPv4 or mask which specifies portion of address used",
            "oneOf": [
                {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 32
                },
                {
                    "$ref": "#/definitions/IP_Address_Range"
                }
            ]
        },
        "AddressMaskIPv6": {
            "title": "Address Mask IPv6",
            "description": "Specifies the prefix length that you want to use as the mask. The default is None. The length must be the number of set bits in a bitmask between 0 and 128 for IPv6.",
            "type": "integer",
            "minimum": 0,
            "maximum": 128
        },
        "Analytics_Profile": {
            "title": "Analytics Profile",
            "type": "object",
            "description": "HTTP Analytics profile with configurable options",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Analytics_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "collectGeo": {
                    "title": "Collect Countries",
                    "description": "Specifies that the system collects statistics of the names of the countries from which that traffic was sent",
                    "type": "boolean",
                    "default": false
                },
                "collectClientSideStatistics": {
                    "title": "Collect Client-Side Statistics",
                    "description": "Specifies that the system collects statistics regarding the HTTP request and response times",
                    "type": "boolean",
                    "default": false
                },
                "collectUrl": {
                    "title": "Collect URL",
                    "description": "Specifies that the system collects statistics of requested URLs",
                    "type": "boolean",
                    "default": false
                },
                "collectIp": {
                    "title": "Collect Client IP Addresses",
                    "description": "Specifies that the system collects statistics of the IP addresses of where the traffic came from",
                    "type": "boolean",
                    "default": false
                },
                "collectDestinationIpGeo": {
                    "title": "Collect Destination IP",
                    "description": "Specifies that the system collects statistics of the destination IP addresses",
                    "type": "boolean",
                    "default": false
                },
                "collectSubnet": {
                    "title": "Collect Client Subnet",
                    "description": "Specifies that the system collects statistics of client subnets",
                    "type": "boolean",
                    "default": false
                },
                "collectUserAgent": {
                    "title": "Collect User Agent",
                    "description": "Specifies that the system collects statistics about browsers used to send traffic",
                    "type": "boolean",
                    "default": false
                },
                "collectOsAndBrowser": {
                    "title": "Collect Operating System and Browser",
                    "description": "Specifies that the system collect statistics about the OSs and Browsers used to send requests",
                    "type": "boolean",
                    "default": true
                },
                "collectResponseCode": {
                    "title": "Collect Response Code",
                    "description": "Specifies that the system collects statistics about the distribution of HTTP response codes returned by the servers",
                    "type": "boolean",
                    "default": true
                },
                "collectMethod": {
                    "title": "Collect Method",
                    "description": "Specifies that the system collects statistics about the distribution of HTTP methods found in requests",
                    "type": "boolean",
                    "default": true
                },
                "collectMaxTpsAndThroughput": {
                    "title": "Collect Max TPS and Throughput",
                    "description": "Specifies that the system collects statistics for the maximum number of transactions per second, and the maximum amount of traffic moving through the system, both request and response throughput values",
                    "type": "boolean",
                    "default": false
                },
                "collectPageLoadTime": {
                    "title": "Collect Page Load Time",
                    "description": "Specifies that the system collects statistics of the round-trip latency between client end-users and the servers",
                    "type": "boolean",
                    "default": false
                },
                "collectUserSession": {
                    "title": "Collect User Sessions",
                    "description": "Specifies that the system collects statistics of the number of unique user sessions in the application traffic, as determined by the value of the configured HTTP cookies found in the requests",
                    "type": "boolean",
                    "default": false
                },
                "sampling": {
                    "type": "boolean",
                    "default": false
                },
                "samplingRatio": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10000,
                    "default": 100
                },
                "sessionCookieSecurity": {
                    "title": "Session Cookie Security",
                    "description": "Specify whether to secure session cookies",
                    "type": "string",
                    "enum": [
                        "ssl-only",
                        "always-secure",
                        "never-secure"
                    ],
                    "default": "ssl-only"
                },
                "sessionTimeoutMinutes": {
                    "title": "Session Timeout in Minutes",
                    "description": "The number of minutes of user non-activity ot allow before the system considers the session to be over",
                    "type": "integer",
                    "minimum": 5,
                    "maximum": 60,
                    "default": 5
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Analytics_TCP_Profile": {
            "title": "Analytics TCP Profile",
            "type": "object",
            "description": "TCP Analytics profile with configurable options",
            "properties": {
                "class": {
                    "type": "string",
                    "const": "Analytics_TCP_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "collectCity": {
                    "title": "Collect City",
                    "description": "Specifies that the system saves the name of the city with which traffic was exchanged",
                    "type": "boolean",
                    "default": false
                },
                "collectContinent": {
                    "title": "Collect Continent",
                    "description": "Specifies that the system saves the name of the continent with which traffic was exchanged",
                    "type": "boolean",
                    "default": true
                },
                "collectCountry": {
                    "title": "Collect Country",
                    "description": "Specifies that the system saves the name of the country with which traffic was exchanged",
                    "type": "boolean",
                    "default": true
                },
                "collectedByClientSide": {
                    "title": "Collected By Client Side",
                    "description": "Specifies that system collects statistics on the client side",
                    "type": "boolean",
                    "default": true
                },
                "collectedByServerSide": {
                    "title": "Collected By Server Side",
                    "description": "Specifies that system collects statistics on the server side",
                    "type": "boolean",
                    "default": true
                },
                "collectNexthop": {
                    "title": "Collect Next Hop Ethernet Address",
                    "description": "Specifies that the system saves the address to which the traffic is being routed",
                    "type": "boolean",
                    "default": false
                },
                "collectPostCode": {
                    "title": "Collect Post Code",
                    "description": "Specifies that the system saves the name of the postcode with which traffic was exchanged",
                    "type": "boolean",
                    "default": false
                },
                "collectRegion": {
                    "title": "Collect Region",
                    "description": "Specifies that the system saves the name of the region with which traffic was exchanged",
                    "type": "boolean",
                    "default": true
                },
                "collectRemoteHostIp": {
                    "title": "Collect Remote Host IP",
                    "description": "Specifies that the system collects IP addresses with which traffic was exchanged",
                    "type": "boolean",
                    "default": false
                },
                "collectRemoteHostSubnet": {
                    "title": "Collect Remote Host Subnet",
                    "description": "Specifies that the system saves the address of the subnet with which traffic was exchanged",
                    "type": "boolean",
                    "default": true
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Application": {
            "title": "Application",
            "description": "Declares an Application",
            "type": "object",
            "propertyNames": {
                "$ref": "#/definitions/Property_Names"
            },
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Application"
                },
                "template": {
                    "type": "string",
                    "description": "This is a deprecated property found in older BIG-IP AS3 declarations and it will be ignored"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "constants": {
                    "$ref": "#/definitions/Constants"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": {
                "$ref": "#/definitions/Application_Objects"
            }
        },
        "Application_Objects": {
            "title": "Application Objects",
            "description": "Application objects definition",
            "type": "object",
            "properties": {
                "class": {
                    "type": "string",
                    "enum": [
                        "Analytics_Profile",
                        "Analytics_TCP_Profile",
                        "Certificate",
                        "CA_Bundle",
                        "Data_Group",
                        "HTTP_Compress",
                        "HTTP_Acceleration_Profile",
                        "HTTP_Profile",
                        "HTTP2_Profile",
                        "iRule",
                        "L4_Profile",
                        "L4_DSR_Profile",
                        "Monitor",
                        "Multiplex_Profile",
                        "Persist",
                        "Pool",
                        "Service_Forwarding",
                        "Service_HTTP",
                        "Service_HTTPS",
                        "Service_HTTPS_Forward_Proxy",
                        "Service_L4",
                        "Service_L4_DSR",
                        "Service_Pool",
                        "Service_TCP",
                        "Service_TCP_Forward_Proxy",
                        "Service_UDP",
                        "SNAT_Pool",
                        "TCP_Profile",
                        "TLS_Client",
                        "TLS_Forward_Proxy_Client",
                        "TLS_Server",
                        "TLS_Forward_Proxy_Server",
                        "DTLS_Client",
                        "DTLS_Server",
                        "UDP_Profile",
                        "WAF_Policy"
                    ]
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                }
            },
            "required": [
                "class"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Analytics_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Analytics_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Analytics_TCP_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Analytics_TCP_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Certificate"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Certificate"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "CA_Bundle"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/CA_Bundle"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Data_Group"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Data_Group"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "HTTP_Acceleration_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/HTTP_Acceleration_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "HTTP_Compress"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/HTTP_Compress"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "HTTP_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/HTTP_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "HTTP2_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/HTTP2_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "L4_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/L4_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "L4_DSR_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/L4_DSR_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "iRule"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/IRule"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Multiplex_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Multiplex_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Monitor"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Persist"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Persist"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Pool"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Pool"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_HTTP"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_HTTP"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_HTTPS"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_HTTPS"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_HTTPS_Forward_Proxy"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_HTTPS_Forward_Proxy"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_Forwarding"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_Forwarding"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_L4"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_L4"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_L4_DSR"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_L4_DSR"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_Pool"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_Pool"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_TCP"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_TCP"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_TCP_Forward_Proxy"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_TCP_Forward_Proxy"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "Service_UDP"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Service_UDP"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "SNAT_Pool"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/SNAT_Pool"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "TCP_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TCP_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "TLS_Client"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TLS_Client"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "TLS_Forward_Proxy_Client"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TLS_Forward_Proxy_Client"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "TLS_Server"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TLS_Server"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "TLS_Forward_Proxy_Server"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TLS_Forward_Proxy_Server"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "DTLS_Client"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/DTLS_Client"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "DTLS_Server"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/DTLS_Server"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "UDP_Profile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/UDP_Profile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "WAF_Policy"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/WAF_Policy"
                    }
                }
            ],
            "f5PostProcess": {
                "tag": "validation",
                "data": {
                    "validationType": "maxObjectLength",
                    "maxLength": 255
                },
                "errSchemaPath": "#/definitions/Application_Objects"
            }
        },
        "AS3": {
            "title": "BIG-IP AS3 Class",
            "description": "BIG-IP AS3 class definition",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "description": "Indicates this document is an BIG-IP AS3 declaration",
                    "type": "string",
                    "const": "AS3"
                },
                "$schema": {
                    "description": "URL of schema against which to validate. Used by validation in your local environment only (via Visual Studio Code, for example)",
                    "type": "string"
                },
                "id": {
                    "title": "Declaration ID",
                    "description": "Unique identifier for this declaration (max 255 printable chars with no spaces, quotation marks, angle brackets, nor backslashes)",
                    "type": "string"
                },
                "action": {
                    "title": "Action",
                    "description": "Specifies the action to the performed on the ADC declaration",
                    "type": "string",
                    "enum": [
                        "deploy",
                        "dry-run"
                    ]
                },
                "declaration": {
                    "$ref": "#/definitions/ADC"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Basic_Auth": {
            "title": "Basic Authentication",
            "type": "object",
            "description": "Describes the basic authentication to access a resource",
            "properties": {
                "method": {
                    "type": "string",
                    "description": "Specifies the authentication method",
                    "enum": [
                        "basic"
                    ]
                },
                "username": {
                    "description": "Specifies the user name for authentication",
                    "type": "string"
                },
                "passphrase": {
                    "description": "Specifies the password for authentication",
                    "properties": {},
                    "allOf": [
                        {
                            "$ref": "#/definitions/Property_Passphrase"
                        }
                    ]
                }
            },
            "required": [
                "method",
                "username",
                "passphrase"
            ],
            "additionalProperties": false
        },
        "Basic_Monitor": {
            "title": "Monitor",
            "description": "Monitor definition",
            "oneOf": [
                {
                    "type": "string",
                    "enum": [
                        "http",
                        "https",
                        "http2",
                        "icmp",
                        "inband",
                        "tcp",
                        "tcp-half-open"
                    ]
                },
                {
                    "$ref": "#/definitions/Pointer_Monitor"
                }
            ]
        },
        "CA_Bundle": {
            "title": "CA Bundle",
            "description": "Bundle of one or more PKI Certificate-Authority certificates",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "CA_Bundle"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "bundle": {
                    "description": "Reference to a CA bundle or string of PEM encoded certificates",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pointer_System_All_Or_F5_String"
                        }
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "class",
                "bundle"
            ]
        },
        "Certificate": {
            "title": "Certificate",
            "description": "Configures a Certificate",
            "type": "object",
            "properties": {
                "class": {
                    "type": "string",
                    "const": "Certificate"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "certificate": {
                    "title": "Certificate",
                    "description": "X.509 public-key certificate",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pointer_System_All_Or_F5_String"
                        }
                    ]
                },
                "privateKey": {
                    "title": "Private Key",
                    "description": "Private key matching certificate's public key (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pointer_System_All_Or_F5_String"
                        }
                    ]
                },
                "chainCA": {
                    "title": "CA chain",
                    "description": "Bundle of one or more CA certificates in trust-chain from root CA to certificate (optional)",
                    "type": [
                        "object",
                        "string"
                    ],
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Pointer_System_All_Or_F5_String"
                        },
                        {
                            "$ref": "#/definitions/Pointer_CA_Bundle"
                        }
                    ]
                },
                "passphrase": {
                    "title": "Passphrase",
                    "description": "If supplied, used to decrypt privateKey at runtime (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Property_Passphrase"
                        }
                    ]
                }
            },
            "required": [
                "class",
                "certificate",
                "privateKey"
            ],
            "additionalProperties": false
        },
        "Ciphers": {
            "title": "Ciphers",
            "description": "Ciphersuite selection string (ciphers and cipherGroup are mutually exclusive, only use one).",
            "type": "string"
        },
        "Constants": {
            "title": "Constants",
            "description": "Named values for (re-)use by declaration objects",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Constants"
                }
            },
            "additionalProperties": true
        },
        "Controls": {
            "title": "Controls",
            "type": "object",
            "description": "Optional controls configuration",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Controls"
                },
                "logLevel": {
                    "title": "Log level",
                    "description": "Controls the amount of detail in logs produced while configuring this Tenant (default is whole-declaration Controls/logLevel value)",
                    "type": "string",
                    "enum": [
                        "emergency",
                        "alert",
                        "critical",
                        "error",
                        "warning",
                        "notice",
                        "info",
                        "debug"
                    ]
                },
                "traceResponse": {
                    "title": "Trace Response",
                    "description": "If true, the response will contain the trace files",
                    "type": "boolean"
                },
                "userAgent": {
                    "title": "User Agent",
                    "description": "User Agent information to include in TEEM report",
                    "type": "string"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Data_Group": {
            "title": "Data group",
            "type": "object",
            "description": "Data group definition with configurable options",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Data_Group"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "keyDataType": {
                    "title": "Key data type",
                    "description": "Specifies the type of record keys the data group contains. If string, the value will be escaped by default",
                    "type": "string",
                    "enum": [
                        "integer",
                        "ip",
                        "string"
                    ]
                },
                "records": {
                    "title": "Records",
                    "description": "List of records",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Data_Group_Records"
                    }
                }
            },
            "required": [
                "class",
                "keyDataType",
                "records"
            ],
            "additionalProperties": false
        },
        "Data_Group_Records": {
            "type": "object",
            "title": "Data Group Records",
            "description": "A record object to store",
            "properties": {
                "key": {
                    "title": "Record key",
                    "description": "The key for referencing the record",
                    "type": "string"
                },
                "value": {
                    "title": "Record value",
                    "description": "Value to store",
                    "type": "string"
                }
            }
        },
        "DTLS_Client": {
            "title": "DTLS Client Profile",
            "description": "DTLS Client Profile",
            "type": "object",
            "properties": {
                "authenticationTrustCA": {
                    "title": "Authentication trust CA",
                    "description": "Pointer to the CA Bundle used to validate client certificates",
                    "type": "object",
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Pointer_CA_Bundle"
                        }
                    ]
                },
                "allowExpiredCRL": {
                    "title": "Allow expired crl",
                    "description": "Specifies if the CRL can be used even if it has expired",
                    "type": "boolean",
                    "default": false
                },
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "DTLS_Client"
                },
                "certificates": {
                    "title": "Certificates",
                    "description": "Primary and (optional) additional certificates (order is significant, element 0 is the primary certificate)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DTLS_Client_Certificates"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "ciphers": {
                    "title": "Ciphers",
                    "description": "Ciphersuite selection string. Ciphers and cipherGroup are mutually exclusive, only use one",
                    "type": "string",
                    "default": "DEFAULT"
                },
                "enableAuthentication": {
                    "title": "Enable Authentication",
                    "description": "Enables authentication",
                    "type": "boolean"
                },
                "crlFile": {
                    "title": "Crl file name",
                    "description": "Specifies the name of a file containing a list of revoked client certificates",
                    "$ref": "#/definitions/Pointer_BIGIP"
                },
                "dtls1_0Enabled": {
                    "title": "DTLS 1.0",
                    "description": "Allow DTLS 1.0 Ciphers",
                    "type": "boolean",
                    "default": true
                },
                "dtls1_2Enabled": {
                    "title": "DTLS 1.2",
                    "description": "Allow DTLS 1.2 Ciphers",
                    "type": "boolean",
                    "default": true
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "DTLS_Client_Certificates": {
            "title": "DTLS_Client certificates",
            "description": "DTLS_Client certificates",
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "DTLS_Server": {
            "title": "DTLS Server Profile",
            "description": "DTLS Server Profile",
            "type": "object",
            "properties": {
                "authenticationTrustCA": {
                    "title": "Authentication trust CA",
                    "description": "Pointer to the CA Bundle used to validate client certificates",
                    "type": "object",
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Pointer_CA_Bundle"
                        }
                    ]
                },
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "DTLS_Server"
                },
                "certificates": {
                    "title": "Certificates",
                    "description": "Primary and (optional) additional certificates (order is significant, element 0 is the primary certificate)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DTLS_Server_Certificates"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "ciphers": {
                    "title": "Ciphers",
                    "description": "Ciphersuite selection string. Ciphers and cipherGroup are mutually exclusive, only use one",
                    "type": "string",
                    "default": "DEFAULT"
                },
                "enableAuthentication": {
                    "title": "Enable Authentication",
                    "description": "Enables authentication",
                    "type": "boolean"
                },
                "dtls1_0Enabled": {
                    "title": "DTLS 1.0",
                    "description": "Allow DTLS 1.0 Ciphers",
                    "type": "boolean",
                    "default": true
                },
                "dtls1_2Enabled": {
                    "title": "DTLS 1.2",
                    "description": "Allow DTLS 1.2 Ciphers",
                    "type": "boolean",
                    "default": true
                }
            },
            "required": [
                "class",
                "certificates"
            ],
            "additionalProperties": false
        },
        "DTLS_Server_Certificates": {
            "title": "DTLS_Server certificates",
            "description": "DTLS_Server certificates",
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "F5_String": {
            "title": "Common definition for ways to define a value that needs to be resolved",
            "description": "The value can be either a string, text property, base64 property, url property, etc.",
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "object",
                    "properties": {
                        "text": {
                            "$ref": "#/definitions/Property_Text"
                        },
                        "base64": {
                            "$ref": "#/definitions/Property_Base64"
                        },
                        "url": {
                            "$ref": "#/definitions/Resource_URL"
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1,
                    "maxProperties": 1
                }
            ],
            "errorMessage": "must be a string or an object with a single property of 'text', 'base64', 'url', or 'copyFrom'. Example formats: 'your_string', { \"text\": \"your_string\" }, { \"base64\": \"base64_value\" }, { \"url\": \"your_url\" }, or { \"copyFrom\": \"pointer_value\" }"
        },
        "Hostname": {
            "description": "Hostname",
            "title": "Hostname",
            "type": "string",
            "pattern": "[a-zA-Z_]+([a-zA-Z0-9\\-\\._]*)",
            "minLength": 1,
            "maxLength": 64000,
            "errorMessage": "must be a valid IP Address or Hostname"
        },
        "HTTP_Acceleration_Profile": {
            "title": "HTTP acceleration profile",
            "type": "object",
            "description": "HTTP acceleration profile with configurable options",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "HTTP_Acceleration_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "agingRate": {
                    "description": "Rate at which a cache entry ages",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 10,
                    "default": 9
                },
                "cacheSize": {
                    "description": "The maximum size (in megabytes) for the cache.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65536,
                    "default": 100
                },
                "ignoreHeaders": {
                    "description": "Which cache disabling headers will be ignored by the system",
                    "type": "string",
                    "enum": [
                        "none",
                        "max-age",
                        "all"
                    ],
                    "default": "all"
                },
                "insertAgeHeaderEnabled": {
                    "description": "Age and date headers are inserted into the response when enabled",
                    "type": "boolean",
                    "default": true
                },
                "maximumAge": {
                    "description": "How long (in seconds) the system will consider the cached content valid",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "default": 3600
                },
                "maximumEntries": {
                    "description": "The maximum number of entries that can reside in the cache",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 4294967295,
                    "default": 10000
                },
                "maximumObjectSize": {
                    "description": "The largest object (in bytes) that the system will cache",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "default": 50000
                },
                "minimumObjectSize": {
                    "description": "The smallest object (in bytes) that the system will cache",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "default": 500
                },
                "uriExcludeList": {
                    "description": "A list of URIs that will be excluded from the cache",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]+$"
                    },
                    "uniqueItems": true
                },
                "uriIncludeList": {
                    "description": "A list of URIs that will be cacheable",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]+$"
                    },
                    "uniqueItems": true
                },
                "uriIncludeOverrideList": {
                    "description": "A list of URIs that should be cached even though they may normally not be due to existing constraints",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]+$"
                    },
                    "uniqueItems": true
                },
                "uriPinnedList": {
                    "description": "A list of URIs that are kept in the cache regardless of maxAge or expiry settings",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]+$"
                    },
                    "uniqueItems": true
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "HTTP_Compress": {
            "title": "HTTP Compression profile",
            "type": "object",
            "description": "HTTP Compression profile with configurable options",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "HTTP_Compress"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "allowHTTP10": {
                    "description": "Specifies whether to forward HTTP 1.0 requests/responses (default false)",
                    "type": "boolean",
                    "default": false
                },
                "bufferSize": {
                    "title": "Buffer size",
                    "description": "Maximum number of response octets to buffer before deciding whether to apply compression (default 4096)",
                    "type": "integer",
                    "minimum": 256,
                    "maximum": 4294967295,
                    "default": 4096
                },
                "contentTypeExcludes": {
                    "title": "Content-Type exclude list",
                    "description": "List of response Content-Type values which BIG-IP AS3 should not compress.  Values are regular expressions that match Content-Type strings",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x22\\x7f-\\xff]+$"
                    },
                    "uniqueItems": true
                },
                "contentTypeIncludes": {
                    "title": "Content-Type include list",
                    "description": "List of response Content-Type values which BIG-IP AS3 should compress.  Values are regular expressions that match Content-Type strings",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x22\\x7f-\\xff]+$"
                    },
                    "uniqueItems": true
                },
                "gzipLevel": {
                    "title": "GZIP level",
                    "description": "Compression level (default 1); higher values produce greater compression but use more CPU cycles",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9,
                    "default": 1
                },
                "gzipMemory": {
                    "title": "GZIP memory level",
                    "description": "Compression memory allocation in kilobytes (default 8), should be a power of two",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 256,
                    "default": 8
                },
                "gzipWindowSize": {
                    "title": "GZIP window size",
                    "description": "Compression window size in kilobytes (default 16), should be a power of two",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 128,
                    "default": 16
                },
                "keepAcceptEncoding": {
                    "title": "Keep Accept-Encoding header",
                    "description": "Specifies that the system does not remove the Accept-Encoding header from an HTTP request (default false)",
                    "type": "boolean",
                    "default": false
                },
                "uriExcludes": {
                    "title": "URI exclude list",
                    "description": "List of request URI's for which BIG-IP AS3 should not compress responses.  Values are regular expressions that match request URI strings",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]+$"
                    },
                    "uniqueItems": true
                },
                "uriIncludes": {
                    "title": "URI include list",
                    "description": "List of request URI's for which BIG-IP AS3 should compress responses.  Values are regular expressions that match URI strings",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]+$"
                    },
                    "uniqueItems": true
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "HTTP_Profile": {
            "title": "HTTP profile",
            "type": "object",
            "description": "HTTP profile with configurable options",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "HTTP_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "cookiePassphrase": {
                    "title": "Cookie encryption passphrase",
                    "description": "Used to create secret key for cookie encryption (when missing, BIG-IP AS3 uses a system-generated key)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Property_Passphrase"
                        }
                    ],
                    "type": "string"
                },
                "encryptCookies": {
                    "title": "Encrypt cookies",
                    "description": "List cookies to encrypt en-route to the client and decrypt en-route to a pool member",
                    "type": "array",
                    "items": {
                        "title": "Cookie name",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64000
                    },
                    "uniqueItems": true
                },
                "fallbackRedirect": {
                    "title": "Fallback Redirect",
                    "description": "Domain name (or IP address) of service (if any) to which BIG-IP AS3 should redirect a request when no pool member is responsive or selected pool member returns a fallbackStatusCode",
                    "type": "string",
                    "pattern": "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?",
                    "minLength": 1,
                    "maxLength": 4096
                },
                "requestChunking": {
                    "title": "Request chunking",
                    "description": "Controls handling of HTTP payload chunking in requests from clients (default is 'preserve'). Note: 'selective' and 'preserve' will be translated to 'sustain'.",
                    "type": "string",
                    "enum": [
                        "selective",
                        "preserve",
                        "rechunk",
                        "sustain"
                    ],
                    "default": "preserve"
                },
                "responseChunking": {
                    "title": "Response chunking",
                    "description": "Controls handling of HTTP payload chunking in responses from pool members (default 'selective' adapts to most situations). Note: 'selective' and 'preserve' will be translated to 'sustain'.",
                    "type": "string",
                    "enum": [
                        "selective",
                        "preserve",
                        "unchunk",
                        "rechunk",
                        "sustain"
                    ],
                    "default": "selective"
                },
                "rewriteRedirects": {
                    "title": "Rewrite redirects",
                    "description": "In selected Location-header values (default none) of redirect responses from pool members, change protocol HTTP to HTTPS before passing redirects to clients",
                    "type": "string",
                    "enum": [
                        "none",
                        "all",
                        "matching",
                        "addresses",
                        "nodes"
                    ],
                    "default": "none"
                },
                "insertHeader": {
                    "title": "Insert header",
                    "description": "You may insert one header into each request before BIG-IP AS3 sends it to a pool member.  The header value may be a simple string or the result of an iRules TCL expression (for example, [IP::client_addr]).  This is the most efficient way to insert a single header; to insert multiple headers use an iRule or an Endpoint policy",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Header name",
                            "description": "Name of the HTTP header to insert",
                            "type": "string",
                            "pattern": "[\\x21-\\x7E]+",
                            "minLength": 1,
                            "maxLength": 128
                        },
                        "value": {
                            "title": "Header value",
                            "description": "Value of the HTTP header to insert",
                            "type": "string",
                            "pattern": "^[\\x20-\\x7E\\x80-\\xff\\x09]+$",
                            "minLength": 1,
                            "maxLength": 63872
                        }
                    },
                    "additionalProperties": false
                },
                "whiteOutHeader": {
                    "title": "White-out header",
                    "description": "You may name one request header you want whited-out of each request before BIG-IP AS3 sends it to a pool member.  To remove more than a single named header, use an iRule or an Endpoint policy.  (Whiting-out a header leaves its name but replaces its value in the request with space characters (ASCII 0x20) to avoid changing the length of the headers.)",
                    "type": "string",
                    "pattern": "[\\x21-\\x7E]+",
                    "minLength": 1,
                    "maxLength": 64000
                },
                "xForwardedFor": {
                    "title": "Insert X-Forwarded-For",
                    "description": "If true, insert an X-Forwarded-For header carrying the client IP address into each HTTP request sent to a pool member (default true)",
                    "type": "boolean",
                    "default": true
                },
                "serverHeaderValue": {
                    "title": "Server header value",
                    "description": "Server header value to place in responses generated by the ADC itself (not obtained from a pool member)",
                    "type": "string",
                    "default": "BigIP",
                    "pattern": "[\\x20-\\x7E\\x80-\\xff\\x09]+",
                    "minLength": 1,
                    "maxLength": 64000
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "HTTP2_Profile": {
            "title": "HTTP2 profile",
            "type": "object",
            "description": "Profile to enable HTTP2",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "HTTP2_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "activationMode": {
                    "title": "Activation Mode",
                    "description": "This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection.",
                    "type": "string",
                    "enum": [
                        "alpn",
                        "always"
                    ],
                    "default": "alpn"
                },
                "concurrentStreamsPerConnection": {
                    "title": "Concurrent streams per connection",
                    "description": "The number of concurrent connections to allow on a single HTTP/2 connection.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 256,
                    "default": 10
                },
                "enforceTlsRequirements": {
                    "title": "Enforce TLS requirements",
                    "description": "Enable or disable enforcement of TLS requirements.",
                    "type": "boolean",
                    "default": true
                },
                "insertHeader": {
                    "title": "Insert header",
                    "description": "This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2.",
                    "type": "boolean",
                    "default": false
                },
                "insertHeaderName": {
                    "title": "Insert header name",
                    "description": "This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.",
                    "type": "string",
                    "default": "X-HTTP2"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "IP_Address": {
            "description": "IP address (v4 or v6)",
            "title": "IP Address",
            "oneOf": [
                {
                    "$ref": "#/definitions/IPv4_Address"
                },
                {
                    "$ref": "#/definitions/IPv6_Address"
                }
            ],
            "errorMessage": "must be a valid IPv4 or IPv6 address"
        },
        "IP_Address_Range": {
            "description": "IP address (v4 or v6) Range",
            "title": "IP Address Range",
            "oneOf": [
                {
                    "$ref": "#/definitions/IPv4_Address_Range"
                },
                {
                    "$ref": "#/definitions/IPv6_Address_Range"
                }
            ],
            "errorMessage": "must be a valid IPv4 or IPv6 address (or address range)"
        },
        "IPv4_Address": {
            "description": "IPv4 Address",
            "title": "IPv4 Address",
            "type": "string",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
        },
        "IPv4_Address_Range": {
            "description": "IPv4 Address Range",
            "title": "IPv4 Address Range",
            "type": "string",
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])((/([0-9]|[1-2][0-9]|3[0-2]))?|(-((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])))?)$"
        },
        "IPv4_Netmask": {
            "description": "IPv4 Netmask used to divide an IP v4 address into subnets and specify the network's available hosts",
            "title": "IPv4 Netmask",
            "type": "string",
            "maxLength": 16,
            "pattern": "^((0|128|192|224|240|248|252|254|255)\\.0\\.0\\.0|255\\.(0|128|192|224|240|248|252|254|255)\\.0\\.0|255\\.255\\.(0|128|192|224|240|248|252|254|255)\\.0|255\\.255\\.255\\.(0|128|192|224|240|248|252|254|255))$"
        },
        "IPv6_Address": {
            "description": "IPv6 Address",
            "title": "IPv6 Address",
            "type": "string",
            "pattern": "^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$"
        },
        "IPv6_Address_Range": {
            "description": "IPv6 Address Range",
            "title": "IPv6 Address Range",
            "type": "string",
            "pattern": "^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))((/((12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9])))?|(-((([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))))?)$"
        },
        "IPv6_Netmask": {
            "description": "IPv6 Netmask used to divide an address into subnets and specify the network's available hosts",
            "title": "IPv6 Netmask",
            "type": "string",
            "maxLength": 45,
            "pattern": "^(((0{0,4}|[Ff]{3}[8CcEeFf0]|[Ff]{2}[8CcEeFf]0|[Ff][8CcEeFf]00|[8CcEeFf]000)(::|::0{1,4}(:0{1,4}){0,5}|(:0{1,4}){7}|(:0{1,4}){1,6}::|(:0{1,4}){1,5}::0{1,4}|(:0{1,4}){1,4}:(:0{1,4}){1,2}|(:0{1,4}){1,3}:(:0{1,4}){1,3}|(:0{1,4}){1,2}:(:0{1,4}){1,4}|:0{1,4}:(:0{1,4}){1,5}))|(([Ff]{4}:){1}([Ff]{3}[8CcEeFf0]|[Ff]{2}[8CcEeFf]0|[Ff][8CcEeFf]00|[8CcEeFf]000)(::|::0{1,4}(:0{1,4}){0,4}|(:0{1,4}){6}|(:0{1,4}){1,5}::|(:0{1,4}){1,4}::0{1,4}?|(:0{1,4}){1,3}:(:0{1,4}){1,2}|(:0{1,4}){1,2}:(:0{1,4}){1,3}|:0{1,4}:(:0{1,4}){1,4}))|(([Ff]{4}:){2}([Ff]{3}[8CcEeFf0]|[Ff]{2}[8CcEeFf]0|[Ff][8CcEeFf]00|[8CcEeFf]000)(::|::0{1,4}(:0{1,4}){0,3}|(:0{1,4}){5}|(:0{1,4}){1,4}::|(:0{1,4}){1,3}::0{1,4}?|(:0{1,4}){1,2}:(:0{1,4}){1,2}|:0{1,4}:(:0{1,4}){1,3}))|(([Ff]{4}:){3}([Ff]{3}[8CcEeFf0]|[Ff]{2}[8CcEeFf]0|[Ff][8CcEeFf]00|[8CcEeFf]000)(::|::0{1,4}(:0{1,4}){0,2}|(:0{1,4}){4}|(:0{1,4}){1,3}::|(:0{1,4}){1,2}::0{1,4}?|:0{1,4}:(:0{1,4}){1,2}))|(([Ff]{4}:){4}([Ff]{3}[8CcEeFf0]|[Ff]{2}[8CcEeFf]0|[Ff][8CcEeFf]00|[8CcEeFf]000)(::|::0{1,4}(:0{1,4}){0,1}|(:0{1,4}){3}|(:0{1,4}){1,2}::|:0{1,4}::0{1,4}?))|(([Ff]{4}:){5}([Ff]{3}[8CcEeFf0]|[Ff]{2}[8CcEeFf]0|[Ff][8CcEeFf]00|[8CcEeFf]000)(::|::0{1,4}|(:0{1,4}){2}|(:0{1,4})::))|(([Ff]{4}:){6}([Ff]{3}[8CcEeFf0]|[Ff]{2}[8CcEeFf]0|[Ff][8CcEeFf]00|[8CcEeFf]000)(:0{1,4}|::))|(([Ff]{4}:){7}([Ff]{3}[8CcEeFf0]|[Ff]{2}[8CcEeFf]0|[Ff][8CcEeFf]00|[8CcEeFf]000)))$"
        },
        "IRule": {
            "title": "iRule",
            "type": "object",
            "description": "iRule definition with configurable options",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "iRule"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "iRule": {
                    "$ref": "#/definitions/IRule_Core"
                }
            },
            "required": [
                "class",
                "iRule"
            ],
            "additionalProperties": false
        },
        "IRule_Core": {
            "title": "iRule Core definition",
            "description": "Reference to an iRule or text of an iRule",
            "allOf": [
                {
                    "$ref": "#/definitions/F5_String"
                }
            ]
        },
        "JWE": {
            "title": "JWE cryptogram",
            "description": "A value in a cryptogram which is a Flattened JWE JSON Serialization object. If 'miniJWE' is true then enc=(none|f5sv) only (in JOSE header)",
            "type": "object",
            "properties": {
                "ciphertext": {
                    "title": "Ciphertext",
                    "description": "Put base64url(data_value) here",
                    "type": "string",
                    "minLength": 2,
                    "allOf": [
                        {
                            "$ref": "#/definitions/Resource_Base64"
                        }
                    ]
                },
                "protected": {
                    "title": "JOSE header",
                    "description": "If you see 'protected'='eyJhbGciOiJkaXIiLCJlbmMiOiJmNXN2In0', 'ciphertext' contains base64url-encoded SecureVault cryptogram. JOSE header: alg=dir, enc=(none|f5sv); default enc=none (encoded default is 'protected'='eyJhbGciOiJkaXIiLCJlbmMiOiJub25lIn0', use with secret simply base64 url-encoded into 'ciphertext').",
                    "type": "string",
                    "minLength": 2,
                    "allOf": [
                        {
                            "$ref": "#/definitions/Resource_Base64"
                        }
                    ],
                    "default": "eyJhbGciOiJkaXIiLCJlbmMiOiJub25lIn0"
                }
            },
            "required": []
        },
        "L4_DSR_Profile": {
            "title": "L4 DSR Profile",
            "description": "Configures a Fast Layer 4 DSR profile",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "L4_DSR_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "idleTimeout": {
                    "title": "Idle timeout",
                    "description": "Number of seconds (default 300) connection may remain idle before it becomes eligible for deletion",
                    "type": "integer",
                    "default": 300
                },
                "looseClose": {
                    "$ref": "#/definitions/Property_Loose_Close",
                    "default": true
                },
                "looseInitialization": {
                    "$ref": "#/definitions/Property_Loose_Initialization",
                    "default": false
                },
                "resetOnTimeout": {
                    "$ref": "#/definitions/Property_Reset_On_Timeout",
                    "default": true
                },
                "tcpCloseTimeout": {
                    "$ref": "#/definitions/Property_TCP_Close_Timeout",
                    "default": 5
                },
                "tcpHandshakeTimeout": {
                    "$ref": "#/definitions/Property_TCP_Handshake_Timeout",
                    "default": 5
                },
                "pvaAccelerationMode": {
                    "$ref": "#/definitions/Property_PVA_Acceleration_Mode",
                    "default": "full"
                },
                "pvaDynamicServerPackets": {
                    "$ref": "#/definitions/Property_PVA_Dynamic_Server_Packets",
                    "default": 0
                },
                "pvaDynamicClientPackets": {
                    "$ref": "#/definitions/Property_PVA_Dynamic_Client_Packets",
                    "default": 1
                },
                "ipTosToServer": {
                    "title": "IP TOS to Server",
                    "description": "Specify the Type of Service (TOS) handling for traffic flowing towards the server (default 0)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255,
                    "default": 0
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "L4_Profile": {
            "title": "L4 Profile",
            "description": "Configures a Fast Layer 4 profile",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "L4_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "idleTimeout": {
                    "title": "Idle timeout",
                    "type": "integer",
                    "default": 300,
                    "description": "Number of seconds (default 300) connection may remain idle before it becomes eligible for deletion"
                },
                "looseClose": {
                    "$ref": "#/definitions/Property_Loose_Close",
                    "default": false
                },
                "looseInitialization": {
                    "$ref": "#/definitions/Property_Loose_Initialization",
                    "default": false
                },
                "resetOnTimeout": {
                    "$ref": "#/definitions/Property_Reset_On_Timeout",
                    "default": true
                },
                "tcpCloseTimeout": {
                    "$ref": "#/definitions/Property_TCP_Close_Timeout",
                    "default": 5
                },
                "tcpHandshakeTimeout": {
                    "$ref": "#/definitions/Property_TCP_Handshake_Timeout",
                    "default": 5
                },
                "pvaAccelerationMode": {
                    "$ref": "#/definitions/Property_PVA_Acceleration_Mode",
                    "default": "full"
                },
                "pvaDynamicServerPackets": {
                    "$ref": "#/definitions/Property_PVA_Dynamic_Server_Packets",
                    "default": 0
                },
                "pvaDynamicClientPackets": {
                    "$ref": "#/definitions/Property_PVA_Dynamic_Client_Packets",
                    "default": 1
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Label": {
            "title": "Label",
            "description": "Optional friendly name for this object",
            "type": "string"
        },
        "LastHop": {
            "title": "Last Hop",
            "description": "Name of built-in last-hop method used for tracking of source MAC address of incoming connections. (default 'default' means use system setting)",
            "type": "string",
            "default": "default",
            "enum": [
                "default",
                "auto",
                "disable"
            ]
        },
        "MaxConnections": {
            "title": "Maximum connections",
            "description": "Specifies the maximum number of concurrent connections you want to allow for the virtual server",
            "type": "integer",
            "minimum": 0,
            "additionalProperties": false,
            "maximum": 65535
        },
        "Metadata": {
            "title": "Metadata",
            "description": "Useful data-points for tracking, tagging, and organizing declarations.",
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "persist": {
                    "type": "boolean",
                    "default": true
                }
            },
            "required": [
                "value"
            ],
            "additionalProperties": false
        },
        "Mirroring": {
            "title": "Mirroring",
            "description": "Controls connection-mirroring for high-availability",
            "type": "string",
            "enum": [
                "none",
                "L4"
            ]
        },
        "Monitor": {
            "title": "Monitor",
            "description": "Declares a (possibly complex) monitor",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Monitor"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "monitorType": {
                    "title": "Monitor Type",
                    "description": "Specifies the type of monitor",
                    "type": "string",
                    "enum": [
                        "http",
                        "https",
                        "http2",
                        "icmp",
                        "inband",
                        "tcp",
                        "tcp-half-open",
                        "udp"
                    ]
                }
            },
            "required": [
                "class",
                "monitorType"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "const": "http"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor_HTTP"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "const": "https"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor_HTTP"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "const": "http2"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor_HTTP"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "const": "icmp"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor_ICMP"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "const": "inband"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor_Inband"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "const": "tcp"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor_TCP"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "const": "tcp-half-open"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor_TCP_Half_Open"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "const": "udp"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Monitor_UDP"
                    }
                }
            ]
        },
        "Monitor_HTTP": {
            "title": "Monitor HTTP",
            "description": "Monitor HTTP definition",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Monitor"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "interval": {
                    "title": "Interval",
                    "description": "Poll interval (seconds)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 3600,
                    "default": 5
                },
                "monitorType": {
                    "title": "Monitor Type",
                    "description": "Specifies the type of monitor",
                    "type": "string"
                },
                "passphrase": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Property_Passphrase"
                        }
                    ]
                },
                "receive": {
                    "title": "Receive = up",
                    "description": "Mark node up upon receipt of this (backquote-expanded) string",
                    "type": "string"
                },
                "receiveDown": {
                    "title": "Receive = down",
                    "description": "Mark node down upon receipt of this (backquote-expanded) string (optional; must be empty when 'reverse' is true)",
                    "type": "string"
                },
                "send": {
                    "title": "Send",
                    "description": "Send this (backquote-expanded) string to query node",
                    "type": "string"
                },
                "tcp": {
                    "title": "TCP",
                    "description": "Specifies TCP settings for monitor communications.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/TCP_Profile_Advanced_Monitor_Properties"
                        }
                    ]
                },
                "timeout": {
                    "title": "Timeout",
                    "description": "Time limit for node to respond (seconds)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 900,
                    "default": 16
                },
                "username": {
                    "title": "Username",
                    "description": "Username if any for query authentication",
                    "type": "string"
                }
            },
            "dependencies": {
                "monitorType": {
                    "if": {
                        "properties": {
                            "monitorType": {
                                "not": {
                                    "const": "http"
                                }
                            }
                        }
                    },
                    "then": {
                        "properties": {
                            "tcp": {
                                "const": ""
                            }
                        },
                        "errorMessage": "empty tcp settings when monitorType is not http"
                    }
                }
            },
            "additionalProperties": false
        },
        "Monitor_ICMP": {
            "title": "Monitor ICMP",
            "description": "Monitor ICMP definition",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Monitor"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "interval": {
                    "title": "Interval",
                    "description": "Poll interval (seconds)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 3600,
                    "default": 5
                },
                "monitorType": {
                    "title": "Monitor Type",
                    "description": "Specifies the type of monitor",
                    "type": "string"
                },
                "timeout": {
                    "title": "Timeout",
                    "description": "Time limit for node to respond (seconds)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 900,
                    "default": 16
                }
            },
            "additionalProperties": false
        },
        "Monitor_Inband": {
            "title": "Monitor Inband",
            "description": "Monitor Inband definition",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Monitor"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "failureInterval": {
                    "title": "Failure Interval",
                    "description": "Specifies an interval, in seconds. If the number of failures specified in the failures option occurs within this interval, the system marks the pool member as being unavailable.",
                    "type": "integer"
                },
                "failures": {
                    "title": "Failures",
                    "description": "Specifies the number of failures that the system allows to occur, within the time period specified in the failureInterval property, before marking a pool member unavailable. The multiple tmm processes use a per-process number to calculate failures, depending on the specified load. For example, for the Round Robin load balancing method, if there are N tmm processes and M pool members, and the Failures property is set to L, then up to N*M*L+1 failures can occur before the system marks the node as down. Specifying a value of 0 disables this option. A failure can be either a failure to connect or a failure of the pool member to respond within the time specified in the responseTime property.",
                    "type": "integer"
                },
                "monitorType": {
                    "title": "Monitor Type",
                    "description": "Specifies the type of monitor",
                    "type": "string"
                },
                "responseTime": {
                    "title": "Response Time",
                    "description": "Specifies an amount of time, in seconds. If the pool member does not respond with data after the specified amount of time has passed, the number of failures in this interval increments by 1. Specifying a value of 0 disables this option.",
                    "type": "integer"
                },
                "retryTime": {
                    "title": "Retry Time",
                    "description": "Specifies the amount of time in seconds after the pool member has been marked unavailable before the system retries to connect to the pool member. Specifying a value of 0 disables this option.",
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "Monitor_TCP": {
            "title": "Monitor TCP",
            "description": "Monitor TCP definition",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Monitor"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "interval": {
                    "title": "Interval",
                    "description": "Poll interval (seconds)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 3600,
                    "default": 5
                },
                "monitorType": {
                    "title": "Monitor Type",
                    "description": "Specifies the type of monitor",
                    "type": "string"
                },
                "receive": {
                    "title": "Receive = up",
                    "description": "Mark node up upon receipt of this (backquote-expanded) string",
                    "type": "string"
                },
                "receiveDown": {
                    "title": "Receive = down",
                    "description": "Mark node down upon receipt of this (backquote-expanded) string (optional; must be empty when 'reverse' is true)",
                    "type": "string"
                },
                "send": {
                    "title": "Send",
                    "description": "Send this (backquote-expanded) string to query node",
                    "type": "string"
                },
                "tcp": {
                    "title": "TCP",
                    "description": "Specifies TCP settings for monitor communications.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/TCP_Profile_Advanced_Monitor_Properties"
                        }
                    ]
                },
                "timeout": {
                    "title": "Timeout",
                    "description": "Time limit for node to respond (seconds)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 900,
                    "default": 16
                }
            },
            "additionalProperties": false
        },
        "Monitor_TCP_Half_Open": {
            "title": "Monitor TCP Half Open",
            "description": "Monitor properties available when monitorType = tcp-half-open",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Monitor"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "interval": {
                    "title": "Interval",
                    "description": "Poll interval (seconds)",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 2147483647,
                    "default": 5
                },
                "monitorType": {
                    "title": "Monitor Type",
                    "description": "Specifies the type of monitor",
                    "type": "string"
                },
                "timeout": {
                    "title": "Timeout",
                    "description": "Specifies, in seconds, the time in which the target must respond. The value of timeout should be less than or equal to interval.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 2147483647,
                    "default": 5
                }
            },
            "additionalProperties": false
        },
        "Monitor_UDP": {
            "title": "Monitor UDP",
            "description": "Monitor UDP definition",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Monitor"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "interval": {
                    "title": "Interval",
                    "description": "Poll interval (seconds)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 3600,
                    "default": 5
                },
                "monitorType": {
                    "title": "Monitor Type",
                    "description": "Specifies the type of monitor",
                    "type": "string"
                },
                "receive": {
                    "title": "Receive = up",
                    "description": "Mark node up upon receipt of this (backquote-expanded) string",
                    "type": "string"
                },
                "send": {
                    "title": "Send",
                    "description": "Send this (backquote-expanded) string to node",
                    "type": "string"
                },
                "timeout": {
                    "title": "Timeout",
                    "description": "Time limit for node to respond (seconds)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 900,
                    "default": 16
                },
                "udp": {
                    "title": "UDP",
                    "desription": "Specifies UDP settings for monitor communications.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/UDP_Profile_Advanced_Monitor_Properties"
                        }
                    ]
                }
            },
            "dependencies": {},
            "additionalProperties": false
        },
        "Multiplex_Profile": {
            "title": "Multiplex Profile",
            "description": "Multiplex (OneConnect) profile with configurable options",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Multiplex_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "sourceMask": {
                    "title": "Source Address Mask",
                    "description": "Idle connection re-use applies to connections whose source address matches this mask",
                    "type": "string",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/IPv4_Netmask"
                        },
                        {
                            "$ref": "#/definitions/IPv6_Netmask"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "Persist": {
            "title": "Persist",
            "description": "Declares persistence settings",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Persist"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "persistenceMethod": {
                    "$ref": "#/definitions/Property_Persistence_Method"
                }
            },
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "persistenceMethod": {
                                "const": "source-address"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Persist_Addr"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "persistenceMethod": {
                                "const": "destination-address"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Persist_Addr"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "persistenceMethod": {
                                "const": "tls-session-id"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Persist_TLS_Session"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "persistenceMethod": {
                                "const": "universal"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Persist_UIE"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "persistenceMethod": {
                                "const": "cookie"
                            },
                            "cookieMethod": {
                                "const": "insert"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/Persist_Cookie_Insert"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "persistenceMethod": {
                                "const": "cookie"
                            },
                            "cookieMethod": {
                                "const": "hash"
                            }
                        },
                        "required": [
                            "cookieMethod"
                        ]
                    },
                    "then": {
                        "$ref": "#/definitions/Persist_Cookie_Hash"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "persistenceMethod": {
                                "const": "cookie"
                            },
                            "cookieMethod": {
                                "const": "passive"
                            }
                        },
                        "required": [
                            "cookieMethod"
                        ]
                    },
                    "then": {
                        "$ref": "#/definitions/Persist_Cookie_Passive"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "persistenceMethod": {
                                "const": "cookie"
                            },
                            "cookieMethod": {
                                "const": "rewrite"
                            }
                        },
                        "required": [
                            "cookieMethod"
                        ]
                    },
                    "then": {
                        "$ref": "#/definitions/Persist_Cookie_Rewrite"
                    }
                }
            ],
            "required": [
                "class",
                "persistenceMethod"
            ],
            "additionalProperties": true
        },
        "Persist_Addr": {
            "title": "Address persistence",
            "description": "Configures an address affinity persistence profile",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Persist"
                },
                "addressMask": {
                    "$ref": "#/definitions/AddressMask"
                },
                "addressMaskIPv6": {
                    "$ref": "#/definitions/AddressMaskIPv6"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "duration": {
                    "$ref": "#/definitions/Property_Duration"
                },
                "matchAcrossPools": {
                    "$ref": "#/definitions/Property_Match_Across_Pools"
                },
                "matchAcrossVirtualAddresses": {
                    "$ref": "#/definitions/Property_Match_Across_Virtual_Addresses"
                },
                "matchAcrossVirtualPorts": {
                    "$ref": "#/definitions/Property_Match_Across_Virtual_Ports"
                },
                "persistenceMethod": {
                    "$ref": "#/definitions/Property_Persistence_Method"
                }
            },
            "additionalProperties": false
        },
        "Persist_Cookie_Hash": {
            "title": "Cookie persistence hash processing method",
            "description": "Configures a cookie persistence profile hash method",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Persist"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "alwaysSet": {
                    "$ref": "#/definitions/Property_Always_Set"
                },
                "cookieMethod": {
                    "$ref": "#/definitions/Property_Cookie_Method"
                },
                "cookieName": {
                    "description": "Cookie name for hash method (requires non-empty string)",
                    "minLength": 1,
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/Property_Duration"
                },
                "encrypt": {
                    "$ref": "#/definitions/Property_Encrypt"
                },
                "matchAcrossPools": {
                    "$ref": "#/definitions/Property_Match_Across_Pools"
                },
                "matchAcrossVirtualAddresses": {
                    "$ref": "#/definitions/Property_Match_Across_Virtual_Addresses"
                },
                "matchAcrossVirtualPorts": {
                    "$ref": "#/definitions/Property_Match_Across_Virtual_Ports"
                },
                "passphrase": {
                    "$ref": "#/definitions/Property_Passphrase"
                },
                "persistenceMethod": {
                    "$ref": "#/definitions/Property_Persistence_Method"
                }
            },
            "required": [
                "cookieName"
            ],
            "additionalProperties": false
        },
        "Persist_Cookie_Insert": {
            "title": "Cookie persistence",
            "description": "Configures a cookie persistence profile for Insert Method",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Persist"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "alwaysSet": {
                    "$ref": "#/definitions/Property_Always_Set"
                },
                "cookieMethod": {
                    "$ref": "#/definitions/Property_Cookie_Method",
                    "default": "insert"
                },
                "cookieName": {
                    "$ref": "#/definitions/Property_Cookie_Name"
                },
                "duration": {
                    "$ref": "#/definitions/Property_Duration"
                },
                "encrypt": {
                    "$ref": "#/definitions/Property_Encrypt"
                },
                "encryptCookieL4serverside": {
                    "$ref": "#/definitions/Property_Encrypt_Cookie_L4_Server_Side"
                },
                "httpOnly": {
                    "title": "HTTP only flag",
                    "description": "If true (default) the system sets the HTTPOnly flag",
                    "type": "boolean",
                    "default": true
                },
                "passphrase": {
                    "$ref": "#/definitions/Property_Passphrase"
                },
                "persistenceMethod": {
                    "$ref": "#/definitions/Property_Persistence_Method"
                },
                "ttl": {
                    "$ref": "#/definitions/Property_Ttl"
                },
                "secure": {
                    "title": "Secure flag",
                    "description": "If true (default) the system sets the Secure (TLS) flag",
                    "type": "boolean",
                    "default": true
                }
            },
            "additionalProperties": false
        },
        "Persist_Cookie_Passive": {
            "title": "Cookie persistence passive processing method",
            "description": "Configures a cookie persistence profile passive method",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Persist"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "alwaysSet": {
                    "$ref": "#/definitions/Property_Always_Set"
                },
                "cookieMethod": {
                    "$ref": "#/definitions/Property_Cookie_Method"
                },
                "cookieName": {
                    "description": "Cookie name for passive method (requires non-empty string)",
                    "minLength": 1,
                    "type": "string"
                },
                "encrypt": {
                    "$ref": "#/definitions/Property_Encrypt"
                },
                "passphrase": {
                    "$ref": "#/definitions/Property_Passphrase"
                },
                "persistenceMethod": {
                    "$ref": "#/definitions/Property_Persistence_Method"
                }
            },
            "required": [
                "cookieName"
            ],
            "additionalProperties": false
        },
        "Persist_Cookie_Rewrite": {
            "title": "Cookie persistence rewrite processing method",
            "description": "Configures a cookie persistence profile rewrite method",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Persist"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "alwaysSet": {
                    "$ref": "#/definitions/Property_Always_Set"
                },
                "cookieName": {
                    "$ref": "#/definitions/Property_Cookie_Name"
                },
                "cookieMethod": {
                    "$ref": "#/definitions/Property_Cookie_Method"
                },
                "encrypt": {
                    "$ref": "#/definitions/Property_Encrypt"
                },
                "encryptCookieL4serverside": {
                    "$ref": "#/definitions/Property_Encrypt_Cookie_L4_Server_Side"
                },
                "passphrase": {
                    "$ref": "#/definitions/Property_Passphrase"
                },
                "persistenceMethod": {
                    "$ref": "#/definitions/Property_Persistence_Method"
                },
                "ttl": {
                    "$ref": "#/definitions/Property_Ttl"
                }
            },
            "additionalProperties": false
        },
        "Persist_TLS_Session": {
            "title": "TLS session persistence",
            "description": "Configures an address affinity persistence profile",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Persist"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "duration": {
                    "$ref": "#/definitions/Property_Duration"
                },
                "matchAcrossPools": {
                    "$ref": "#/definitions/Property_Match_Across_Pools"
                },
                "matchAcrossVirtualAddresses": {
                    "$ref": "#/definitions/Property_Match_Across_Virtual_Addresses"
                },
                "matchAcrossVirtualPorts": {
                    "$ref": "#/definitions/Property_Match_Across_Virtual_Ports"
                },
                "persistenceMethod": {
                    "$ref": "#/definitions/Property_Persistence_Method"
                },
                "overrideConnectionLimit": {
                    "$ref": "#/definitions/Property_Override_Connection_Limit"
                }
            },
            "additionalProperties": false
        },
        "Persist_UIE": {
            "title": "Universal persistence",
            "description": "Configures a universal persistence profile",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Persist"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "duration": {
                    "$ref": "#/definitions/Property_Duration"
                },
                "matchAcrossPools": {
                    "$ref": "#/definitions/Property_Match_Across_Pools"
                },
                "matchAcrossVirtualAddresses": {
                    "$ref": "#/definitions/Property_Match_Across_Virtual_Addresses"
                },
                "matchAcrossVirtualPorts": {
                    "$ref": "#/definitions/Property_Match_Across_Virtual_Ports"
                },
                "persistenceMethod": {
                    "$ref": "#/definitions/Property_Persistence_Method"
                },
                "overrideConnectionLimit": {
                    "$ref": "#/definitions/Property_Override_Connection_Limit"
                },
                "iRule": {
                    "$ref": "#/definitions/Pointer_IRule"
                }
            },
            "additionalProperties": false
        },
        "Pointer_Allow_Networks": {
            "title": "L3 Networks list to allow",
            "description": "Names of existing L3 Networks that the application will pass traffic to.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Pointer_BIGIP"
            },
            "minItems": 1
        },
        "Pointer_Allow_Vlans": {
            "title": "VLAN (or L3 Networks for Next) list to allow",
            "description": "Names of existing VLANs (or L3 Networks for Next) that the application will pass traffic to.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Pointer_BIGIP"
            },
            "minItems": 1
        },
        "Pointer_Analytics_TCP_Profile": {
            "title": "Pointer Analytics TCP Profile",
            "description": "Reference for Analytics TCP Profile definition",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Pointer_Use"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "use": {
                            "description": "BIG-IP AS3 pointer to Analytics TCP Profile declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5PostProcess": {
                                "tag": "pointer",
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "class": {
                                            "const": "Analytics_TCP_Profile"
                                        }
                                    },
                                    "required": [
                                        "class"
                                    ]
                                },
                                "errSchemaPath": "#/definitions/Pointer_Analytics_TCP_Profile/allOf/1/properties/use"
                            }
                        }
                    }
                }
            ]
        },
        "Pointer_BIGIP": {
            "title": "Pointer BIG-IP",
            "description": "Reference for a BIG-IP object",
            "type": "object",
            "properties": {
                "bigip": {
                    "description": "Path to BIG-IP object",
                    "type": "string",
                    "minLength": 1,
                    "f5PostProcess": {
                        "tag": "bigip",
                        "errSchemaPath": "#/definitions/Pointer_BIGIP/properties/bigip"
                    }
                }
            },
            "required": [
                "bigip"
            ],
            "additionalProperties": false
        },
        "Pointer_BIGIP_Or_Use": {
            "title": "Pointer BIG-IP or Use",
            "description": "Reference for a BIG-IP or Use object",
            "if": {
                "type": "object",
                "required": [
                    "bigip"
                ]
            },
            "then": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_BIGIP"
                    }
                ]
            },
            "else": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_Use"
                    }
                ]
            }
        },
        "Pointer_CA_Bundle": {
            "title": "Pointer CA Bundle",
            "description": "Reference to a Ca Bundle",
            "additionalProperties": false,
            "maxProperties": 1,
            "minProperties": 1,
            "properties": {
                "bigip": {
                    "description": "Pathname of existing BIG-IP Ca Bundle",
                    "format": "f5bigip",
                    "type": "string"
                },
                "use": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Property_Use"
                        },
                        {
                            "f5PostProcess": {
                                "tag": "pointer",
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "class": {
                                            "enum": [
                                                "CA_Bundle"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "class"
                                    ]
                                },
                                "errSchemaPath": "#/definitions/Pointer_CA_Bundle/properties/use/allOf/1"
                            }
                        }
                    ]
                }
            },
            "type": "object"
        },
        "Pointer_CM": {
            "title": "Pointer CM",
            "description": "Reference for a CM object",
            "type": "object",
            "properties": {
                "cm": {
                    "description": "Name of a CM object",
                    "type": "string",
                    "minLength": 1,
                    "f5PostProcess": {
                        "tag": "cm",
                        "errSchemaPath": "#/definitions/Pointer_CM/properties/cm"
                    }
                }
            },
            "required": [
                "cm"
            ],
            "additionalProperties": false
        },
        "Pointer_CM_Condition": {
            "title": "System reference pointer (cm) condition check",
            "description": "System reference pointer (cm) condition check",
            "type": "object",
            "required": [
                "cm"
            ]
        },
        "Pointer_CM_IRule": {
            "title": "Pointer CM iRule",
            "description": "Reference for a CM iRule object",
            "type": "object",
            "properties": {
                "cm": {
                    "$ref": "#/definitions/Pointer_CM_IRule_Properties"
                }
            },
            "required": [
                "cm"
            ],
            "additionalProperties": false
        },
        "Pointer_CM_IRule_Or_Use": {
            "title": "System reference pointer (cm) or Use pointer",
            "description": "System reference pointers (cm) or Use pointer",
            "if": {
                "$ref": "#/definitions/Pointer_CM_Condition"
            },
            "then": {
                "oneOf": [
                    {
                        "$ref": "#/definitions/Pointer_CM"
                    },
                    {
                        "$ref": "#/definitions/Pointer_CM_IRule"
                    }
                ]
            },
            "else": {
                "$ref": "#/definitions/Pointer_Use"
            },
            "errorMessage": "must have one of the required properties 'cm' or 'use'. And the value must satisfy the property constraints"
        },
        "Pointer_CM_IRule_Properties": {
            "title": "CM iRule Pointer Object",
            "description": "CM iRule Pointer Data Object",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "staged": {
                    "type": "boolean"
                },
                "userId": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "version",
                "staged",
                "userId"
            ],
            "additionalProperties": false
        },
        "Pointer_CM_Or_Use": {
            "title": "System reference pointer (cm) or Use pointer",
            "description": "System reference pointers (cm) or Use pointer",
            "if": {
                "$ref": "#/definitions/Pointer_CM_Condition"
            },
            "then": {
                "$ref": "#/definitions/Pointer_CM"
            },
            "else": {
                "$ref": "#/definitions/Pointer_Use"
            },
            "errorMessage": "must have one of the required properties 'cm' or 'use'. And the value must satisfy the property constraints"
        },
        "Pointer_DTLS_Client": {
            "title": "Pointer DTLS_Client",
            "description": "BIG-IP AS3 pointer to DTLS Client Profile",
            "type": "string",
            "minLength": 1,
            "f5PostProcess": {
                "tag": "pointer",
                "data": {
                    "type": "object",
                    "properties": {
                        "class": {
                            "const": "DTLS_Client"
                        }
                    },
                    "required": [
                        "class"
                    ]
                },
                "errSchemaPath": "#/definitions/Pointer_DTLS_Client"
            }
        },
        "Pointer_DTLS_Server": {
            "title": "Pointer DTLS_Server",
            "description": "BIG-IP AS3 pointer to DTLS Server Profile",
            "type": "string",
            "minLength": 1,
            "f5PostProcess": {
                "tag": "pointer",
                "data": {
                    "type": "object",
                    "properties": {
                        "class": {
                            "const": "DTLS_Server"
                        }
                    },
                    "required": [
                        "class"
                    ]
                },
                "errSchemaPath": "#/definitions/Pointer_DTLS_Server"
            }
        },
        "Pointer_F5_String_Or_BIGIP": {
            "title": "Pointer F5 String or BIG-IP",
            "description": "Reference for a property or BIG-IP object",
            "if": {
                "type": "object",
                "required": [
                    "bigip"
                ]
            },
            "then": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_BIGIP"
                    }
                ]
            },
            "else": {
                "allOf": [
                    {
                        "$ref": "#/definitions/F5_String"
                    }
                ]
            }
        },
        "Pointer_HTTP_Acceleration_Profile": {
            "title": "Pointer HTTP Acceleration Profile",
            "additionalProperties": false,
            "allOf": [
                {
                    "f5PostProcess": {
                        "data": [
                            "query ltm profile web-acceleration"
                        ],
                        "tag": "bigComponent",
                        "errSchemaPath": "#/definitions/Pointer_HTTP_Acceleration_Profile/allOf/0"
                    }
                }
            ],
            "description": "Reference to a HTTP Acceleration Profile",
            "maxProperties": 1,
            "minProperties": 1,
            "properties": {
                "bigip": {
                    "description": "Pathname of existing BIG-IP HTTP Acceleration Profile",
                    "format": "f5bigip",
                    "type": "string"
                },
                "use": {
                    "description": "AS3 pointer to HTTP Acceleration Profile declaration",
                    "f5PostProcess": {
                        "data": {
                            "type": "object",
                            "properties": {
                                "class": {
                                    "enum": [
                                        "HTTP_Acceleration_Profile"
                                    ]
                                }
                            },
                            "required": [
                                "class"
                            ]
                        },
                        "tag": "pointer",
                        "errSchemaPath": "#/definitions/Pointer_HTTP_Acceleration_Profile/properties/use"
                    },
                    "minLength": 1,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Pointer_IRule": {
            "title": "Pointer iRule",
            "description": "iRule reference",
            "if": {
                "type": "object"
            },
            "then": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_CM_IRule_Or_Use"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "use": {
                                "description": "BIG-IP AS3 pointer to iRule declaration",
                                "type": "string",
                                "minLength": 1,
                                "f5PostProcess": {
                                    "tag": "pointer",
                                    "data": {
                                        "type": "object",
                                        "properties": {
                                            "class": {
                                                "const": "iRule"
                                            }
                                        },
                                        "required": [
                                            "class"
                                        ]
                                    },
                                    "errSchemaPath": "#/definitions/Pointer_IRule/then/allOf/1/properties/use"
                                }
                            }
                        }
                    }
                ]
            },
            "else": {
                "type": "string"
            }
        },
        "Pointer_IRules": {
            "title": "Pointer iRules",
            "description": "List of iRule references",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Pointer_IRule"
            },
            "uniqueItems": true
        },
        "Pointer_Monitor": {
            "title": "Pointer Monitor",
            "type": "object",
            "description": "Name or path to monitor",
            "additionalProperties": false,
            "properties": {
                "use": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Property_Use"
                        },
                        {
                            "description": "BIG-IP AS3 pointer to monitor declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5PostProcess": {
                                "tag": "pointer",
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "class": {
                                            "const": "Monitor"
                                        }
                                    },
                                    "required": [
                                        "class"
                                    ]
                                },
                                "errSchemaPath": "#/definitions/Pointer_Monitor/properties/use/allOf/1"
                            }
                        }
                    ]
                }
            }
        },
        "Pointer_Multiplex_Profile": {
            "title": "Pointer Multiplex Profile",
            "description": "Reference for Multiplex Profile definition",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Pointer_Use"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "use": {
                            "description": "BIG-IP AS3 pointer to Multiplex Profile declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5PostProcess": {
                                "tag": "pointer",
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "class": {
                                            "const": "Multiplex_Profile"
                                        }
                                    },
                                    "required": [
                                        "class"
                                    ]
                                },
                                "errSchemaPath": "#/definitions/Pointer_Multiplex_Profile/allOf/1/properties/use"
                            }
                        }
                    }
                }
            ]
        },
        "Pointer_Persist_Declaration": {
            "title": "Pointer Persist Declaration",
            "description": "Reference to a Persist Declaration",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "use": {
                    "description": "BIG-IP AS3 pointer to Persist declaration",
                    "type": "string",
                    "minLength": 1,
                    "f5PostProcess": {
                        "tag": "pointer",
                        "data": {
                            "type": "object",
                            "properties": {
                                "class": {
                                    "const": "Persist"
                                }
                            },
                            "required": [
                                "class"
                            ]
                        },
                        "errSchemaPath": "#/definitions/Pointer_Persist_Declaration/properties/use"
                    }
                }
            }
        },
        "Pointer_Pool": {
            "title": "Pointer Pool",
            "description": "Reference to a pool",
            "allOf": [
                {
                    "$ref": "#/definitions/Pointer_BIGIP_Or_Use"
                },
                {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "use": {
                            "f5PostProcess": {
                                "tag": "pointer",
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "class": {
                                            "enum": [
                                                "Pool"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "class"
                                    ]
                                },
                                "errSchemaPath": "#/definitions/Pointer_Pool/allOf/1/properties/use"
                            }
                        },
                        "bigip": {
                            "description": "Pathname of existing BIG-IP pool",
                            "format": "f5bigip"
                        }
                    },
                    "f5PostProcess": {
                        "tag": "bigComponent",
                        "data": [
                            "query ltm pool"
                        ],
                        "errSchemaPath": "#/definitions/Pointer_Pool/allOf/1"
                    }
                }
            ],
            "minProperties": 1,
            "maxProperties": 1
        },
        "Pointer_Pool_Object_Or_String": {
            "title": "Pointer to object or string Pool ",
            "description": "Reference to a pool",
            "if": {
                "type": "object",
                "required": [
                    "use"
                ]
            },
            "then": {
                "$ref": "#/definitions/Pointer_Pool"
            },
            "else": {
                "type": "string"
            }
        },
        "Pointer_Profile": {
            "title": "Pointer Profile",
            "description": "BIG-IP AS3 pointer to Ingress Engress Profile declaration",
            "type": "string",
            "minLength": 1,
            "f5PostProcess": {
                "tag": "pointer",
                "data": {
                    "type": "object",
                    "properties": {
                        "class": {
                            "enum": [
                                "TCP_Profile",
                                "HTTP_Profile",
                                "HTTP2_Profile"
                            ]
                        }
                    },
                    "required": [
                        "class"
                    ]
                },
                "errSchemaPath": "#/definitions/Pointer_Profile"
            }
        },
        "Pointer_Profile_Analytics": {
            "title": "Pointer Profile Analytics",
            "description": "Reference for Profile Analytics definition",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Pointer_Use"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "use": {
                            "description": "BIG-IP AS3 pointer to Profile Analytics declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5PostProcess": {
                                "tag": "pointer",
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "class": {
                                            "const": "Analytics_Profile"
                                        }
                                    },
                                    "required": [
                                        "class"
                                    ]
                                },
                                "errSchemaPath": "#/definitions/Pointer_Profile_Analytics/allOf/1/properties/use"
                            }
                        }
                    }
                }
            ]
        },
        "Pointer_Profile_Fallback_Persistence": {
            "title": "Pointer Profile Fallback Persistence",
            "description": "Reference for Profile Fallback Persistence",
            "items": {
                "if": {
                    "type": "string"
                },
                "then": {
                    "enum": [
                        "destination-address",
                        "source-address"
                    ]
                },
                "else": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pointer_Profile_Standard"
                        },
                        {
                            "$ref": "#/definitions/Pointer_Persist_Declaration"
                        }
                    ]
                }
            }
        },
        "Pointer_Profile_FAST_L4_Persistence": {
            "title": "Pointer Profile FAST L4 Persistence",
            "description": "Reference for Profile FAST L4 Persistence",
            "type": "array",
            "items": {
                "if": {
                    "type": "string"
                },
                "then": {
                    "enum": [
                        "destination-address",
                        "source-address",
                        "universal"
                    ]
                },
                "else": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pointer_Profile_Standard"
                        },
                        {
                            "$ref": "#/definitions/Pointer_Persist_Declaration"
                        }
                    ]
                }
            },
            "minItems": 0
        },
        "Pointer_Profile_HTTP_Persistence": {
            "title": "Pointer Profile Persistence",
            "description": "Reference for Profile Persistence",
            "type": "array",
            "items": {
                "if": {
                    "type": "string"
                },
                "then": {
                    "enum": [
                        "cookie",
                        "destination-address",
                        "source-address",
                        "tls-session-id",
                        "universal"
                    ]
                },
                "else": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pointer_Profile_Standard"
                        },
                        {
                            "$ref": "#/definitions/Pointer_Persist_Declaration"
                        }
                    ]
                }
            },
            "minItems": 0
        },
        "Pointer_Profile_Ingress_Egress": {
            "title": "Pointer Profile Ingress Egress",
            "description": "Reference use, ingress, and egress on profile",
            "type": "object",
            "properties": {
                "use": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Property_Use"
                        },
                        {
                            "$ref": "#/definitions/Pointer_Profile"
                        }
                    ]
                },
                "ingress": {
                    "if": {
                        "type": "object",
                        "required": [
                            "use"
                        ]
                    },
                    "then": {
                        "use": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Property_Use"
                                },
                                {
                                    "$ref": "#/definitions/Pointer_Profile"
                                }
                            ]
                        }
                    },
                    "else": {
                        "type": "string"
                    }
                },
                "egress": {
                    "if": {
                        "type": "object",
                        "required": [
                            "use"
                        ]
                    },
                    "then": {
                        "use": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Property_Use"
                                },
                                {
                                    "$ref": "#/definitions/Pointer_Profile"
                                }
                            ]
                        }
                    },
                    "else": {
                        "type": "string"
                    }
                }
            },
            "minProperties": 1,
            "additionalProperties": false
        },
        "Pointer_Profile_L4": {
            "title": "Pointer Profile L4",
            "description": "Reference for Profile L4",
            "allOf": [
                {
                    "$ref": "#/definitions/Pointer_Profile_Standard"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "use": {
                            "description": "BIG-IP AS3 pointer to Profile L4",
                            "type": "string",
                            "minLength": 1,
                            "f5PostProcess": {
                                "tag": "pointer",
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "class": {
                                            "const": "L4_Profile"
                                        }
                                    },
                                    "required": [
                                        "class"
                                    ]
                                },
                                "errSchemaPath": "#/definitions/Pointer_Profile_L4/allOf/1/properties/use"
                            }
                        }
                    }
                }
            ]
        },
        "Pointer_Profile_Standard": {
            "title": "Pointer Profile Standard",
            "description": "Reference for a standard profile",
            "allOf": [
                {
                    "$ref": "#/definitions/Pointer_Use"
                }
            ]
        },
        "Pointer_Profile_Standard_Plus_Template": {
            "title": "Pointer Profile Standard (plus template)",
            "description": "Reference for a standard profile with template",
            "if": {
                "type": "object",
                "required": [
                    "use"
                ]
            },
            "then": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_Use"
                    },
                    {
                        "additionalProperties": false,
                        "properties": {
                            "use": {
                                "description": "BIG-IP AS3 pointer to Profile Standard Plus Template declaration",
                                "type": "string",
                                "minLength": 1,
                                "f5PostProcess": {
                                    "tag": "pointer",
                                    "data": {
                                        "type": "object",
                                        "properties": {
                                            "class": {
                                                "const": "HTTP_Compress"
                                            }
                                        },
                                        "required": [
                                            "class"
                                        ]
                                    },
                                    "errSchemaPath": "#/definitions/Pointer_Profile_Standard_Plus_Template/then/allOf/1/properties/use"
                                }
                            }
                        }
                    }
                ]
            },
            "else": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_String"
                    }
                ]
            }
        },
        "Pointer_Profile_TCP_Persistence": {
            "title": "Pointer Profile Persistence",
            "description": "Reference for Profile Persistence",
            "type": "array",
            "items": {
                "if": {
                    "type": "string"
                },
                "then": {
                    "enum": [
                        "destination-address",
                        "source-address",
                        "tls-session-id",
                        "universal"
                    ]
                },
                "else": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pointer_Profile_Standard"
                        },
                        {
                            "$ref": "#/definitions/Pointer_Persist_Declaration"
                        }
                    ]
                }
            },
            "minItems": 0
        },
        "Pointer_Profile_UDP_Persistence": {
            "title": "Pointer Profile Persistence",
            "description": "Reference for Profile Persistence",
            "type": "array",
            "items": {
                "if": {
                    "type": "string"
                },
                "then": {
                    "enum": [
                        "universal"
                    ]
                },
                "else": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pointer_Profile_Standard"
                        },
                        {
                            "$ref": "#/definitions/Pointer_Persist_Declaration"
                        }
                    ]
                }
            },
            "minItems": 0
        },
        "Pointer_Reject_Vlans": {
            "title": "VLAN (or L3 Networks for Next) list to reject",
            "description": "Names of existing VLANs (or L3 Networks for Next) that the application will not pass traffic to.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Pointer_BIGIP"
            },
            "minItems": 1
        },
        "Pointer_SNAT": {
            "title": "Pointer SNAT",
            "description": "Reference for SNAT pointer (includes string and snat pool)",
            "if": {
                "type": "object"
            },
            "then": {
                "$ref": "#/definitions/Pointer_Use"
            },
            "else": {
                "type": "string",
                "enum": [
                    "none",
                    "self",
                    "auto",
                    "internal-test-value"
                ]
            }
        },
        "Pointer_String": {
            "title": "Pointer String",
            "description": "Reference that is a string",
            "type": "string"
        },
        "Pointer_System_All": {
            "title": "All system reference pointers",
            "description": "All system reference pointers valid for the runtime (bigip, cm, etc.)",
            "type": "object",
            "if": {
                "required": [
                    "bigip"
                ]
            },
            "then": {
                "$ref": "#/definitions/Pointer_BIGIP"
            },
            "else": {
                "$ref": "#/definitions/Pointer_CM"
            },
            "errorMessage": "must have one of the required properties 'bigip' or 'cm'. And the value must satisfy the property constraints"
        },
        "Pointer_System_All_Condition": {
            "title": "System reference pointers condition check",
            "description": "System reference pointers condition check",
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "bigip"
                    ]
                },
                {
                    "required": [
                        "cm"
                    ]
                }
            ]
        },
        "Pointer_System_All_List": {
            "title": "List of All system reference pointers",
            "description": "List of All system reference pointers",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Pointer_System_All"
            },
            "uniqueItems": true
        },
        "Pointer_System_All_Or_F5_String": {
            "title": "System reference pointers or F5 string",
            "description": "System reference pointers (all valid for the runtime) or F5 string",
            "if": {
                "$ref": "#/definitions/Pointer_System_All_Condition"
            },
            "then": {
                "$ref": "#/definitions/Pointer_System_All"
            },
            "else": {
                "$ref": "#/definitions/F5_String"
            }
        },
        "Pointer_System_All_Or_Use": {
            "title": "System reference pointers or F5 string",
            "description": "System reference pointers (all valid for the runtime) or Use pointer",
            "if": {
                "$ref": "#/definitions/Pointer_System_All_Condition"
            },
            "then": {
                "$ref": "#/definitions/Pointer_System_All"
            },
            "else": {
                "$ref": "#/definitions/Pointer_Use"
            },
            "errorMessage": "must have one of the required properties 'bigip', 'cm', or 'use'. And the value must satisfy the property constraints"
        },
        "Pointer_TLS_Forward_Proxy_Client": {
            "title": "Pointer TLS_Forward_Proxy_Client",
            "description": "BIG-IP AS3 pointer to TLS Forward Proxy Client Profile",
            "type": "string",
            "minLength": 1,
            "f5PostProcess": {
                "tag": "pointer",
                "data": {
                    "type": "object",
                    "properties": {
                        "class": {
                            "const": "TLS_Forward_Proxy_Client"
                        }
                    },
                    "required": [
                        "class"
                    ]
                },
                "errSchemaPath": "#/definitions/Pointer_TLS_Forward_Proxy_Client"
            }
        },
        "Pointer_TLS_Forward_Proxy_Server": {
            "title": "Pointer TLS_Forward_Proxy_Server",
            "description": "BIG-IP AS3 pointer to TLS Forward Proxy Server Profile",
            "type": "string",
            "minLength": 1,
            "f5PostProcess": {
                "tag": "pointer",
                "data": {
                    "type": "object",
                    "properties": {
                        "class": {
                            "const": "TLS_Forward_Proxy_Server"
                        }
                    },
                    "required": [
                        "class"
                    ]
                },
                "errSchemaPath": "#/definitions/Pointer_TLS_Forward_Proxy_Server"
            }
        },
        "Pointer_Use": {
            "title": "Pointer Use",
            "description": "Reference for use property",
            "type": "object",
            "properties": {
                "use": {
                    "$ref": "#/definitions/Property_Use"
                }
            },
            "required": [
                "use"
            ],
            "additionalProperties": false
        },
        "Pointer_Use_Or_String": {
            "title": "Pointer Use or String",
            "description": "Reference for use property or string",
            "if": {
                "type": "object",
                "required": [
                    "use"
                ]
            },
            "then": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_Use"
                    }
                ]
            },
            "else": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_String"
                    }
                ]
            }
        },
        "Pointer_Waf_Policy": {
            "title": "Pointer WAF Policy",
            "description": "Reference for WAF Policy definition",
            "type": "object",
            "if": {
                "$ref": "#/definitions/Pointer_System_All_Condition"
            },
            "then": {
                "$ref": "#/definitions/Pointer_System_All"
            },
            "else": {
                "allOf": [
                    {
                        "$ref": "#/definitions/Pointer_Use"
                    },
                    {
                        "additionalProperties": false,
                        "properties": {
                            "use": {
                                "description": "BIG-IP AS3 pointer to WAF Policy declaration",
                                "type": "string",
                                "minLength": 1,
                                "f5PostProcess": {
                                    "tag": "pointer",
                                    "data": {
                                        "type": "object",
                                        "properties": {
                                            "class": {
                                                "const": "WAF_Policy"
                                            }
                                        },
                                        "required": [
                                            "class"
                                        ]
                                    },
                                    "errSchemaPath": "#/definitions/Pointer_Waf_Policy/else/allOf/1/properties/use"
                                }
                            }
                        }
                    }
                ]
            },
            "errorMessage": "must have one of the required properties 'bigip', 'cm', or 'use'. And the value must satisfy the property constraints"
        },
        "Pool": {
            "title": "Pool",
            "description": "Declares a service pool",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Pool"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "allowNetworks": {
                    "type": "array",
                    "description": "Names of existing L3 Networks the pool members accept traffic from.",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/Pointer_BIGIP"
                    }
                },
                "allowVlans": {
                    "type": "array",
                    "description": "Names of existing VLANs the pool members accept traffic from. This is deprecated and will be removed in a future release.",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/Pointer_BIGIP"
                    },
                    "f5PostProcess": {
                        "tag": "deprecated",
                        "errSchemaPath": "#/definitions/Pool/properties/allowVlans"
                    }
                },
                "loadBalancingMode": {
                    "title": "LB mode",
                    "description": "Load-balancing mode",
                    "type": "string",
                    "enum": [
                        "fastest-app-response",
                        "least-connections-member",
                        "predictive-member",
                        "ratio-least-connections-member",
                        "ratio-session",
                        "round-robin",
                        "weighted-round-robin"
                    ],
                    "default": "round-robin"
                },
                "slowRampTime": {
                    "title": "Slow Ramp Time",
                    "description": "Sets the ramp-up time (in seconds) to gradually ramp up the load on newly added or freshly detected up pool members",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "default": 10
                },
                "serviceDownAction": {
                    "title": "Service Down Action",
                    "description": "The action to take if the service associated to this pool is marked down",
                    "type": "string",
                    "enum": [
                        "none",
                        "reset",
                        "drop",
                        "reselect"
                    ],
                    "default": "none"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "monitors": {
                    "type": "array",
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/Basic_Monitor"
                            },
                            {
                                "f5PostProcess": {
                                    "tag": "validation",
                                    "data": {
                                        "validationType": "supportedTypes",
                                        "propertyName": "monitorType",
                                        "pointerClass": "Monitor",
                                        "byApplicationType": {
                                            "Service_UDP": [
                                                "icmp",
                                                "udp"
                                            ],
                                            "Service_L4_DSR": [
                                                "http",
                                                "https",
                                                "http2",
                                                "icmp",
                                                "inband",
                                                "tcp",
                                                "tcp-half-open",
                                                "udp"
                                            ],
                                            "Service_HTTP": [
                                                "http",
                                                "https",
                                                "http2",
                                                "icmp",
                                                "inband",
                                                "tcp",
                                                "tcp-half-open"
                                            ],
                                            "Service_HTTPS": [
                                                "http",
                                                "https",
                                                "http2",
                                                "icmp",
                                                "inband",
                                                "tcp",
                                                "tcp-half-open"
                                            ],
                                            "Service_HTTPS_Forward_Proxy": [
                                                "http",
                                                "https",
                                                "http2",
                                                "icmp",
                                                "inband",
                                                "tcp",
                                                "tcp-half-open"
                                            ],
                                            "Service_L4": [
                                                "http",
                                                "https",
                                                "http2",
                                                "icmp",
                                                "inband",
                                                "tcp",
                                                "tcp-half-open"
                                            ],
                                            "Service_Pool": [
                                                "http",
                                                "https",
                                                "http2",
                                                "icmp",
                                                "inband",
                                                "tcp",
                                                "tcp-half-open",
                                                "udp"
                                            ],
                                            "Service_TCP": [
                                                "http",
                                                "https",
                                                "http2",
                                                "icmp",
                                                "inband",
                                                "tcp",
                                                "tcp-half-open"
                                            ],
                                            "Service_TCP_Forward_Proxy": [
                                                "http",
                                                "https",
                                                "http2",
                                                "icmp",
                                                "inband",
                                                "tcp",
                                                "tcp-half-open"
                                            ]
                                        }
                                    },
                                    "errSchemaPath": "#/definitions/Pool/properties/monitors/items/allOf/1"
                                }
                            }
                        ]
                    },
                    "f5PostProcess": {
                        "tag": "validation",
                        "data": {
                            "validationType": "uniqueItems",
                            "uniqueItemProperty": "monitorType",
                            "pointerClass": "Monitor"
                        },
                        "errSchemaPath": "#/definitions/Pool/properties/monitors"
                    },
                    "uniqueItems": true
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Pool_Member"
                    }
                },
                "minimumMembersActive": {
                    "title": "Minimum Members Active",
                    "description": "The minimum number of endpoints that must remain active in order to send traffic to that priority group. If value is zero, priority group functionality is disabled",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535,
                    "default": 0
                },
                "service": {
                    "type": "boolean",
                    "description": "Specifies whether a standalone Service should be created for this Pool",
                    "default": false
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "required": [
                            "allowVlans"
                        ]
                    }
                },
                "allowVlans": {
                    "not": {
                        "required": [
                            "allowNetworks"
                        ]
                    }
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Pool_Member": {
            "title": "Pool Member",
            "description": "Declares a service pool member",
            "type": "object",
            "properties": {
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "addressDiscovery": {
                    "title": "Address discovery",
                    "description": "Selects how server (node) addresses are discovered",
                    "type": "string"
                },
                "adminState": {
                    "title": "Admin State",
                    "description": "Setting adminState to enable will create the node in an operational state. Set to disable to disallow new connections but allow existing connections to drain. Set to offline to force immediate termination of all connections",
                    "type": "string",
                    "enum": [
                        "enable",
                        "disable",
                        "offline"
                    ],
                    "default": "enable"
                },
                "connectionLimit": {
                    "title": "Connection Limit",
                    "description": "Maximum concurrent connections to member",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "priorityGroup": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535,
                    "default": 0
                },
                "rateLimit": {
                    "title": "Rate Limit",
                    "type": "integer",
                    "description": "Maximum rate at which connecitons can be made to the pool member",
                    "maximum": 4294967295,
                    "minimum": 0
                },
                "ratio": {
                    "title": "Ratio",
                    "description": "Specifies the weight of the pool member for load balancing purposes",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 100
                },
                "servicePort": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535
                },
                "serverAddresses": {
                    "title": "Server addresses",
                    "description": "Static IP addresses of servers (nodes)",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "$ref": "#/definitions/IP_Address"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "servers": {
                    "title": "Advanced server addresses",
                    "description": "Same as serverAddresses, but allowing for further specification of each node",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Pool_Member_Servers"
                    }
                },
                "shareNodes": {
                    "description": "If enabled, nodes are created in /Common instead of the tenant's partition",
                    "type": "boolean"
                },
                "weight": {
                    "title": "Weight",
                    "description": "Specifies the weight for load balancing with weight-based load balancing methods",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535
                }
            },
            "required": [
                "servicePort"
            ],
            "anyOf": [
                {
                    "required": [
                        "serverAddresses"
                    ]
                },
                {
                    "required": [
                        "servers"
                    ]
                }
            ],
            "additionalProperties": false
        },
        "Pool_Member_Servers": {
            "title": "Pool Member Servers",
            "description": "Pool Member Servers",
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "$ref": "#/definitions/IP_Address"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "address"
            ],
            "additionalProperties": false
        },
        "Property_Always_Set": {
            "title": "Always set",
            "description": "If true, set cookie with every HTTP response (default false)",
            "type": "boolean",
            "default": false
        },
        "Property_Base64": {
            "title": "Property Base64",
            "description": "A Base64-encoded value (base64 property)",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource_Base64"
                }
            ],
            "f5PostProcess": {
                "tag": "base64",
                "errSchemaPath": "#/definitions/Property_Base64"
            }
        },
        "Property_Cookie_Method": {
            "title": "Method",
            "description": "Selects cookie processing method (default is insert)",
            "type": "string",
            "enum": [
                "insert",
                "hash",
                "passive",
                "rewrite"
            ],
            "default": "insert"
        },
        "Property_Cookie_Name": {
            "title": "Cookie name",
            "description": "Cookie name (for method 'insert', default (empty-string) yields system-generated name)",
            "type": "string",
            "pattern": "^[0-9A-Za-z.~#$%^&*_-]*$",
            "maxLength": 64,
            "default": ""
        },
        "Property_Duration": {
            "title": "Duration",
            "description": "Lifetime of persistence record (seconds, default 0 means indefinite)",
            "type": "integer",
            "minimum": 0,
            "maximum": 604800,
            "default": 0
        },
        "Property_Encrypt": {
            "title": "Encrypt cookie",
            "description": "If true, prevent disclosure of (or tampering with) ADC info in cookie (default false, to reduce latency)",
            "type": "boolean",
            "default": false
        },
        "Property_Encrypt_Cookie_L4_Server_Side": {
            "title": "Encrypt L4 Server Side Name",
            "description": "Specifies whether the L4-serverside name in the inserted BigIPServer default cookie should be encrypted",
            "type": "boolean",
            "default": false
        },
        "Property_Idle_Timeout": {
            "title": "Idle timeout",
            "description": "Number of seconds (may not be 0) connection may remain idle before it becomes eligible for deletion",
            "type": "integer"
        },
        "Property_Loose_Close": {
            "title": "Loose close",
            "description": "When true, system closes a loosely-initiated connection when the system receives the first FIN packet from either the client or the server",
            "type": "boolean"
        },
        "Property_Loose_Initialization": {
            "title": "Loose initialization",
            "description": "When true, system initializes a connection when it receives any TCP packet, rather than requiring a SYN packet for connection initiation",
            "type": "boolean"
        },
        "Property_Match_Across_Pools": {
            "title": "Match across pools",
            "description": "Specifies that the system can use any pool that contains this persistence record",
            "type": "boolean",
            "default": false
        },
        "Property_Match_Across_Virtual_Addresses": {
            "title": "Match across virtual addresses",
            "description": "Specifies that all persistent connections from the same client IP address go to the same node",
            "type": "boolean",
            "default": false
        },
        "Property_Match_Across_Virtual_Ports": {
            "title": "Match across virtual ports",
            "description": "Specifies that all persistent connections from a client IP address that go to the same virtual IP address also go to the same node",
            "type": "boolean",
            "default": false
        },
        "Property_Names": {
            "title": "Property Names",
            "description": "Property names",
            "pattern": "^[A-Za-z-￿][0-9A-Za-z-￿_:.-]*$",
            "minLength": 1,
            "maxLength": 192
        },
        "Property_Override_Connection_Limit": {
            "title": "Override Connection Limit",
            "description": "If true, do not enforce pool member connection limit for persisted connections",
            "type": "boolean",
            "default": false
        },
        "Property_Passphrase": {
            "title": "Property Passphrase",
            "description": "A passphrase (passphrase property)",
            "allOf": [
                {
                    "$ref": "#/definitions/Secret"
                }
            ],
            "f5PostProcess": {
                "tag": "secret",
                "errSchemaPath": "#/definitions/Property_Passphrase"
            }
        },
        "Property_Persistence_Method": {
            "title": "Persistence method",
            "description": "You may customize each basic persistence method",
            "type": "string",
            "enum": [
                "cookie",
                "destination-address",
                "source-address",
                "tls-session-id",
                "universal"
            ]
        },
        "Property_Proxy_Buffer_High": {
            "title": "Proxy buffer (high)",
            "description": "The system closes the receive window when the number of octets in proxy buffer rises above this value",
            "type": "integer",
            "minimum": 16384,
            "maximum": 67108864
        },
        "Property_Proxy_Buffer_Low": {
            "title": "Proxy buffer (low)",
            "description": "The system opens the receive window when the number of octets in proxy buffer falls below this value",
            "type": "integer",
            "minimum": 4096,
            "maximum": 67108864
        },
        "Property_PVA_Acceleration_Mode": {
            "title": "PVA acceleration",
            "description": "Specifies the preferred acceleration mode for the Packet Velocity ASIC (PVA) if the platform supports PVA acceleration. Full - Specifies the system applies full PVA acceleration when possible. Assisted - Specifies the system applies partial PVA acceleration. None - Specifies the system does not use PVA acceleration. Dedicated - Unconditionally enables ePVA acceleration for all TCP FastL4 connections. Inactive, but established connections are not removed from the ePVA to guarantee low latency forwarding for future packets.",
            "type": "string",
            "enum": [
                "full",
                "assisted",
                "none",
                "dedicated"
            ]
        },
        "Property_PVA_Dynamic_Client_Packets": {
            "title": "PVA Dynamic Client Packets",
            "description": "Indicates the number of client packets before dynamic ePVA hardware re-offloading occurs. The valid range is from 0 (zero) through 10.",
            "type": "integer",
            "minimum": 0,
            "maximum": 10
        },
        "Property_PVA_Dynamic_Server_Packets": {
            "title": "PVA Dynamic Server Packets",
            "description": "Indicates the number of server packets before dynamic ePVA hardware re-offloading occurs. The valid range is from 0 (zero) through 10.",
            "type": "integer",
            "minimum": 0,
            "maximum": 10
        },
        "Property_Reset_On_Timeout": {
            "title": "Reset On Timeout",
            "description": "Specifies whether to reset connections on timeout",
            "type": "boolean"
        },
        "Property_Send_Buffer_Size": {
            "title": "Send buffer size",
            "description": "Maximum size of send buffer in bytes",
            "type": "integer",
            "minimum": 536,
            "maximum": 67108864
        },
        "Property_TCP_Close_Timeout": {
            "title": "TCP Close timeout",
            "description": "Specifies a TCP close timeout in seconds",
            "type": "integer",
            "maximum": 86400,
            "minimum": 5
        },
        "Property_TCP_Handshake_Timeout": {
            "title": "TCP Handshake timeout",
            "description": "Specifies a TCP handshake timeout in seconds",
            "type": "integer",
            "maximum": 86400,
            "minimum": 5
        },
        "Property_Template": {
            "title": "Template",
            "description": "Template type for tcp. Use advanced template to configure TCP Profile properties beyond idleTimeout, sendBufferSize, proxyBufferLow, and proxyBufferHigh.",
            "type": "string",
            "enum": [
                "lan",
                "wan",
                "mobile",
                "normal",
                "advanced"
            ]
        },
        "Property_Text": {
            "title": "Property Text",
            "description": "A text value (text property)",
            "allOf": [
                {
                    "$ref": "#/definitions/Resource_Text"
                }
            ],
            "f5PostProcess": {
                "tag": "text",
                "errSchemaPath": "#/definitions/Property_Text"
            }
        },
        "Property_Ttl": {
            "title": "TTL",
            "description": "Requested cookie lifetime (seconds, default 0 means session cookie)",
            "type": "integer",
            "minimum": 0,
            "maximum": 604800,
            "default": 0
        },
        "Property_Use": {
            "title": "Property Use",
            "description": "Path to object in declaration",
            "type": "string",
            "pattern": "^[A-Za-z-￿/][0-9A-Za-z-￿_./-]*$",
            "maxLength": 579,
            "minLength": 1
        },
        "RateLimit": {
            "title": "Rate limit",
            "description": "Specifies the maximum number of connections per second allowed for a virtual server",
            "type": "integer",
            "minimum": 0,
            "additionalProperties": false,
            "maximum": 65535
        },
        "Remark": {
            "title": "Remark",
            "description": "Arbitrary (brief) text pertaining to this object (optional). Does not allow control characters, double-quote, or backslash.",
            "type": "string",
            "pattern": "^[^\\x00-\\x1f\\x22\\x5c\\x7f]*$",
            "maxLength": 256
        },
        "Resource_Base64": {
            "title": "Resource Base64",
            "description": "A Base64-encoded value",
            "type": "string"
        },
        "Resource_Text": {
            "title": "Resource Text",
            "description": "UTF-8 text (in JSON string)",
            "type": "string"
        },
        "Resource_URL": {
            "title": "Resource URL",
            "description": "The URL for a required resource",
            "oneOf": [
                {
                    "type": "string",
                    "f5PostProcess": {
                        "tag": "expand",
                        "errSchemaPath": "#/definitions/Resource_URL/oneOf/0"
                    }
                },
                {
                    "type": "object",
                    "properties": {
                        "authentication": {
                            "description": "Authentication to the remote source",
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/Basic_Auth"
                                }
                            ]
                        },
                        "url": {
                            "type": "string",
                            "description": "URL from which to retrieve value"
                        }
                    },
                    "required": [
                        "url"
                    ],
                    "additionalProperties": false
                }
            ]
        },
        "Secret": {
            "title": "Secret value",
            "description": "A value: (a) in a cryptogram in this object; (b) in a cryptogram elsewhere in this declaration; or (c) available from a URL",
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "object",
                    "oneOf": [
                        {
                            "required": [
                                "ciphertext"
                            ]
                        }
                    ],
                    "if": {
                        "required": [
                            "ciphertext"
                        ]
                    },
                    "then": {
                        "$ref": "#/definitions/JWE"
                    }
                }
            ]
        },
        "Service_Forwarding": {
            "title": "Service Forwarding",
            "description": "Service Forwarding",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_Forwarding"
                },
                "enable": {
                    "type": "boolean",
                    "default": true
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "forwardingType": {
                    "type": "string",
                    "enum": [
                        "ip"
                    ]
                },
                "mirroring": {
                    "type": "string",
                    "default": "none",
                    "enum": [
                        "none",
                        "L4"
                    ]
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "policyFirewallEnforced": {
                    "$ref": "#/definitions/Pointer_System_All_List"
                },
                "policyFirewallStaged": {
                    "$ref": "#/definitions/Pointer_System_All_List"
                },
                "profileL4": {
                    "$ref": "#/definitions/Pointer_Profile_L4"
                },
                "serverNetwork": {
                    "$ref": "#/definitions/Pointer_System_All"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Service_HTTP": {
            "title": "HTTP virtual server",
            "description": "HTTP virtual server",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_HTTP"
                },
                "persistenceMethods": {
                    "$ref": "#/definitions/Pointer_Profile_HTTP_Persistence",
                    "default": [
                        "cookie"
                    ]
                },
                "fallbackPersistenceMethod": {
                    "$ref": "#/definitions/Pointer_Profile_Fallback_Persistence"
                },
                "clientTLS": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/Pointer_String"
                        }
                    ]
                },
                "enable": {
                    "type": "boolean",
                    "default": true
                },
                "inlineConnector": {
                    "$ref": "#/definitions/Pointer_Use"
                },
                "inspectionServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Pointer_BIGIP"
                    }
                },
                "rateLimit": {
                    "$ref": "#/definitions/RateLimit"
                },
                "maxConnections": {
                    "$ref": "#/definitions/MaxConnections"
                },
                "lastHop": {
                    "$ref": "#/definitions/LastHop",
                    "default": "default"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "mirroring": {
                    "$ref": "#/definitions/Mirroring"
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "rejectVlans": {
                    "$ref": "#/definitions/Pointer_Reject_Vlans"
                },
                "profileAnalytics": {
                    "$ref": "#/definitions/Pointer_Profile_Analytics"
                },
                "profileAnalyticsTcp": {
                    "$ref": "#/definitions/Pointer_Analytics_TCP_Profile"
                },
                "profileHTTP": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "profileHTTP2": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "profileHTTPCompression": {
                    "$ref": "#/definitions/Pointer_Profile_Standard_Plus_Template"
                },
                "profileHTTPAcceleration": {
                    "$ref": "#/definitions/Pointer_HTTP_Acceleration_Profile"
                },
                "profileMultiplex": {
                    "$ref": "#/definitions/Pointer_Multiplex_Profile"
                },
                "profileTCP": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "serverTLS": {
                    "$ref": "#/definitions/Pointer_String"
                },
                "snat": {
                    "$ref": "#/definitions/Pointer_SNAT"
                },
                "tap": {
                    "$ref": "#/definitions/Pointer_Use"
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": false
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "policyAppMappingIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallEnforced": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallStaged": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyPerRequestAccess": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policySslOrchestrator": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyWAF": {
                    "$ref": "#/definitions/Pointer_Waf_Policy"
                },
                "pool": {
                    "$ref": "#/definitions/Pointer_Pool_Object_Or_String"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "virtualPort": {
                    "$ref": "#/definitions/Virtual_Port",
                    "default": 80
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowNetworks must not be used with allowVlans or rejectVlans properties"
                },
                "allowVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowVlans must not be used with rejectVlans or allowNetworks properties"
                },
                "rejectVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property rejectVlans must not be used with allowVlans or allowNetworks properties"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Service_HTTPS": {
            "title": "HTTPS virtual server",
            "description": "HTTPS virtual server",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_HTTPS"
                },
                "clientTLS": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/Pointer_String"
                        }
                    ]
                },
                "enable": {
                    "type": "boolean",
                    "default": true
                },
                "inlineConnector": {
                    "$ref": "#/definitions/Pointer_Use"
                },
                "inspectionServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Pointer_BIGIP"
                    }
                },
                "profileBotDefense": {
                    "description": "Attaches a Bot Defense profile to the service",
                    "type": "array",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ]
                    }
                },
                "rateLimit": {
                    "$ref": "#/definitions/RateLimit"
                },
                "maxConnections": {
                    "$ref": "#/definitions/MaxConnections"
                },
                "lastHop": {
                    "$ref": "#/definitions/LastHop",
                    "default": "default"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "mirroring": {
                    "$ref": "#/definitions/Mirroring"
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "rejectVlans": {
                    "$ref": "#/definitions/Pointer_Reject_Vlans"
                },
                "fallbackPersistenceMethod": {
                    "$ref": "#/definitions/Pointer_Profile_Fallback_Persistence"
                },
                "persistenceMethods": {
                    "$ref": "#/definitions/Pointer_Profile_HTTP_Persistence",
                    "default": [
                        "cookie"
                    ]
                },
                "profileAnalytics": {
                    "$ref": "#/definitions/Pointer_Profile_Analytics"
                },
                "profileAnalyticsTcp": {
                    "$ref": "#/definitions/Pointer_Analytics_TCP_Profile"
                },
                "profileHTTP": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "profileHTTP2": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "profileHTTPCompression": {
                    "$ref": "#/definitions/Pointer_Profile_Standard_Plus_Template"
                },
                "profileHTTPAcceleration": {
                    "$ref": "#/definitions/Pointer_HTTP_Acceleration_Profile"
                },
                "profileMultiplex": {
                    "$ref": "#/definitions/Pointer_Multiplex_Profile"
                },
                "profileTCP": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "redirect80": {
                    "type": "boolean"
                },
                "serverTLS": {
                    "$ref": "#/definitions/Pointer_String"
                },
                "snat": {
                    "$ref": "#/definitions/Pointer_SNAT"
                },
                "tap": {
                    "$ref": "#/definitions/Pointer_Use"
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": false
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "policyAppMappingIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallEnforced": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallStaged": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyPerRequestAccess": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policySslOrchestrator": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyWAF": {
                    "$ref": "#/definitions/Pointer_Waf_Policy"
                },
                "pool": {
                    "$ref": "#/definitions/Pointer_Pool_Object_Or_String"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "virtualPort": {
                    "$ref": "#/definitions/Virtual_Port",
                    "default": 443
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowNetworks must not be used with allowVlans or rejectVlans properties"
                },
                "allowVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowVlans must not be used with rejectVlans or allowNetworks properties"
                },
                "rejectVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property rejectVlans must not be used with allowVlans or allowNetworks properties"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Service_HTTPS_Forward_Proxy": {
            "title": "HTTPS forward proxy server",
            "description": "HTTP forward proxy server",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_HTTPS_Forward_Proxy"
                },
                "enable": {
                    "type": "boolean",
                    "default": true
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "rateLimit": {
                    "$ref": "#/definitions/RateLimit"
                },
                "maxConnections": {
                    "$ref": "#/definitions/MaxConnections"
                },
                "lastHop": {
                    "$ref": "#/definitions/LastHop",
                    "default": "default"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "pool": {
                    "$ref": "#/definitions/Pointer_Pool_Object_Or_String"
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": false
                },
                "snat": {
                    "$ref": "#/definitions/Pointer_SNAT"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "virtualPort": {
                    "$ref": "#/definitions/Virtual_Port",
                    "default": 80
                },
                "clientTLS": {
                    "$ref": "#/definitions/Pointer_TLS_Forward_Proxy_Client"
                },
                "serverTLS": {
                    "$ref": "#/definitions/Pointer_TLS_Forward_Proxy_Server"
                },
                "profileTCP": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "profileHTTP": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "policySslOrchestrator": {
                    "$ref": "#/definitions/Pointer_System_All"
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowNetworks must not be used with allowVlans or rejectVlans properties"
                },
                "allowVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowVlans must not be used with rejectVlans or allowNetworks properties"
                },
                "rejectVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property rejectVlans must not be used with allowVlans or allowNetworks properties"
                }
            },
            "required": [
                "class",
                "clientTLS",
                "serverTLS"
            ],
            "additionalProperties": false
        },
        "Service_L4": {
            "title": "Fast L4 virtual server",
            "description": "Fast L4 virtual server",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_L4"
                },
                "enable": {
                    "title": "Enable",
                    "description": "Enables property function",
                    "type": "boolean",
                    "default": true
                },
                "profileL4": {
                    "$ref": "#/definitions/Pointer_Profile_Standard"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "virtualPort": {
                    "$ref": "#/definitions/Virtual_Port",
                    "default": 80
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "rateLimit": {
                    "$ref": "#/definitions/RateLimit"
                },
                "maxConnections": {
                    "$ref": "#/definitions/MaxConnections"
                },
                "lastHop": {
                    "$ref": "#/definitions/LastHop",
                    "default": "default"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "mirroring": {
                    "$ref": "#/definitions/Mirroring"
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "rejectVlans": {
                    "$ref": "#/definitions/Pointer_Reject_Vlans"
                },
                "profileBotDefense": {
                    "description": "Attaches a Bot Defense profile to the service",
                    "type": "array",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ]
                    }
                },
                "persistenceMethods": {
                    "$ref": "#/definitions/Pointer_Profile_FAST_L4_Persistence",
                    "default": [
                        "source-address"
                    ]
                },
                "snat": {
                    "$ref": "#/definitions/Pointer_SNAT"
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": false
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "policyFirewallEnforced": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallStaged": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policySslOrchestrator": {
                    "$ref": "#/definitions/Pointer_System_All",
                    "description": "Deprecated. Will be removed in a later release."
                },
                "policyWAF": {
                    "description": "Deprecated. Will be removed in a later release.",
                    "$ref": "#/definitions/Pointer_Waf_Policy"
                },
                "policyAppMappingIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyPerRequestAccess": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "pool": {
                    "if": {
                        "type": "object",
                        "required": [
                            "use"
                        ]
                    },
                    "then": {
                        "$ref": "#/definitions/Pointer_Pool"
                    },
                    "else": {
                        "type": "string"
                    }
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowNetworks must not be used with allowVlans or rejectVlans properties"
                },
                "allowVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowVlans must not be used with rejectVlans or allowNetworks properties"
                },
                "rejectVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property rejectVlans must not be used with allowVlans or allowNetworks properties"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Service_L4_DSR": {
            "title": "Fast L4 DSR virtual server",
            "description": "Fast L4 DSR virtual server",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_L4_DSR"
                },
                "enable": {
                    "title": "Enable",
                    "description": "Enables property function",
                    "type": "boolean",
                    "default": true
                },
                "profileL4Dsr": {
                    "$ref": "#/definitions/Pointer_Profile_Standard"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "virtualPort": {
                    "$ref": "#/definitions/Virtual_Port",
                    "default": 80
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "lastHop": {
                    "$ref": "#/definitions/LastHop",
                    "default": "default"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "mirroring": {
                    "$ref": "#/definitions/Mirroring"
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "rejectVlans": {
                    "$ref": "#/definitions/Pointer_Reject_Vlans"
                },
                "profileBotDefense": {
                    "description": "Attaches a Bot Defense profile to the service",
                    "type": "array",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ]
                    }
                },
                "persistenceMethods": {
                    "$ref": "#/definitions/Pointer_Profile_FAST_L4_Persistence",
                    "default": [
                        "source-address"
                    ]
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": "preserve-strict"
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "policyAppMappingIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallEnforced": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallStaged": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyPerRequestAccess": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "pool": {
                    "if": {
                        "type": "object",
                        "required": [
                            "use"
                        ]
                    },
                    "then": {
                        "$ref": "#/definitions/Pointer_Pool"
                    },
                    "else": {
                        "type": "string"
                    }
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowNetworks must not be used with allowVlans or rejectVlans properties"
                },
                "allowVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowVlans must not be used with rejectVlans or allowNetworks properties"
                },
                "rejectVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property rejectVlans must not be used with allowVlans or allowNetworks properties"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Service_Pool": {
            "title": "Pool Service",
            "description": "Pool Service",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_Pool"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": false
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "pool": {
                    "if": {
                        "type": "object",
                        "required": [
                            "use"
                        ]
                    },
                    "then": {
                        "$ref": "#/definitions/Pointer_Pool"
                    },
                    "else": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Service_TCP": {
            "title": "TCP virtual server",
            "description": "TCP virtual server",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_TCP"
                },
                "enable": {
                    "type": "boolean",
                    "default": true
                },
                "clientTLS": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/Pointer_String"
                        }
                    ]
                },
                "rateLimit": {
                    "$ref": "#/definitions/RateLimit"
                },
                "maxConnections": {
                    "$ref": "#/definitions/MaxConnections"
                },
                "lastHop": {
                    "$ref": "#/definitions/LastHop",
                    "default": "default"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "mirroring": {
                    "$ref": "#/definitions/Mirroring"
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "rejectVlans": {
                    "$ref": "#/definitions/Pointer_Reject_Vlans"
                },
                "fallbackPersistenceMethod": {
                    "$ref": "#/definitions/Pointer_Profile_Fallback_Persistence"
                },
                "persistenceMethods": {
                    "$ref": "#/definitions/Pointer_Profile_TCP_Persistence",
                    "default": [
                        "source-address"
                    ]
                },
                "profileAnalyticsTcp": {
                    "$ref": "#/definitions/Pointer_Analytics_TCP_Profile"
                },
                "profileTCP": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": false
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "inlineConnector": {
                    "$ref": "#/definitions/Pointer_Use"
                },
                "inspectionServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Pointer_BIGIP"
                    }
                },
                "policyFirewallEnforced": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallStaged": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policySslOrchestrator": {
                    "$ref": "#/definitions/Pointer_System_All",
                    "description": "Deprecated. Will be removed in a later release."
                },
                "policyWAF": {
                    "description": "Deprecated. Will be removed in a later release.",
                    "$ref": "#/definitions/Pointer_Waf_Policy"
                },
                "policyAppMappingIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyPerRequestAccess": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "pool": {
                    "$ref": "#/definitions/Pointer_Pool_Object_Or_String"
                },
                "snat": {
                    "$ref": "#/definitions/Pointer_SNAT"
                },
                "tap": {
                    "$ref": "#/definitions/Pointer_Use"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "virtualPort": {
                    "$ref": "#/definitions/Virtual_Port",
                    "default": 80
                },
                "serverTLS": {
                    "$ref": "#/definitions/Pointer_String"
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowNetworks must not be used with allowVlans or rejectVlans properties"
                },
                "allowVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowVlans must not be used with rejectVlans or allowNetworks properties"
                },
                "rejectVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property rejectVlans must not be used with allowVlans or allowNetworks properties"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Service_TCP_Forward_Proxy": {
            "title": "TCP virtual server with forward proxy configuration",
            "description": "TCP virtual server with forward proxy configuration",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_TCP_Forward_Proxy"
                },
                "enable": {
                    "type": "boolean",
                    "default": true
                },
                "rateLimit": {
                    "$ref": "#/definitions/RateLimit"
                },
                "maxConnections": {
                    "$ref": "#/definitions/MaxConnections"
                },
                "lastHop": {
                    "$ref": "#/definitions/LastHop",
                    "default": "default"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "rejectVlans": {
                    "$ref": "#/definitions/Pointer_Reject_Vlans"
                },
                "profileTCP": {
                    "$ref": "#/definitions/Pointer_Profile_Ingress_Egress"
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": false
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "policySslOrchestrator": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "pool": {
                    "$ref": "#/definitions/Pointer_Pool_Object_Or_String"
                },
                "snat": {
                    "$ref": "#/definitions/Pointer_SNAT"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "virtualPort": {
                    "$ref": "#/definitions/Virtual_Port",
                    "default": 80
                },
                "clientTLS": {
                    "title": "Client TLS Proxy",
                    "description": "BIG-IP AS3 pointer to client TLS Proxy Profile",
                    "$ref": "#/definitions/Pointer_TLS_Forward_Proxy_Client"
                },
                "serverTLS": {
                    "title": "Server TLS Proxy",
                    "description": "BIG-IP AS3 pointer to server TLS Proxy Profile",
                    "$ref": "#/definitions/Pointer_TLS_Forward_Proxy_Server"
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowNetworks must not be used with allowVlans or rejectVlans properties"
                },
                "allowVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowVlans must not be used with rejectVlans or allowNetworks properties"
                },
                "rejectVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property rejectVlans must not be used with allowVlans or allowNetworks properties"
                }
            },
            "required": [
                "class",
                "clientTLS",
                "serverTLS"
            ],
            "additionalProperties": false
        },
        "Service_UDP": {
            "title": "UDP virtual server",
            "description": "UDP virtual server",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "Service_UDP"
                },
                "enable": {
                    "type": "boolean",
                    "default": true
                },
                "translateServerAddress": {
                    "$ref": "#/definitions/TranslateServerAddress",
                    "default": true
                },
                "translateClientPort": {
                    "$ref": "#/definitions/TranslateClientPort",
                    "default": false
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "rateLimit": {
                    "$ref": "#/definitions/RateLimit"
                },
                "maxConnections": {
                    "$ref": "#/definitions/MaxConnections"
                },
                "lastHop": {
                    "$ref": "#/definitions/LastHop",
                    "default": "default"
                },
                "metadata": {
                    "$ref": "#/definitions/Metadata"
                },
                "mirroring": {
                    "$ref": "#/definitions/Mirroring"
                },
                "allowNetworks": {
                    "$ref": "#/definitions/Pointer_Allow_Networks"
                },
                "allowVlans": {
                    "$ref": "#/definitions/Pointer_Allow_Vlans"
                },
                "rejectVlans": {
                    "$ref": "#/definitions/Pointer_Reject_Vlans"
                },
                "fallbackPersistenceMethod": {
                    "$ref": "#/definitions/Pointer_Profile_Fallback_Persistence"
                },
                "persistenceMethods": {
                    "$ref": "#/definitions/Pointer_Profile_UDP_Persistence",
                    "default": [
                        "source-address"
                    ]
                },
                "profileUDP": {
                    "$ref": "#/definitions/Pointer_Profile_Standard"
                },
                "profileBotDefense": {
                    "type": "array",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ]
                    }
                },
                "iRules": {
                    "$ref": "#/definitions/Pointer_IRules"
                },
                "inlineConnector": {
                    "$ref": "#/definitions/Pointer_Use"
                },
                "inspectionServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Pointer_BIGIP"
                    }
                },
                "policyFirewallEnforced": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyFirewallStaged": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policySslOrchestrator": {
                    "$ref": "#/definitions/Pointer_System_All",
                    "description": "Deprecated. Will be removed in a later release."
                },
                "policyWAF": {
                    "description": "Deprecated. Will be removed in a later release.",
                    "$ref": "#/definitions/Pointer_Waf_Policy"
                },
                "policyAppMappingIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyIAM": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "policyPerRequestAccess": {
                    "$ref": "#/definitions/Pointer_System_All"
                },
                "pool": {
                    "$ref": "#/definitions/Pointer_Pool_Object_Or_String"
                },
                "snat": {
                    "$ref": "#/definitions/Pointer_SNAT"
                },
                "clientDTLS": {
                    "$ref": "#/definitions/Pointer_DTLS_Client"
                },
                "serverDTLS": {
                    "$ref": "#/definitions/Pointer_DTLS_Server"
                },
                "tap": {
                    "$ref": "#/definitions/Pointer_Use"
                },
                "virtualAddresses": {
                    "$ref": "#/definitions/Virtual_Addresses"
                },
                "virtualPort": {
                    "$ref": "#/definitions/Virtual_Port",
                    "default": 80
                }
            },
            "dependencies": {
                "allowNetworks": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowNetworks must not be used with allowVlans or rejectVlans properties"
                },
                "allowVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            },
                            {
                                "required": [
                                    "rejectVlans"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property allowVlans must not be used with rejectVlans or allowNetworks properties"
                },
                "rejectVlans": {
                    "not": {
                        "anyOf": [
                            {
                                "required": [
                                    "allowVlans"
                                ]
                            },
                            {
                                "required": [
                                    "allowNetworks"
                                ]
                            }
                        ]
                    },
                    "errorMessage": "The property rejectVlans must not be used with allowVlans or allowNetworks properties"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "SNAT_Pool": {
            "title": "SNAT Pool",
            "description": "SNAT pool",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "SNAT_Pool"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "snatAddresses": {
                    "title": "SNAT addresses",
                    "description": "List of SNAT addresses-- may include both IPv4 and IPv6",
                    "type": "array",
                    "items": {
                        "title": "SNAT address",
                        "type": "string",
                        "format": "f5ip"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "Target": {
            "title": "Target",
            "description": "Target properties which indicate where the declaration should be configured",
            "type": "object",
            "properties": {
                "address": {
                    "description": "IP address (v4 or v6) or Hostname",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/Hostname"
                        },
                        {
                            "$ref": "#/definitions/IP_Address"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "TCP_Profile": {
            "title": "TCP Profile",
            "description": "Declares a TCP Profile. The property 'template' can be used to set the default properties for TCP Profile (WAN, LAN, and Mobile).",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TCP_Profile"
                },
                "ackOnPush": {
                    "title": "Acknowledge On Push",
                    "description": "When enabled, significantly improves performance to Microsoft Windows and macOS peers who are writing out on a very small send buffer. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "appropriateByteCounting": {
                    "title": "Appropriate Byte Counting",
                    "description": "When enabled, increases the congestion window by basing the increase amount on the number of previously unacknowledged bytes that each ACK covers. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "enhancedLossRecovery": {
                    "title": "Enhanced Loss Recovery",
                    "description": "When enabled, specifies that the system uses enhanced loss recovery to recover from random packet losses more effectively. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "explicitCongestionNotification": {
                    "title": "Explicit Congestion Notification",
                    "description": "When enabled, the system uses the explicit congestion notification (ECN) TCP flags CWR (congestion window reduced) and ECE (ECN-echo) to notify its peer of congestion and congestion counter-measures. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "fastOpen": {
                    "title": "Fast Open",
                    "description": "When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. This option has no effect on server-side TCP profiles. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "idleTimeout": {
                    "$ref": "#/definitions/Property_Idle_Timeout"
                },
                "indirectSource": {
                    "title": "Indirect source IP",
                    "description": "Specify the Indirect Source IP for return packets. This is used if the destination of the outgoing packet is different from the source of the incoming packet.",
                    "type": "string",
                    "$ref": "#/definitions/IP_Address"
                },
                "ipTosToClient": {
                    "title": "IP TOS to Server",
                    "description": "Specify the Type of Service (TOS) handling for traffic flowing towards the server (default 0)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535,
                    "default": 0
                },
                "minimumRto": {
                    "title": "Minimum RTO",
                    "description": "Specifies the minimum TCP retransmission timeout in milliseconds. The default value is 1000 milliseconds.",
                    "type": "integer",
                    "minimum": 10,
                    "maximum": 5000,
                    "default": 1000
                },
                "nagle": {
                    "title": "Nagle's algorithm",
                    "description": "Value 'enable' means to use Nagle's algorithm to minimize the transmission of short TCP segments (note:  Nagle's algorithm yields undesirable results with many application protocols).  Value 'auto' (default) means the ADC will choose automatically whether to enable Nagle's algorithm.  Value 'disable' averts application of Nagle's algorithm",
                    "type": "string",
                    "default": "auto",
                    "enum": [
                        "disable",
                        "enable",
                        "auto"
                    ]
                },
                "pktLossIgnoreBurst": {
                    "title": "Packet Loss Ignore Burst",
                    "description": "Specifies the probability of performing congestion control when multiple packets in a row are lost even if the packetLossIgnoreRate was not exceeded. Valid values are 0 to 32. The default is 0, meaning that the system should perform congestion control if any packets are lost. Higher values decrease the chance of performing congestion control.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 32,
                    "default": 0
                },
                "pktLossIgnoreRate": {
                    "title": "Packet Loss Ignore Rate",
                    "description": "Specifies the threshold of packets lost per million at which the system should perform congestion control. Valid values for n are 0 to 1,000,000. The default is 0, meaning the system should perform congestion control if any packet loss occurs. If you set the ignore rate to 10 and packet loss for a TCP connection is greater than 10 per million, congestion control occurs.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1000000,
                    "default": 0
                },
                "proxyBufferHigh": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_High",
                    "default": 131072
                },
                "proxyBufferLow": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_Low",
                    "default": 98304
                },
                "proxyOptions": {
                    "title": "Proxy Options",
                    "description": "Specifies, when enabled, that the system advertises an option, such as a time-stamp to the server only if it was negotiated with the client. The default value is false.",
                    "type": "boolean",
                    "default": false
                },
                "resetOnTimeout": {
                    "$ref": "#/definitions/Property_Reset_On_Timeout",
                    "default": true
                },
                "sendBufferSize": {
                    "$ref": "#/definitions/Property_Send_Buffer_Size",
                    "default": 131072
                },
                "template": {
                    "$ref": "#/definitions/Property_Template",
                    "default": "advanced"
                },
                "verifiedAccept": {
                    "title": "Verified Accept",
                    "description": "When enabled, the system verifies that the pool member is available to accept the connection by sending the server a SYN before responding to the client's SYN with a SYN-ACK.",
                    "type": "boolean",
                    "default": false
                },
                "zeroWindowTimeout": {
                    "title": "Zero Window Timeout",
                    "description": "Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window. The timeout starts when the peer advertises a zero length TCP window or when enough data has been sent to fill the previously advertised window. The timer is canceled when a non-zero length window is received. The default is 20000 milliseconds.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295,
                    "default": 20000
                }
            },
            "additionalProperties": false,
            "required": [
                "class"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "template": {
                                "const": "advanced"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TCP_Profile_Advanced"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "template": {
                                "const": "lan"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TCP_Profile_Lan"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "template": {
                                "const": "mobile"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TCP_Profile_Mobile"
                    }
                },
                {
                    "if": {
                        "properties": {
                            "template": {
                                "const": "wan"
                            }
                        }
                    },
                    "then": {
                        "$ref": "#/definitions/TCP_Profile_Wan"
                    }
                }
            ]
        },
        "TCP_Profile_Advanced": {
            "title": "TCP Profile Advanced",
            "description": "TCP Profile for Advanced template",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TCP_Profile"
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/TCP_Profile_Advanced_Properties"
                }
            ]
        },
        "TCP_Profile_Advanced_Monitor_Properties": {
            "title": "TCP Profile Advanced For Monitors",
            "description": "TCP Profile properties for Advanced Monitors",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/TCP_Profile_Advanced_Properties"
                }
            ]
        },
        "TCP_Profile_Advanced_Properties": {
            "title": "TCP Profile Advanced Properties",
            "description": "TCP Profile properties for Advanced template",
            "type": "object",
            "properties": {
                "ackOnPush": {
                    "title": "Acknowledge On Push",
                    "description": "When enabled, significantly improves performance to Microsoft Windows and macOS peers who are writing out on a very small send buffer. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "appropriateByteCounting": {
                    "title": "Appropriate Byte Counting",
                    "description": "When enabled, increases the congestion window by basing the increase amount on the number of previously unacknowledged bytes that each ACK covers. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "enhancedLossRecovery": {
                    "title": "Enhanced Loss Recovery",
                    "description": "When enabled, specifies that the system uses enhanced loss recovery to recover from random packet losses more effectively. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "explicitCongestionNotification": {
                    "title": "Explicit Congestion Notification",
                    "description": "When enabled, the system uses the explicit congestion notification (ECN) TCP flags CWR (congestion window reduced) and ECE (ECN-echo) to notify its peer of congestion and congestion counter-measures. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "fastOpen": {
                    "title": "Fast Open",
                    "description": "When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. This option has no effect on server-side TCP profiles. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "idleTimeout": {
                    "$ref": "#/definitions/Property_Idle_Timeout"
                },
                "indirectSource": {
                    "title": "Indirect source IP",
                    "description": "Specify the Indirect Source IP for return packets. This is used if the destination of the outgoing packet is different from the source of the incoming packet.",
                    "type": "string",
                    "$ref": "#/definitions/IP_Address"
                },
                "ipTosToClient": {
                    "title": "IP TOS to Server",
                    "description": "Specify the Type of Service (TOS) handling for traffic flowing towards the server (default 0)",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535,
                    "default": 0
                },
                "minimumRto": {
                    "title": "Minimum RTO",
                    "description": "Specifies the minimum TCP retransmission timeout in milliseconds. The default value is 1000 milliseconds.",
                    "type": "integer",
                    "default": 1000
                },
                "nagle": {
                    "title": "Auto Nagle",
                    "description": "Enables or disables the auto setting for Nagle's algorithm. The default is auto.",
                    "type": "string",
                    "default": "auto",
                    "enum": [
                        "disable",
                        "enable",
                        "auto"
                    ]
                },
                "pktLossIgnoreBurst": {
                    "title": "Packet Loss Ignore Burst",
                    "description": "Specifies the probability of performing congestion control when multiple packets in a row are lost even if the packetLossIgnoreRate was not exceeded. Valid values are 0 to 32. The default is 0, meaning that the system should perform congestion control if any packets are lost. Higher values decrease the chance of performing congestion control.",
                    "type": "integer",
                    "default": 0
                },
                "pktLossIgnoreRate": {
                    "title": "Packet Loss Ignore Rate",
                    "description": "Specifies the threshold of packets lost per million at which the system should perform congestion control. Valid values for n are 0 to 1,000,000. The default is 0, meaning the system should perform congestion control if any packet loss occurs. If you set the ignore rate to 10 and packet loss for a TCP connection is greater than 10 per million, congestion control occurs.",
                    "type": "integer",
                    "default": 0
                },
                "proxyBufferHigh": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_High",
                    "default": 131072
                },
                "proxyBufferLow": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_Low",
                    "default": 98304
                },
                "proxyOptions": {
                    "title": "Proxy Options",
                    "description": "Specifies, when enabled, that the system advertises an option, such as a time-stamp to the server only if it was negotiated with the client. The default value is false.",
                    "type": "boolean",
                    "default": false
                },
                "resetOnTimeout": {
                    "$ref": "#/definitions/Property_Reset_On_Timeout",
                    "default": true
                },
                "sendBufferSize": {
                    "$ref": "#/definitions/Property_Send_Buffer_Size",
                    "default": 131072
                },
                "template": {
                    "$ref": "#/definitions/Property_Template"
                },
                "verifiedAccept": {
                    "title": "Verified Accept",
                    "description": "When enabled, the system verifies that the pool member is available to accept the connection by sending the server a SYN before responding to the client's SYN with a SYN-ACK.",
                    "type": "boolean",
                    "default": false
                },
                "zeroWindowTimeout": {
                    "title": "Zero Window Timeout",
                    "description": "Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window. The timeout starts when the peer advertises a zero length TCP window or when enough data has been sent to fill the previously advertised window. The timer is canceled when a non-zero length window is received. The default is 20000 milliseconds.",
                    "type": "integer",
                    "default": 20000
                }
            }
        },
        "TCP_Profile_Lan": {
            "title": "TCP Profile LAN",
            "description": "TCP Profile for LAN template",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TCP_Profile"
                },
                "fastOpen": {
                    "title": "Fast Open",
                    "description": "When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. This option has no effect on server-side TCP profiles. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "idleTimeout": {
                    "$ref": "#/definitions/Property_Idle_Timeout"
                },
                "proxyBufferHigh": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_High",
                    "default": 65535
                },
                "proxyBufferLow": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_Low",
                    "default": 32768
                },
                "sendBufferSize": {
                    "$ref": "#/definitions/Property_Send_Buffer_Size",
                    "default": 65535
                },
                "template": {
                    "$ref": "#/definitions/Property_Template"
                },
                "verifiedAccept": {
                    "title": "Verified Accept",
                    "description": "When enabled, the system verifies that the pool member is available to accept the connection by sending the server a SYN before responding to the client's SYN with a SYN-ACK.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "TCP_Profile_Mobile": {
            "title": "TCP Profile Mobile",
            "description": "TCP Profile for Mobile template",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TCP_Profile"
                },
                "idleTimeout": {
                    "$ref": "#/definitions/Property_Idle_Timeout"
                },
                "proxyBufferHigh": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_High",
                    "default": 262144
                },
                "proxyBufferLow": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_Low",
                    "default": 196608
                },
                "sendBufferSize": {
                    "$ref": "#/definitions/Property_Send_Buffer_Size",
                    "default": 262144
                },
                "template": {
                    "$ref": "#/definitions/Property_Template"
                }
            }
        },
        "TCP_Profile_Wan": {
            "title": "TCP Profile WAN",
            "description": "TCP Profile for WAN template",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TCP_Profile"
                },
                "fastOpen": {
                    "title": "Fast Open",
                    "description": "When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. This option has no effect on server-side TCP profiles. The default value is true.",
                    "type": "boolean",
                    "default": true
                },
                "idleTimeout": {
                    "$ref": "#/definitions/Property_Idle_Timeout"
                },
                "proxyBufferHigh": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_High",
                    "default": 262144
                },
                "proxyBufferLow": {
                    "$ref": "#/definitions/Property_Proxy_Buffer_Low",
                    "default": 196608
                },
                "sendBufferSize": {
                    "$ref": "#/definitions/Property_Send_Buffer_Size",
                    "default": 262144
                },
                "template": {
                    "$ref": "#/definitions/Property_Template"
                },
                "verifiedAccept": {
                    "title": "Verified Accept",
                    "description": "When enabled, the system verifies that the pool member is available to accept the connection by sending the server a SYN before responding to the client's SYN with a SYN-ACK.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "Tenant": {
            "title": "Tenant",
            "description": "Declares a Tenant",
            "type": "object",
            "propertyNames": {
                "$ref": "#/definitions/Property_Names"
            },
            "properties": {
                "class": {
                    "type": "string",
                    "const": "Tenant"
                },
                "controls": {
                    "$ref": "#/definitions/Controls"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "constants": {
                    "$ref": "#/definitions/Constants"
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": {
                "$ref": "#/definitions/Application"
            }
        },
        "TLS_Client": {
            "title": "TLS Client Profile",
            "description": "TLS Client Profile",
            "type": "object",
            "properties": {
                "alertTimeout": {
                    "title": "Alert timeout",
                    "description": "Specifies the duration in time for the system to try to close an SSL connection before resetting the connection in seconds.",
                    "type": [
                        "integer",
                        "string"
                    ],
                    "oneOf": [
                        {
                            "type": "integer",
                            "maximum": 4294967295,
                            "minimum": -1
                        },
                        {
                            "type": "string",
                            "enum": [
                                "indefinite",
                                "immediate"
                            ]
                        }
                    ]
                },
                "allowExpiredCRL": {
                    "title": "Allow expired crl",
                    "description": "Specifies if the CRL can be used even if it has expired",
                    "type": "boolean"
                },
                "authenticationDepth": {
                    "type": "integer",
                    "title": "Server Certificate Chain Verification Depth",
                    "description": "Server certificate verification depth. The default value is 9, meaning maximum client certificate chain traversal depth for verification is set to 9",
                    "minimum": 0,
                    "maximum": 15
                },
                "authenticationFrequency": {
                    "title": "Authentication frequency",
                    "description": "Client certificate authentication frequency",
                    "type": "string",
                    "enum": [
                        "one-time",
                        "every-time"
                    ]
                },
                "cacheSize": {
                    "title": "Cache size",
                    "description": "Specifies the number of sessions in the SSL session cache in sessions.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4194304
                },
                "certificates": {
                    "title": "Certificates",
                    "description": "Primary and (optional) additional certificates (order is significant, element 0 is the primary certificate)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TLS_Client_Certificates"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "ciphers": {
                    "$ref": "#/definitions/Ciphers",
                    "default": "DEFAULT"
                },
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TLS_Client"
                },
                "crlFile": {
                    "title": "Crl file name",
                    "description": "Specifies the name of a file containing a list of revoked client certificates",
                    "$ref": "#/definitions/Pointer_BIGIP"
                },
                "enableAuthentication": {
                    "title": "Enable Server Certificate Verification",
                    "description": "Specifies the flag to enables/disable server certificate verification.",
                    "type": "boolean"
                },
                "expiredCAAction": {
                    "title": "Expired Certificate Action",
                    "description": "Specifies the action ('drop' or 'ignore') to take when the server's certificate is expired. If the server's certificate is expired - A 'drop' action will drop the connection. An 'ignore' action will ignore the validation error and proceed to establish the connection. The default action is 'drop'.",
                    "type": "string",
                    "enum": [
                        "drop",
                        "ignore"
                    ]
                },
                "handshakeTimeout": {
                    "title": "Handshake timeout",
                    "description": "Specifies the duration in time that the system tries to establish an SSL connection before halting the operation in seconds.",
                    "type": "integer",
                    "maximum": 4294967295,
                    "minimum": 1
                },
                "namedGroups": {
                    "title": "Named Diffie Hellman groups",
                    "description": "Specifies the Diffie Hellman groups used to negotiate SSL/TLS connections.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64000
                },
                "renegotiationEnabled": {
                    "title": "Renegotiation",
                    "description": "Controls on a per-connection basis how the system responds to mid-stream SSL reconnection requests.",
                    "type": "boolean"
                },
                "renegotiatePeriod": {
                    "title": "Renegotiate period",
                    "description": "Specifies whether the system renegotiates the SSL session after a specified amount of time in seconds has passed. A value of 0 (zero) specifies that system does not renegotiate based on time interval.",
                    "type": [
                        "integer",
                        "string"
                    ],
                    "oneOf": [
                        {
                            "type": "integer",
                            "maximum": 4294967295,
                            "minimum": 0
                        },
                        {
                            "type": "string",
                            "enum": [
                                "indefinite"
                            ]
                        }
                    ]
                },
                "renegotiateSize": {
                    "title": "Renegotiate size",
                    "description": "Specifies whether the system renegotiates the SSL session after a specified amount of data in megabytes has been exchanged. A value of 0 (zero) specifies that system does not renegotiate based on amount of data exchanged.",
                    "type": [
                        "integer",
                        "string"
                    ],
                    "oneOf": [
                        {
                            "type": "integer",
                            "maximum": 4294967295,
                            "minimum": 0
                        },
                        {
                            "type": "string",
                            "enum": [
                                "indefinite"
                            ]
                        }
                    ]
                },
                "revokedCAAction": {
                    "title": "Revoked Certificate Action",
                    "description": "Specifies the action ('drop' or 'ignore') to take when the server's certificate is revoked. If the server's certificate is revoked - A 'drop' action will drop the connection. An 'ignore' action will ignore the validation error and proceed to establish the connection. The default action is 'drop'.",
                    "type": "string",
                    "enum": [
                        "drop",
                        "ignore"
                    ]
                },
                "secureRenegotiation": {
                    "title": "Renegotiation mode",
                    "description": "Specifies the secure renegotiation mode. The default is require-strict.",
                    "type": "string",
                    "enum": [
                        "request",
                        "require",
                        "require-strict"
                    ]
                },
                "serverName": {
                    "title": "Server Name",
                    "description": "FQDN which server certificate must match (optional)",
                    "type": "string",
                    "maxLength": 64000
                },
                "signatureAlgorithms": {
                    "title": "Signature Algorithms",
                    "description": "Specifies the signature algorithms used to negotiate SSL/TLS connections.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "tls1_1Enabled": {
                    "title": "TLS 1.1",
                    "description": "Allow TLS 1.1 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "tls1_2Enabled": {
                    "title": "TLS 1.2",
                    "description": "Allow TLS 1.2 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "tls1_3Enabled": {
                    "title": "TLS 1.3",
                    "description": "Allow TLS 1.3 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "trustCA": {
                    "title": "Trust CA",
                    "description": "CA’s trusted to validate server certificate.",
                    "type": "object",
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Pointer_CM"
                        },
                        {
                            "$ref": "#/definitions/Pointer_BIGIP_Or_Use"
                        },
                        {
                            "$ref": "#/definitions/Pointer_CA_Bundle"
                        }
                    ]
                },
                "untrustedCAAction": {
                    "title": "Untrusted CA Action",
                    "description": "Specifies the action ('drop' or 'ignore') to take when the server certificate has an untrusted CA. If there is a server certificate validation error - A 'drop' action will drop the connection. An 'ignore' action will ignore the validation error and proceed to establish the connection. The default action is 'drop'.",
                    "type": "string",
                    "enum": [
                        "drop",
                        "ignore"
                    ]
                }
            },
            "required": [
                "class"
            ],
            "dependencies": {
                "enableAuthentication": [
                    "trustCA"
                ],
                "authenticationFrequency": [
                    "trustCA"
                ],
                "authenticationDepth": [
                    "trustCA"
                ],
                "crlFile": [
                    "trustCA"
                ],
                "crlFileAllowExpired": [
                    "trustCA"
                ]
            },
            "additionalProperties": false
        },
        "TLS_Client_Certificates": {
            "title": "TLS_Client certificates",
            "description": "TLS_Client certificates",
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "string"
                }
            }
        },
        "TLS_Forward_Proxy_Client": {
            "title": "TLS Forward Proxy Client Profile",
            "description": "TLS Forward Proxy Client Profile",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TLS_Forward_Proxy_Client"
                },
                "ciphers": {
                    "$ref": "#/definitions/Ciphers",
                    "default": "DEFAULT"
                },
                "enableAuthentication": {
                    "title": "Enable Server Certificate Verification",
                    "description": "Specifies the flag to enables/disable server certificate verification.",
                    "type": "boolean"
                },
                "tls1_1Enabled": {
                    "title": "TLS 1.1",
                    "description": "Allow TLS 1.1 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "tls1_2Enabled": {
                    "title": "TLS 1.2",
                    "description": "Allow TLS 1.2 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "tls1_3Enabled": {
                    "title": "TLS 1.3",
                    "description": "Allow TLS 1.3 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "signatureAlgorithms": {
                    "title": "Signature Algorithms",
                    "description": "Specifies the signature algorithms used to negotiate SSL/TLS connections.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "namedGroups": {
                    "title": "Named Diffie Hellman groups",
                    "description": "Specifies the Diffie Hellman groups used to negotiate SSL/TLS connections.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "trustCA": {
                    "title": "Trust CA",
                    "description": "CA's trusted to validate server certificate.",
                    "type": "object",
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Pointer_BIGIP_Or_Use"
                        },
                        {
                            "$ref": "#/definitions/Pointer_CA_Bundle"
                        }
                    ]
                },
                "expiredCAAction": {
                    "title": "Expired Certificate Action",
                    "description": "Specifies the action ('drop', 'ignore' or 'mask') to take when the server's certificate is expired. If the server's certificate is expired: A 'drop' action will drop the connection. An 'ignore' action will present a certificate with the same expired attributes (notBefore and notAfter) as the server certificate. A 'mask' action will mask the expired certificate by presenting a certificate with a notAfter attribute equal to the current time plus the configured certificate lifespan. The default action is 'drop'.",
                    "type": "string",
                    "default": "drop",
                    "enum": [
                        "drop",
                        "ignore",
                        "mask"
                    ]
                },
                "untrustedCAAction": {
                    "title": "Untrusted CA Action",
                    "description": "Specifies the action ('drop', 'ignore' or 'mask') to take when the server certificate has an untrusted CA. If there is a server certificate validation error - A 'drop' action will drop the connection. An 'ignore' action will replace the original 'CN' with 'Unknown CA'. A 'mask' action mask the error by presenting a certificate with a new issuer name equivalent to the subject name of the selected signing CA. The default action is 'drop'.",
                    "type": "string",
                    "default": "drop",
                    "enum": [
                        "drop",
                        "ignore",
                        "mask"
                    ]
                },
                "bypassOnHandshakeFailure": {
                    "title": "Forward proxy bypass on handshake failure",
                    "description": "Enables or disables SSL forward proxy bypass on receiving handshake_failure, protocol_version or unsupported_extension alert messages during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocol_version or unsupported_extension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled.",
                    "type": "boolean",
                    "default": false
                },
                "bypassOnClientCertificateFailure": {
                    "title": "Forward proxy bypass on client certificate failure",
                    "description": "Enables or disables SSL forward proxy bypass on failing to present client certificate to the server. When enabled and the SSL handshake cannot be completed because of failure to get the client certificate, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled.",
                    "type": "boolean",
                    "default": false
                }
            },
            "required": [
                "class"
            ],
            "additionalProperties": false
        },
        "TLS_Forward_Proxy_Server": {
            "title": "TLS Forward Proxy Server Profile",
            "description": "TLS Forward Proxy Server  Profile",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TLS_Forward_Proxy_Server"
                },
                "certificates": {
                    "title": "Certificates",
                    "description": "Primary and (optional) additional certificates (order is significant, element 0 is the primary certificate)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TLS_Server_Forward_Proxy_Certificates"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "signingCertificates": {
                    "title": "Signing Certificates",
                    "description": "Specifies the signing CA certificate and key pairs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TLS_Server_Forward_Proxy_Certificates"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "ciphers": {
                    "default": "DEFAULT",
                    "$ref": "#/definitions/Ciphers"
                },
                "defaultAction": {
                    "title": "SSL Forward Proxy Default Action",
                    "type": "string",
                    "description": "The default action to take when having SSL Forward Proxy.",
                    "maxLength": 32,
                    "default": "intercept",
                    "enum": [
                        "intercept",
                        "bypass"
                    ]
                },
                "certificateLifespan": {
                    "title": "Certificate Lifespan",
                    "type": "integer",
                    "description": "Specify the Certificate Lifespan in days.",
                    "minimum": 1,
                    "maximum": 365
                },
                "certificateExtensions": {
                    "title": "Certificate Extensions",
                    "type": "array",
                    "description": "List of extensions of the web server certificate to be included in the generated certificate using SSL Forward Proxy.",
                    "default": [
                        "BasicConstraints",
                        "SubjectAltName",
                        "ExtendedKeyUsage"
                    ],
                    "minItems": 1,
                    "items": {
                        "title": "Certificate Extension",
                        "type": "string",
                        "maxLength": 64,
                        "enum": [
                            "BasicConstraints",
                            "ExtendedKeyUsage",
                            "KeyUsage",
                            "SubjectAltName",
                            "SubjectDirectoryAttributes",
                            "TlsFeature"
                        ]
                    }
                },
                "signatureAlgorithms": {
                    "title": "Signature Algorithms",
                    "description": "Specifies the signature algorithms used to negotiate SSL/TLS connections.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "namedGroups": {
                    "title": "Named Diffie Hellman groups",
                    "description": "Specifies the Diffie Hellman groups used to negotiate SSL/TLS connections.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "tls1_1Enabled": {
                    "title": "TLS 1.1",
                    "description": "Allow TLS 1.1 Ciphers.",
                    "type": "boolean",
                    "default": false
                },
                "tls1_2Enabled": {
                    "title": "TLS 1.2",
                    "description": "Allow TLS 1.2 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "tls1_3Enabled": {
                    "title": "TLS 1.3",
                    "description": "Allow TLS 1.3 Ciphers.",
                    "type": "boolean",
                    "default": true
                }
            },
            "required": [
                "class",
                "signingCertificates"
            ],
            "additionalProperties": false
        },
        "TLS_Server": {
            "title": "TLS Server Profile",
            "description": "TLS Server Profile",
            "type": "object",
            "properties": {
                "authenticationFrequency": {
                    "title": "Authentication frequency",
                    "description": "Client certificate authentication frequency",
                    "type": "string",
                    "enum": [
                        "one-time",
                        "every-time"
                    ]
                },
                "authenticationDepth": {
                    "type": "integer",
                    "title": "Server Certificate Chain Verification Depth",
                    "description": "Server certificate verification depth. The default value is 9, meaning maximum client certificate chain traversal depth for verification is set to 9",
                    "minimum": 0,
                    "maximum": 15
                },
                "authenticationTrustCA": {
                    "title": "Authentication trust CA",
                    "description": "Pointer to CA Bundle used to validate client certificates",
                    "type": "object",
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Pointer_CM"
                        },
                        {
                            "$ref": "#/definitions/Pointer_CA_Bundle"
                        }
                    ]
                },
                "authenticationMode": {
                    "title": "Authentication Mode",
                    "description": "Client certificate authentication mode",
                    "type": "string",
                    "enum": [
                        "ignore",
                        "request",
                        "require"
                    ],
                    "default": "ignore"
                },
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "TLS_Server"
                },
                "certificates": {
                    "title": "Certificates",
                    "description": "Primary and (optional) additional certificates (order is significant, element 0 is the primary certificate)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TLS_Server_Certificates"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "ciphers": {
                    "default": "DEFAULT",
                    "$ref": "#/definitions/Ciphers"
                },
                "enableAuthentication": {
                    "title": "Enable Client Authentication on the client side",
                    "description": "Specifies the flag to enables/disable client authentication on the client side.",
                    "type": "boolean"
                },
                "tls1_1Enabled": {
                    "title": "TLS 1.1",
                    "description": "Allow TLS 1.1 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "tls1_2Enabled": {
                    "title": "TLS 1.2",
                    "description": "Allow TLS 1.2 Ciphers.",
                    "type": "boolean",
                    "default": true
                },
                "tls1_3Enabled": {
                    "title": "TLS 1.3",
                    "description": "Allow TLS 1.3 Ciphers.",
                    "type": "boolean",
                    "default": true
                }
            },
            "required": [
                "class",
                "certificates"
            ],
            "additionalProperties": false,
            "dependencies": {
                "enableAuthentication": [
                    "authenticationTrustCA"
                ],
                "authenticationFrequency": [
                    "authenticationTrustCA"
                ],
                "authenticationDepth": [
                    "authenticationTrustCA"
                ]
            },
            "dependentSchemas": {
                "authenticationTrustCA": {
                    "properties": {
                        "certificates": {
                            "items": {
                                "$ref": "#/definitions/TLS_Server_Client_Auth_Certificates"
                            }
                        }
                    }
                }
            }
        },
        "TLS_Server_Certificates": {
            "title": "TLS_Server certificates",
            "description": "TLS_Server certificates",
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "string",
                    "minLength": 1
                },
                "sniDefault": {
                    "type": "boolean",
                    "default": false
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    },
                    "minItems": 1
                },
                "ciphers": {
                    "$ref": "#/definitions/Ciphers"
                },
                "sniDomains": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    },
                    "minItems": 0
                },
                "tls1_1Enabled": {
                    "title": "TLS 1.1",
                    "description": "Allow TLS 1.1 Ciphers.",
                    "type": "boolean"
                },
                "tls1_2Enabled": {
                    "title": "TLS 1.2",
                    "description": "Allow TLS 1.2 Ciphers.",
                    "type": "boolean"
                },
                "tls1_3Enabled": {
                    "title": "TLS 1.3",
                    "description": "Allow TLS 1.3 Ciphers.",
                    "type": "boolean"
                },
                "signatureAlgorithms": {
                    "title": "Signature Algorithms",
                    "description": "Specifies the signature algorithms used to negotiate SSL/TLS connections.",
                    "type": "string",
                    "maxLength": 64000,
                    "default": ""
                },
                "namedGroups": {
                    "title": "Named Diffie Hellman groups",
                    "description": "Specifies the Diffie Hellman groups used to negotiate SSL/TLS connections.",
                    "type": "string",
                    "maxLength": 64000,
                    "default": ""
                },
                "enableAuthentication": {
                    "title": "Enable Authentication",
                    "description": "Needed to enable/disable client authentication.",
                    "type": "boolean"
                },
                "authenticationFrequency": {
                    "title": "Frequency of authenticating the client",
                    "description": "Client certificate authentication frequency",
                    "type": "string",
                    "enum": [
                        "one-time",
                        "every-time"
                    ]
                },
                "authenticationDepth": {
                    "title": "Certificate Chain Verification Depth",
                    "description": "Certificate verification depth. The default value is 9, meaning maximum client certificate chain traversal depth for verification is set to 9",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 15
                },
                "authenticationTrustCA": {
                    "title": "Authentication trust CA",
                    "description": "Pointer to CA Bundle used to validate client certificates",
                    "type": "object",
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Pointer_CA_Bundle"
                        }
                    ]
                },
                "authenticationMode": {
                    "title": "Authentication Mode",
                    "description": "Client certificate authentication mode",
                    "type": "string",
                    "enum": [
                        "ignore",
                        "request",
                        "require"
                    ]
                },
                "handshakeTimeout": {
                    "title": "Handshake timeout",
                    "description": "Specifies the duration in time that the system tries to establish an SSL connection before halting the operation in seconds.",
                    "type": "integer",
                    "maximum": 4294967295,
                    "minimum": 1
                },
                "alertTimeout": {
                    "title": "Alert timeout",
                    "description": "Specifies the duration in time for the system to try to close an SSL connection before resetting the connection in seconds.",
                    "type": [
                        "integer",
                        "string"
                    ],
                    "oneOf": [
                        {
                            "type": "integer",
                            "maximum": 4294967295,
                            "minimum": -1
                        },
                        {
                            "type": "string",
                            "enum": [
                                "indefinite",
                                "immediate"
                            ]
                        }
                    ]
                },
                "renegotiationEnabled": {
                    "title": "Enable renegotiation",
                    "description": "Enables or disables connection renegotiation. The default is disabled, meaning renegotiating connections is not allowed.",
                    "type": "boolean"
                },
                "renegotiatePeriod": {
                    "title": "Renegotiate period",
                    "description": "Specifies whether the system renegotiates the SSL session after a specified amount of time in seconds has passed. A value of 0 (zero) specifies that system does not renegotiate based on time interval.",
                    "type": "integer",
                    "maximum": 4294967295,
                    "minimum": 0
                },
                "renegotiateSize": {
                    "title": "Renegotiate size",
                    "description": "Specifies whether the system renegotiates the SSL session after a specified amount of data in megabytes has been exchanged. A value of 0 (zero) specifies that system does not renegotiate based on amount of data exchanged.",
                    "type": "integer",
                    "maximum": 4294967295,
                    "minimum": 0
                },
                "renegotiateMaxRecordDelay": {
                    "title": "Renegotiate max record delay",
                    "description": "Specifies the number of delayed records the system allows during SSL renegotiation. A value of 0 (zero) specifies an unlimited number of delayed records. A value greater than 15 will be treated as unlimited.",
                    "type": "integer",
                    "maximum": 4294967295,
                    "minimum": 0
                },
                "secureRenegotiation": {
                    "title": "Renegotiation mode",
                    "description": "Specifies the secure renegotiation mode. The default is require.",
                    "type": "string",
                    "enum": [
                        "request",
                        "require",
                        "require-strict"
                    ]
                },
                "cacheSize": {
                    "title": "Cache size",
                    "description": "Specifies the number of sessions in the SSL session cache in sessions.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4194304
                },
                "crlFile": {
                    "title": "CRL File",
                    "description": "Specifies the name of a file containing a list of revoked client certificates.",
                    "type": "string"
                },
                "allowExpiredCRL": {
                    "title": "Allow Expired CRL",
                    "description": "Determines whether to allow use of expired CRLs for client certificate verification.",
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "TLS_Server_Client_Auth_Certificates": {
            "title": "TLS_Server client auth certificates",
            "description": "TLS_Server client auth certificates",
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "string",
                    "minLength": 1
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    },
                    "minItems": 1
                },
                "ciphers": {
                    "$ref": "#/definitions/Ciphers"
                }
            },
            "additionalProperties": false
        },
        "TLS_Server_Forward_Proxy_Certificates": {
            "title": "TLS_Server Forward Proxy certificates",
            "description": "TLS_Server Forward Proxy certificates",
            "type": "object",
            "properties": {
                "certificate": {
                    "type": "string",
                    "minLength": 1
                }
            },
            "additionalProperties": false
        },
        "TranslateClientPort": {
            "title": "Translate client port",
            "description": "A value of true (boolean) or 'change' allows the system to handle the source port translation of the connection. A value of false (boolean) or 'preserve' allows the system to change the port if it's in use, while the 'preserve-strict' option does not",
            "type": [
                "boolean",
                "string"
            ],
            "oneOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "string",
                    "enum": [
                        "change",
                        "preserve",
                        "preserve-strict"
                    ]
                }
            ],
            "errorMessage": "must be a boolean or a string with value of 'change', 'preserve', or 'preserve-strict'"
        },
        "TranslateServerAddress": {
            "title": "Translate server address",
            "description": "If true (default), make server-side connection to server address (otherwise, treat server as gateway to virtual-server address)",
            "type": "boolean"
        },
        "UDP_Profile": {
            "title": "UDP Profile",
            "description": "Configures a User Datagram Protocol (UDP) profile",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "UDP_Profile"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "datagramLoadBalancing": {
                    "title": "Datagram load-balancing",
                    "description": "When true, process UDP datagrams independently, without recognizing flows (default false)",
                    "type": "boolean",
                    "default": false
                },
                "idleTimeout": {
                    "title": "Idle timeout",
                    "description": "Number of seconds (default 60) flow may remain idle before it becomes eligible for deletion. Value 0 allows system to recover per-flow resources whenever convenient (always safe with UDP).",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 86400,
                    "default": 60
                }
            },
            "additionalProperties": false,
            "required": [
                "class"
            ]
        },
        "UDP_Profile_Advanced_Monitor_Properties": {
            "title": "UDP Profile Advanced For Monitors",
            "description": "UDP Profile properties for Advanced Monitors",
            "type": "object",
            "properties": {
                "datagramLoadBalancing": {
                    "title": "Datagram load-balancing",
                    "description": "When true, process UDP datagrams independently, without recognizing flows (default false)",
                    "type": "boolean",
                    "default": false
                },
                "idleTimeout": {
                    "title": "Idle timeout",
                    "description": "Number of seconds (default 60) flow may remain idle before it becomes eligible for deletion. Value 0 allows system to recover per-flow resources whenever convenient (always safe with UDP).",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 86400,
                    "default": 300
                },
                "ipTosToClient": {
                    "title": "IP TOS",
                    "description": "Specify the Type of Service (TOS) handling for traffic",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535,
                    "default": 0
                },
                "indirectSource": {
                    "title": "Indirect source IP",
                    "description": "Specify the Indirect Source IP for return packets. This is used if the destination of the outgoing packet is different from the source of the incoming packet.",
                    "type": "string",
                    "$ref": "#/definitions/IP_Address"
                },
                "template": {
                    "title": "Template",
                    "description": "Template type for udp. Use advanced template to configure advanced UDP Profile properties",
                    "type": "string",
                    "enum": [
                        "advanced"
                    ],
                    "default": "advanced"
                }
            }
        },
        "Virtual_Addresses": {
            "title": "Virtual Addresses",
            "description": "Virtual addresses array",
            "type": "array",
            "items": {
                "type": "string",
                "$ref": "#/definitions/IP_Address_Range"
            }
        },
        "Virtual_Port": {
            "title": "Virtual Port",
            "description": "Virtual port",
            "oneOf": [
                {
                    "type": "integer"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        },
        "WAF_Policy": {
            "title": "WAF Policy",
            "description": "Configures a WAF policy",
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "const": "WAF_Policy"
                },
                "label": {
                    "$ref": "#/definitions/Label"
                },
                "remark": {
                    "$ref": "#/definitions/Remark"
                },
                "file": {
                    "type": "string"
                },
                "ignoreChanges": {
                    "title": "Ignore changes",
                    "description": "If false (default), the system updates the policy in every BIG-IP AS3 declaration deployment. If true, BIG-IP AS3 creates the policy on first deployment, and leaves it untouched afterwards",
                    "type": "boolean"
                },
                "enforcementMode": {
                    "title": "Enforcement Mode",
                    "description": "Overrides the enforcement mode setting of the WAF policy",
                    "type": "string",
                    "enum": [
                        "blocking",
                        "transparent"
                    ]
                },
                "policy": {
                    "$ref": "#/definitions/F5_String"
                }
            },
            "required": [
                "class",
                "policy"
            ],
            "additionalProperties": false
        }
    }
}
