{
    "components": {
        "examples": {
            "AnalysisResponse": {
                "value": {
                    "staticAnalysis": {
                        "errorCount": 0,
                        "issues": [
                            {
                                "description": "Checks directive context",
                                "links": [
                                    "https://nginx.org/en/docs/ngx_core_module.html#directive",
                                    "https://docs.nginx.com/"
                                ],
                                "location": {
                                    "directive": "directive",
                                    "file": "nginx.conf",
                                    "line": 1
                                },
                                "message": "directive is not allowed in the context",
                                "severity": "error"
                            }
                        ]
                    }
                }
            },
            "AttackSignatureDeploymentAssocResponse": {
                "value": {
                    "associations": [
                        {
                            "attackSignatureVersionDateTime": "2022.09.01",
                            "instance": {
                                "hostname": "",
                                "systemUid": "",
                                "uid": ""
                            },
                            "instanceGroup": {
                                "displayName": "inst_group_1",
                                "instances": [
                                    {
                                        "hostName": "hostname1",
                                        "systemUid": "49d143c2-f556-4cd7-8658-76fff54fb861",
                                        "uid": "c8e15dcf-c504-4b7f-b52d-def7b8fd2f64"
                                    },
                                    {
                                        "hostName": "hostname2",
                                        "systemUid": "88a99ab0-15bb-4719-9107-daf5007c33f7",
                                        "uid": "ed7e9173-794f-41af-80d9-4ed37d593247"
                                    }
                                ],
                                "uid": "51f8addc-c0e9-438b-b0b6-3e4f1aa8202d"
                            }
                        },
                        {
                            "attackSignatureVersionDateTime": "2022.09.01",
                            "instance": {
                                "hostName": "hostname3",
                                "systemUid": "47692539-9c39-4b7e-a44e-67ae3b7729d6",
                                "uid": "54231c56-e068-467b-910a-7ac3915dd597"
                            },
                            "instanceGroup": {
                                "displayName": "",
                                "instances": [],
                                "uid": ""
                            }
                        }
                    ]
                }
            },
            "AttackSignatureDeploymentsCountResponse": {
                "value": {
                    "versions": [
                        {
                            "attackSignatureVersionDateTime": "2022-02-05",
                            "deployedCount": 1
                        }
                    ]
                }
            },
            "AttackSignaturesList": {
                "value": {
                    "items": [
                        {
                            "revisionTimestamp": "2022.08.30",
                            "uid": "23938f94-ae1f-4bf2-9c38-30bb70c0c782"
                        },
                        {
                            "revisionTimestamp": "2022.08.29",
                            "uid": "4d24ea03-f7d1-46b1-adef-924dd4edb234"
                        }
                    ]
                }
            },
            "CertListResponse": {
                "value": {
                    "items": [
                        {
                            "certMetadata": [
                                {
                                    "authorityKeyIdentifier": "3A:79:E0:3E:61:CD:94:29:1D:BB:45:37:0B:E9:78:E9:2F:40:67:CA",
                                    "commonName": "self_ca_signed",
                                    "expired": true,
                                    "expiry": 0,
                                    "issuer": "C=US, ST=WA, L=Seattle, O=F5 Networks, OU=nginx.test, CN=eg3bsriq_cert_bundle_CA",
                                    "publicKeyType": "RSA (2048 bit)",
                                    "serialNumber": "71283929",
                                    "signatureAlgorithm": "SHA256-RSA",
                                    "subject": "C=US, ST=WA, L=Seattle, O=F5 Networks, OU=nginx.test, CN=self_ca_signed",
                                    "subjectAlternativeName": "",
                                    "subjectKeyIdentifier": "93:35:2B:75:09:B9:FF:01:1B:63:F1:0E:50:71:9C:4E:B4:E2:02:BA",
                                    "thumbprint": "C1:EB:E8:CE:35:77:63:75:D3:C0:E7:97:5F:02:8C:D3:D8:C4:12:34:40:45:D3:98:67:39:BE:8A:33:CE:1F:B2",
                                    "thumbprintAlgorithm": "SHA-256",
                                    "validFrom": "2021-08-10T16:59:15Z",
                                    "validTo": "2021-08-14T16:59:15Z",
                                    "version": 3
                                },
                                {
                                    "authorityKeyIdentifier": "",
                                    "commonName": "eg3bsriq_cert_bundle_CA",
                                    "expired": true,
                                    "expiry": 0,
                                    "issuer": "",
                                    "publicKeyType": "RSA (2048 bit)",
                                    "serialNumber": "98872063",
                                    "signatureAlgorithm": "SHA256-RSA",
                                    "subject": "C=US, ST=WA, L=Seattle, O=F5 Networks, OU=nginx.test, CN=eg3bsriq_cert_bundle_CA",
                                    "subjectAlternativeName": "",
                                    "subjectKeyIdentifier": "3A:79:E0:3E:61:CD:94:29:1D:BB:45:37:0B:E9:78:E9:2F:40:67:CA",
                                    "thumbprint": "5E:23:B6:5D:81:52:A6:40:79:15:43:87:D1:E0:DF:C5:D4:BD:A3:66:79:EC:39:D4:C7:B9:7F:C3:10:C0:D8:D7",
                                    "thumbprintAlgorithm": "SHA-256",
                                    "validFrom": "2021-08-10T16:59:15Z",
                                    "validTo": "2021-08-14T16:59:15Z",
                                    "version": 3
                                }
                            ],
                            "certPEMDetails": {
                                "caCerts": [
                                    "-----BEGIN CERTIFICATE-----\nMIIDMzCCAhugAwIBAgIEBeSq/zANBgkqhkiG9w0BAQsFADAAMB4XDTIxMDgxMDE2\nNTkxNVoXDTIxMDgxNDE2NTkxNVoweTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldB\nMRAwDgYDVQQHDAdTZWF0dGxlMRQwEgYDVQQKDAtGNSBOZXR3b3JrczETMBEGA1UE\nCwwKbmdpbngudGVzdDEgMB4GA1UEAwwXZWczYnNyaX\u003cEXAMPLE_SNIPPED\u003e==\n-----END CERTIFICATE-----"
                                ],
                                "password": "**********",
                                "privateKey": "**********",
                                "publicCert": "-----BEGIN CERTIFICATE-----\nMIIDuTCCAqGgAwIBAgIEBD+02TANBgkqhkiG9w0BAQsFADB5MQswCQYDVQQGEwJV\nUzELMAkGA1UECAwCV0ExEDAOBgNVBAcMB1NlYXR0bGUxFDASBgNVBAoMC0Y1IE5l\ndHdvcmtzMRMwEQYDVQQLDApuZ2lueC50ZXN0MSAwHgYDVQQDDBdlZzNic3JpcV9j\nZXJ0X2J1bmRsZV9DQTAeFw0yMTA4MT\u003cEXAMPLE_SNIPPED\u003e==\n-----END CERTIFICATE-----",
                                "type": "PEM"
                            },
                            "created": "2021-10-15T20:19:24.005Z",
                            "instanceRefs": [
                                "/api/platform/v1/systems/ef613dcd-c8e0-aa49-afaf-4ae7fea11fc7/instances/16b6dd8e-7c2e-5e66-b60c-af8793c6b095"
                            ],
                            "modified": "2021-10-15T20:19:24.005Z",
                            "name": "bundle_with_ca",
                            "serialNumber": "71283929",
                            "validFrom": "2021-08-10T16:59:15Z",
                            "validTo": "2021-08-14T16:59:15Z"
                        }
                    ]
                }
            },
            "CertRequestBody": {
                "value": {
                    "certPEMDetails": {
                        "caCerts": [
                            "-----BEGIN CERTIFICATE-----\nMIIDMzCCAhugAwIBAgIEBeSq/zANBgkqhkiG9w0BAQsFADAAMB4XDTIxMDgxMDE2\nNTkxNVoXDTIxMDgxNDE2NTkxNVoweTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldB\nMRAwDgYDVQQHDAdTZWF0dGxlMRQwEgYDVQQKDAtGNSBOZXR3b3JrczETMBEGA1UE\nCwwKbmdpbngudGVzdDEgMB4GA1UEAwwXZWczYnNyaXFfY2VydF9idW5kbGVfQ0Ew\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDE6Vi7EchC6X7TYQ2DwU0Y\nBWYJ7nevCtjABkUNb/VD6aPVs7XSwFdYcNRcOMCjtDwraclPJvGWbryvL4ntlUhS\nSZ4V9hoYOztcvnh2bkSqJXZixB6TAkrJQq6IrN2VOGC8esHBxLuxfFaQUA9uwowl\nTfF0veRrROt0Qcp0bgLmtfaHAyp2VNK3ArS6tGOxbm3cGTeJeqZwSkdJEaDPfn02\n/ooVKkr+FYgdeqLAT4lqBH76cSS5dEYC5aK+8CYM5KHmZbUxQEpT3XYdIkU2qT1Y\n05GG2W1o2wjGxfl6EePRdPK9tvxr+GzPIXJNGsqsyILjhoKYyoIklPnuQjxHelPL\nAgMBAAGjPDA6MB0GA1UdDgQWBBQ6eeA+Yc2UKR27RTcL6XjpL0BnyjALBgNVHQ8E\nBAMCAYYwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAaJw/Q8XNpacj\n6A7EWt9/zlY5QFq4rC/IsJBfogNJtO4fZbC1xDo9siR7Qf4G6mRTnk2TcZO4IR/g\nAAICj3dwiSoso4hKxW3C1fFzl4GT+8ZPFTzcGtSnBzmgCUuwctlxvo+axW+9ViDD\ngqprtT/+Sxa8vWgwJdd+dcUk2Jne4MCEdF83H8yMyPlvqIZSmi6+YRjlxa4EqyDs\n+nSsaTLSWrvT0JN/6RJzcuM/ovUfRD6jfi5mZfcB2uihtIulWCHTMuE7w3/seswF\nAvFoaCnxWPluxxmTRQd1PjBFziJv0IQPz0cmcPkxOrBDy0rIEECnVZd0116u1eHj\n8lg2qyNaJw==\n-----END CERTIFICATE-----"
                        ],
                        "password": "",
                        "privateKey": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCxXAZf9UhWa8KP\n27y4g+Pqt40wH5K8zWymAxNJ0E6AqZZBqVOAL1BeWUxOX1V0R7npfkm9oKbcQVCi\nKyy/jTpX43cVhChOwnvSzgDqApcG7wBN6uVer2sAyEtiK6qhLmcgA8WNbd50TS0e\nYA1wJumuBiDVQMfVRKjnEldyjlUuW0GyesDHm1PNSnTeE0zm8AaMDDvOblbEGVz4\nhuYHv2OIJSwIYWVlbef0qe2jhBTbQ4XaCNXb9R2RpbSozqISt2OVHcDhhA2mCzYH\n3J1ron9GU6hHZj/U+2JzazuMOrYpD8pISpz1D7xMVWtIrPmmZxXqCiTuyElUpBWO\ne6Oj0B3TAgMBAAECggEAKJoTj4YcYERdDwfTxT3UQFhyxvCDbBtu4vZTRROd1RB9\nqFx2FCNAt8ijklF6w5rj8ZMKmJGdgVCmf+l4XgWbtKELEu7lN1qIdDLavLeJEXpH\nTI8YoTtxOIWh1ECA2FNCIm8am4zqXx+H06tTiDgwSLl4bLlexfDo5bUqNbxlva2e\nqbWQxIzraeTaRZGAxImpTsjM/M0rJ1S2t2hHb4k1QNSlYmE7KCf4mzcoyzNtpF9k\nswLQO3sDjEtghFkmo5xOy79x11drQV7vvQreYTYIRCuFXLdyifCz97JO7BHao4Q2\nEybMR55tVwXuRmdsfC2ZwIyPz14q4Nn0Rg9QUIvycQKBgQDkakkI3XuR8K01J0wB\nVkRG53Kf2EFn8V2dr7uRQXqxejmiB4Zc8qRDwqtDkGrnSQqBotmPw9bOVxm4KBY3\nSXlgowB8iR/i07SlQUGkFBq1AgIz49qw/IVkyeQGkfx/YFZQ/Z0GkeMgbLF45JFW\nbkr04VBdlx7fqA3i3ulkZV4gOwKBgQDGx0tj9huYLe7kyzUBlAIKRSEYaSUiwVTF\nCFivkjtDXUhx4B4mk1M5+S2a7vABzq1enBrlaKca6FH91qO4OSTadCY3Et8DNE/k\nVb0X4j9mTo9Mw5A2Pxv72MEpBttJRjowW2+1b3b9AcvjB0WddWZN367nPB8/VwRx\nCOMr8qD3SQKBgDIpBRDlUpWh/OeHUbGZeDT57robi4GAB8bxKIelkYQYC0AB1wfi\nYSBgR6v2swNHjv8Y/B4OK8X0arl+VCKgB/+ozBqNImt1gl4oDnox0Auf/UvX5dao\nHcMccu7ecEyoo0v15d3je7VLKU4bI6+PWPad5EApR6ZmCWag/TAG8ryxAoGAJfAL\nd3yVL6o0mf4ek7qH2SXwdxQ6PjPf1esN4hRqsySumu1HU91yWPIxvgw0SmQDurbY\ne0hJ/FyyqVu5y4M8gWUBlilH3viw9sdWW6SWrRP5TZFViMTqtlpcI1Rnrch1ep04\n6MvpTch1/VJ5+t9ZMyup2gAjhpc5BcnIca7RAeECgYArPaNfI2A7ZY6Pwj445CVV\nh5TtatPXbAkbci0KF0YcyFYAoPCP1wSa8u+5hvgLcIvfDoyOEYv5yvG7lQ4e86C0\nNQSSN1GjUKNwIyzRWq5R/rAOU61H2DdDjioLyiGV3sPMVKm8VANy64W1CRoNzZ+B\n3bJbVIrw6GaHC8hypeKnrw==\n-----END PRIVATE KEY-----",
                        "publicCert": "-----BEGIN CERTIFICATE-----\nMIIDuTCCAqGgAwIBAgIEBD+02TANBgkqhkiG9w0BAQsFADB5MQswCQYDVQQGEwJV\nUzELMAkGA1UECAwCV0ExEDAOBgNVBAcMB1NlYXR0bGUxFDASBgNVBAoMC0Y1IE5l\ndHdvcmtzMRMwEQYDVQQLDApuZ2lueC50ZXN0MSAwHgYDVQQDDBdlZzNic3JpcV9j\nZXJ0X2J1bmRsZV9DQTAeFw0yMTA4MTAxNjU5MTVaFw0yMTA4MTQxNjU5MTVaMHAx\nCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTEUMBIG\nA1UECgwLRjUgTmV0d29ya3MxEzARBgNVBAsMCm5naW54LnRlc3QxFzAVBgNVBAMM\nDnNlbGZfY2Ffc2lnbmVkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\nsVwGX/VIVmvCj9u8uIPj6reNMB+SvM1spgMTSdBOgKmWQalTgC9QXllMTl9VdEe5\n6X5JvaCm3EFQoissv406V+N3FYQoTsJ70s4A6gKXBu8ATerlXq9rAMhLYiuqoS5n\nIAPFjW3edE0tHmANcCbprgYg1UDH1USo5xJXco5VLltBsnrAx5tTzUp03hNM5vAG\njAw7zm5WxBlc+IbmB79jiCUsCGFlZW3n9Knto4QU20OF2gjV2/UdkaW0qM6iErdj\nlR3A4YQNpgs2B9yda6J/RlOoR2Y/1Ptic2s7jDq2KQ/KSEqc9Q+8TFVrSKz5pmcV\n6gok7shJVKQVjnujo9Ad0wIDAQABo1IwUDAdBgNVHQ4EFgQUkzUrdQm5/wEbY/EO\nUHGcTrTiArowDgYDVR0PAQH/BAQDAgOoMB8GA1UdIwQYMBaAFDp54D5hzZQpHbtF\nNwvpeOkvQGfKMA0GCSqGSIb3DQEBCwUAA4IBAQCmy4iJAl3FtYMwVJxAt8yG3lHp\n7K0Tb5YvQsrtt2lbndyKVZ08aWX33AYKXrMFERMYIPGL38UCwjlsbgjoclNF7IDh\nUIjL1Zxh4eg4OomTIl+7EGGkNY4l+0fTaCCi792kLBn5j0gHfeJ4FvTJrmjuk/lr\nQVBWyLhqPKKcXZyGF5EVAKYnEXvyk9K+KeY/t87cB+n3aH4y0dEtDY7iDkiboy4j\nvDIFkbPNspsnZmqi6ZJDYpgNTbRerjx6yJtcHDS9qHGp1X0twlBz4B0/SVt4tyD1\noALlqJibMAHzy+mqFTe9MhCpwwFnWt9iR5NHUym3ndgkiSevWzQUmNf1jDgS\n-----END CERTIFICATE-----",
                        "type": "PEM"
                    },
                    "name": "bundle_with_ca"
                }
            },
            "CertResponse": {
                "value": {
                    "certMetadata": [
                        {
                            "authorityKeyIdentifier": "3A:79:E0:3E:61:CD:94:29:1D:BB:45:37:0B:E9:78:E9:2F:40:67:CA",
                            "commonName": "self_ca_signed",
                            "expired": true,
                            "expiry": 0,
                            "issuer": "C=US, ST=WA, L=Seattle, O=F5 Networks, OU=nginx.test, CN=eg3bsriq_cert_bundle_CA",
                            "publicKeyType": "RSA (2048 bit)",
                            "serialNumber": "71283929",
                            "signatureAlgorithm": "SHA256-RSA",
                            "subject": "C=US, ST=WA, L=Seattle, O=F5 Networks, OU=nginx.test, CN=self_ca_signed",
                            "subjectAlternativeName": "",
                            "subjectKeyIdentifier": "93:35:2B:75:09:B9:FF:01:1B:63:F1:0E:50:71:9C:4E:B4:E2:02:BA",
                            "thumbprint": "C1:EB:E8:CE:35:77:63:75:D3:C0:E7:97:5F:02:8C:D3:D8:C4:12:34:40:45:D3:98:67:39:BE:8A:33:CE:1F:B2",
                            "thumbprintAlgorithm": "SHA-256",
                            "validFrom": "2021-08-10T16:59:15Z",
                            "validTo": "2021-08-14T16:59:15Z",
                            "version": 3
                        },
                        {
                            "authorityKeyIdentifier": "",
                            "commonName": "eg3bsriq_cert_bundle_CA",
                            "expired": true,
                            "expiry": 0,
                            "issuer": "",
                            "publicKeyType": "RSA (2048 bit)",
                            "serialNumber": "98872063",
                            "signatureAlgorithm": "SHA256-RSA",
                            "subject": "C=US, ST=WA, L=Seattle, O=F5 Networks, OU=nginx.test, CN=eg3bsriq_cert_bundle_CA",
                            "subjectAlternativeName": "",
                            "subjectKeyIdentifier": "3A:79:E0:3E:61:CD:94:29:1D:BB:45:37:0B:E9:78:E9:2F:40:67:CA",
                            "thumbprint": "5E:23:B6:5D:81:52:A6:40:79:15:43:87:D1:E0:DF:C5:D4:BD:A3:66:79:EC:39:D4:C7:B9:7F:C3:10:C0:D8:D7",
                            "thumbprintAlgorithm": "SHA-256",
                            "validFrom": "2021-08-10T16:59:15Z",
                            "validTo": "2021-08-14T16:59:15Z",
                            "version": 3
                        }
                    ],
                    "certPEMDetails": {
                        "caCerts": [
                            "-----BEGIN CERTIFICATE-----\nMIIDMzCCAhugAwIBAgIEBeSq/zANBgkqhkiG9w0BAQsFADAAMB4XDTIxMDgxMDE2\nNTkxNVoXDTIxMDgxNDE2NTkxNVoweTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldB\nMRAwDgYD\u003cEXAMPLE_SNIPPED\u003e==\n-----END CERTIFICATE-----"
                        ],
                        "password": "**********",
                        "privateKey": "**********",
                        "publicCert": "-----BEGIN CERTIFICATE-----\nMIIDuTCCAqGgAwIBAgIEBD+02TANBgkqhkiG9w0BAQsFADB5MQswCQYDVQQGEwJV\nUzELMAkGA1UECAwCV0ExEDAOBgNVBAcMB1NlYXR0bGUxFDASBgNVBAoMC0Y1IE\u003cEXAMPLE_SNIPPED\u003e==\n-----END CERTIFICATE-----",
                        "type": "PEM"
                    },
                    "created": "2021-10-15T20:19:24.005Z",
                    "instanceRefs": [
                        "/api/platform/v1/systems/ef613dcd-c8e0-aa49-afaf-4ae7fea11fc7/instances/16b6dd8e-7c2e-5e66-b60c-af8793c6b095"
                    ],
                    "modified": "2021-10-15T20:19:24.005Z",
                    "name": "bundle_with_ca",
                    "serialNumber": "71283929",
                    "validFrom": "2021-08-10T16:59:15Z",
                    "validTo": "2021-08-14T16:59:15Z"
                }
            },
            "ConfigAnalysisRequest": {
                "value": {
                    "files": [
                        {
                            "contents": "ZXZlbnRzIHt9Cmh0dHAgeyAgCiAgICBzZXJ2ZXIgeyAgCiAgICAgICAgbGlzdGVuIDgwOyAgCiAgICAgICAgc2VydmVyX25hbWUgXzsKCiAgICAgICAgcmV0dXJuIDIwMCAiSGVsbG8iOyAgCiAgICB9ICAKfQ==",
                            "name": "nginx.conf"
                        }
                    ],
                    "rootDir": "/etc/nginx/"
                }
            },
            "ConfigsResponse": {
                "value": [
                    {
                        "configName": "Clone of nginx 1.19.10 @ i-093c79001c952b2b8",
                        "nginxUID": "2feceead-7436-4b3b-be37-95ef82ec221f",
                        "uid": "92164e52-2253-4b4e-8748-a10f68134830"
                    },
                    {
                        "configName": "Clone of nginx 1.19.10 @ i-093c79001c952b2b8",
                        "nginxUID": "0ff127bd-2270-4fbb-8704-e85a4475e171",
                        "uid": "db9b95b4-0a17-422f-bb79-8ded8b6f712e"
                    }
                ]
            },
            "CreateInstanceGroupRequestBody": {
                "value": {
                    "description": "NGINX+ deployment group",
                    "displayName": "my-instance-group",
                    "name": "my-instance-group"
                }
            },
            "DeploymentDetailsResponse": {
                "value": {
                    "createTime": "2022-04-18T23:09:16Z",
                    "details": {
                        "failure": [],
                        "success": [
                            {
                                "name": "27de7cb8-f7d6-3639-b2a5-b7f48883aee1"
                            }
                        ]
                    },
                    "id": "07c6101e-27c9-4dbb-b934-b5ed75e389e0",
                    "status": "finalized",
                    "updateTime": "2022-04-18T23:09:16Z"
                }
            },
            "InstanceGroupConfigResponse": {
                "value": {
                    "auxFiles": {
                        "files": [
                            {
                                "contents": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KP\u003cEXAMPLE_SNIPPED\u003e",
                                "name": "/var/www/html/index.nginx-debian.html"
                            }
                        ],
                        "rootDir": "/"
                    },
                    "configFiles": {
                        "files": [
                            {
                                "contents": "dXNlciB3d3ctZGF0YTsKd29ya2VyX3Byb2Nlc3Nlc\u003cEXAMPLE_SNIPPED\u003e",
                                "name": "nginx.conf"
                            }
                        ],
                        "rootDir": "/etc/nginx"
                    },
                    "instances": [
                        "954ce6a6-6d5e-4d59-ba3c-86bc38ade620"
                    ]
                }
            },
            "InstanceGroupListResponse": {
                "value": {
                    "items": [
                        {
                            "description": "NGINX+ deployment group",
                            "displayName": "my-instance-group",
                            "instances": [
                                "646b0a58-37eb-4356-a579-0ab0937198bb",
                                "954ce6a6-6d5e-4d59-ba3c-86bc38ade620"
                            ],
                            "uid": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                        }
                    ]
                }
            },
            "InstanceGroupPublishConfigRequest": {
                "value": {
                    "auxFiles": {
                        "files": [
                            {
                                "contents": "IyBmaWxlIGNvbnRlbnQ=",
                                "name": "/etc/nginx/aux/somefile.1"
                            }
                        ],
                        "rootDir": "/etc/nginx/aux"
                    },
                    "configFiles": {
                        "files": [
                            {
                                "contents": "ZXZlbnRzIHt9Cmh0dHAgeyAgCiAgICBzZXJ2ZXIgeyAgCiAgICAgICAgbGlzdGVuIDgwOyAgCiAgICAgICAgc2VydmVyX25hbWUgXzsKCiAgICAgICAgcmV0dXJuIDIwMCAiSGVsbG8iOyAgCiAgICB9ICAKfQ==",
                                "name": "/etc/nginx/nginx.conf"
                            }
                        ],
                        "rootDir": "/etc/nginx"
                    },
                    "ignoreConflict": true,
                    "updateTime": "2022-06-13T21:33:43.453Z",
                    "validateConfig": true
                }
            },
            "InstanceGroupResponseBody": {
                "value": {
                    "description": "NGINX+ deployment group",
                    "displayName": "my-instance-group",
                    "instances": [
                        "c583386f-a02f-519f-8821-3f2f6c8734f5"
                    ],
                    "lastDeploymentDetails": {
                        "createTime": "2022-01-04T21:19:05.892Z",
                        "details": {
                            "failure": [],
                            "success": [
                                {
                                    "name": "devenv-agent"
                                }
                            ]
                        },
                        "id": "9bad47e6-5ed4-4522-96c0-6f507c2e7198",
                        "status": "resolved",
                        "updateTime": "2022-01-04T21:19:05.974Z"
                    },
                    "links": [
                        {
                            "name": "deployment",
                            "rel": "/api/platform/v1/instance-groups/deployments/9bad47e6-5ed4-4522-96c0-6f507c2e7198"
                        }
                    ],
                    "name": "my-instance-group",
                    "uid": "f0a7c5ce-d02a-4754-a041-081ed8ffc81b"
                }
            },
            "InventoryResponse": {
                "value": {
                    "aggregatedNginxPlusCount": 1,
                    "items": [
                        {
                            "hostname": "prod-data-1.us-west.acme.com",
                            "lastReportedTime": "2021-11-08T15:35:44Z",
                            "nap": "active",
                            "systemUid": "954ce6a6-6d5e-4d59-ba3c-86bc38ade620",
                            "uid": "646b0a58-37eb-4356-a579-0ab0937198bb",
                            "version": "nginx-plus-r27"
                        }
                    ]
                }
            },
            "InventoryWithAggregates": {
                "value": {
                    "aggregatedNginxAverageCount": 1,
                    "aggregatedNginxMaximumCount": 1,
                    "aggregatedNginxMinimumCount": 1,
                    "aggregatedNginxPlusCount": 1,
                    "items": [
                        {
                            "hostname": "prod-data-1.us-west.acme.com",
                            "lastReportedTime": "2021-11-08T15:35:44Z",
                            "nap": "active",
                            "systemUid": "954ce6a6-6d5e-4d59-ba3c-86bc38ade620",
                            "uid": "646b0a58-37eb-4356-a579-0ab0937198bb",
                            "version": "nginx-plus-r27"
                        }
                    ]
                }
            },
            "InventoryWithAggregatesDetailed": {
                "value": {
                    "aggregatedNginxAverageCount": 1,
                    "aggregatedNginxMaximumCount": 1,
                    "aggregatedNginxMinimumCount": 1,
                    "aggregatedNginxPlusCount": 1,
                    "items": [
                        {
                            "hostname": "prod-data-1.us-west.acme.com",
                            "lastReportedTime": "2021-11-08T15:35:44Z",
                            "nap": "active",
                            "systemUid": "954ce6a6-6d5e-4d59-ba3c-86bc38ade620",
                            "uid": "646b0a58-37eb-4356-a579-0ab0937198bb",
                            "version": "nginx-plus-r27"
                        }
                    ],
                    "metrics": {
                        "timestamps": [
                            "2022-07-19T21:17:55Z",
                            "2022-07-19T22:27:55Z",
                            "2022-07-19T23:37:55Z"
                        ],
                        "values": [
                            1,
                            1,
                            1
                        ]
                    }
                }
            },
            "ListNginxes": {
                "value": {
                    "count": 1,
                    "items": [
                        {
                            "displayName": "nginx-01",
                            "systemUid": "954ce6a6-6d5e-4d59-ba3c-86bc38ade620",
                            "uid": "646b0a58-37eb-4356-a579-0ab0937198bb"
                        }
                    ],
                    "nginxAppProtectWAFCount": 0,
                    "nginxPlusCount": 1
                }
            },
            "NginxInstance": {
                "value": {
                    "build": {
                        "nginxPlus": false,
                        "version": "1.18.0"
                    },
                    "configPath": "/etc/nginx/nginx.conf",
                    "configureArgs": [
                        "",
                        "with-cc-opt='-g -O2 -fdebug-prefix-map=/build/nginx-KTLRnK/nginx-1.18.0=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2'",
                        "with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -fPIC'",
                        "prefix=/usr/share/nginx",
                        "conf-path=/etc/nginx/nginx.conf",
                        "http-log-path=/var/log/nginx/access.log",
                        "error-log-path=/var/log/nginx/error.log",
                        "lock-path=/var/lock/nginx.lock",
                        "pid-path=/run/nginx.pid",
                        "modules-path=/usr/lib/nginx/modules",
                        "http-client-body-temp-path=/var/lib/nginx/body",
                        "http-fastcgi-temp-path=/var/lib/nginx/fastcgi",
                        "http-proxy-temp-path=/var/lib/nginx/proxy",
                        "http-scgi-temp-path=/var/lib/nginx/scgi",
                        "http-uwsgi-temp-path=/var/lib/nginx/uwsgi",
                        "with-debug",
                        "with-compat",
                        "with-pcre-jit",
                        "with-http_ssl_module",
                        "with-http_stub_status_module",
                        "with-http_realip_module",
                        "with-http_auth_request_module",
                        "with-http_v2_module",
                        "with-http_dav_module",
                        "with-http_slice_module",
                        "with-threads",
                        "with-http_addition_module",
                        "with-http_gunzip_module",
                        "with-http_gzip_static_module",
                        "with-http_image_filter_module=dynamic",
                        "with-http_sub_module",
                        "with-http_xslt_module=dynamic",
                        "with-stream=dynamic",
                        "with-stream_ssl_module",
                        "with-mail=dynamic",
                        "with-mail_ssl_module"
                    ],
                    "displayName": "devenv-agent",
                    "id": "3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4",
                    "lastDeploymentDetails": {
                        "createTime": "2022-01-04T21:19:05.892Z",
                        "details": {
                            "failure": [],
                            "success": [
                                {
                                    "name": "devenv-agent"
                                }
                            ]
                        },
                        "id": "9bad47e6-5ed4-4522-96c0-6f507c2e7198",
                        "status": "resolved",
                        "updateTime": "2022-01-04T21:19:05.974Z"
                    },
                    "links": [
                        {
                            "name": "system",
                            "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d"
                        },
                        {
                            "name": "deployment",
                            "rel": "/api/platform/v1/systems/instances/deployments/9bad47e6-5ed4-4522-96c0-6f507c2e7198"
                        },
                        {
                            "name": "self",
                            "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d/instances/3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4"
                        }
                    ],
                    "loadableModules": [
                        "ngx_http_image_filter_module",
                        "ngx_http_xslt_filter_module",
                        "ngx_mail_module",
                        "ngx_stream_module"
                    ],
                    "packages": [
                        "http_ssl_module",
                        "http_stub_status_module",
                        "http_realip_module",
                        "http_auth_request_module",
                        "http_v2_module",
                        "http_dav_module",
                        "http_slice_module",
                        "http_addition_module",
                        "http_gunzip_module",
                        "http_gzip_static_module",
                        "http_sub_module",
                        "stream_ssl_module",
                        "mail_ssl_module"
                    ],
                    "processId": "715",
                    "processPath": "/usr/sbin/nginx",
                    "registrationTime": "2021-09-16T23:39:58.000Z",
                    "ssl": {
                        "built": [
                            "OpenSSL",
                            "1.1.1",
                            " 11 Sep 2018"
                        ],
                        "runtime": [
                            "OpenSSL",
                            "1.1.1",
                            " 11 Sep 2018"
                        ]
                    },
                    "startTime": "2021-11-08T15:31:44Z",
                    "status": {
                        "lastStatusReport": "2021-09-17T02:00:48.654288657Z",
                        "state": "offline"
                    },
                    "version": "1.18.0"
                }
            },
            "NginxInstanceConfigResponse": {
                "value": {
                    "accessLogs": [
                        {
                            "format": "csv",
                            "name": "access_log.1",
                            "permissions": "rw",
                            "readable": false
                        }
                    ],
                    "configFiles": {
                        "checksum": "e29ade48b6cadd2e17803cc70278f56675460975e9d8e4568510fa8057452a14",
                        "files": [
                            {
                                "contents": "dXNlciAgICAgICB3d3cgd3d3OyAgIyMgRGVmYXVsdDogbm9ib2R5Cndvcmtlcl9wcm9jZXNzZXMgIDU7ICAjIyBEZWZhdWx0OiAxCmVycm9yX2xvZyAgbG9ncy9lcnJvci5sb2c7CnBpZCAgICAgICAgbG9ncy9uZ2lueC5waWQ7Cndvcmtlcl9ybGltaXRfbm9maWxlIDgxOTI7CgpldmVudHMgewogIHdvcmtlcl9jb25uZWN0aW9ucyAgNDA5NjsgICMjIERlZmF1bHQ6IDEwMjQKfQoKaHR0cCB7CiAgaW5jbHVkZSAgICBjb25mL21pbWUudHlwZXM7CiAgaW5jbHVkZSAgICAvZXRjL25naW54L3Byb3h5LmNvbmY7CiAgaW5jbHVkZSAgICAvZXRjL25naW54L2Zhc3RjZ2kuY29uZjsKICBpbmRleCAgICBpbmRleC5odG1sIGluZGV4Lmh0bSBpbmRleC5waHA7CgogIGRlZmF1bHRfdHlwZSBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07CiAgbG9nX2Zvcm1hdCAgIG1haW4gJyRyZW1vdGVfYWRkciAtICRyZW1vdGVfdXNlciBbJHRpbWVfbG9jYWxdICAkc3RhdHVzICcKICAgICciJHJlcXVlc3QiICRib2R5X2J5dGVzX3NlbnQgIiRodHRwX3JlZmVyZXIiICcKICAgICciJGh0dHBfdXNlcl9hZ2VudCIgIiRodHRwX3hfZm9yd2FyZGVkX2ZvciInOwogIGFjY2Vzc19sb2cgICBsb2dzL2FjY2Vzcy5sb2cgIG1haW47CiAgc2VuZGZpbGUgICAgIG9uOwogIHRjcF9ub3B1c2ggICBvbjsKICBzZXJ2ZXJfbmFtZXNfaGFzaF9idWNrZXRfc2l6ZSAxMjg7ICMgdGhpcyBzZWVtcyB0byBiZSByZXF1aXJlZCBmb3Igc29tZSB2aG9zdHMKCiAgc2VydmVyIHsgIyBwaHAvZmFzdGNnaQogICAgbGlzdGVuICAgICAgIDgwOwogICAgc2VydmVyX25hbWUgIGRvbWFpbjEuY29tIHd3dy5kb21haW4xLmNvbTsKICAgIGFjY2Vzc19sb2cgICBsb2dzL2RvbWFpbjEuYWNjZXNzLmxvZyAgbWFpbjsKICAgIHJvb3QgICAgICAgICBodG1sOwoKICAgIGxvY2F0aW9uIH4gXC5waHAkIHsKICAgICAgZmFzdGNnaV9wYXNzICAgMTI3LjAuMC4xOjEwMjU7CiAgICB9CiAgfQoKICBzZXJ2ZXIgeyAjIHNpbXBsZSByZXZlcnNlLXByb3h5CiAgICBsaXN0ZW4gICAgICAgODA7CiAgICBzZXJ2ZXJfbmFtZSAgZG9tYWluMi5jb20gd3d3LmRvbWFpbjIuY29tOwogICAgYWNjZXNzX2xvZyAgIGxvZ3MvZG9tYWluMi5hY2Nlc3MubG9nICBtYWluOwoKICAgICMgc2VydmUgc3RhdGljIGZpbGVzCiAgICBsb2NhdGlvbiB-IF4vKGltYWdlc3xqYXZhc2NyaXB0fGpzfGNzc3xmbGFzaHxtZWRpYXxzdGF0aWMpLyAgewogICAgICByb290ICAgIC92YXIvd3d3L3ZpcnR1YWwvYmlnLnNlcnZlci5jb20vaHRkb2NzOwogICAgICBleHBpcmVzIDMwZDsKICAgIH0KCiAgICAjIHBhc3MgcmVxdWVzdHMgZm9yIGR5bmFtaWMgY29udGVudCB0byByYWlscy90dXJib2dlYXJzL3pvcGUsIGV0IGFsCiAgICBsb2NhdGlvbiAvIHsKICAgICAgcHJveHlfcGFzcyAgICAgIGh0dHA6Ly8xMjcuMC4wLjE6ODA4MDsKICAgIH0KICB9CgogIHVwc3RyZWFtIGJpZ19zZXJ2ZXJfY29tIHsKICAgIHNlcnZlciAxMjcuMC4wLjM6ODAwMCB3ZWlnaHQ9NTsKICAgIHNlcnZlciAxMjcuMC4wLjM6ODAwMSB3ZWlnaHQ9NTsKICAgIHNlcnZlciAxOTIuMTY4LjAuMTo4MDAwOwogICAgc2VydmVyIDE5Mi4xNjguMC4xOjgwMDE7CiAgfQoKICBzZXJ2ZXIgeyAjIHNpbXBsZSBsb2FkIGJhbGFuY2luZwogICAgbGlzdGVuICAgICAgICAgIDgwOwogICAgc2VydmVyX25hbWUgICAgIGJpZy5zZXJ2ZXIuY29tOwogICAgYWNjZXNzX2xvZyAgICAgIGxvZ3MvYmlnLnNlcnZlci5hY2Nlc3MubG9nIG1haW47CgogICAgbG9jYXRpb24gLyB7CiAgICAgIHByb3h5X3Bhc3MgICAgICBodHRwOi8vYmlnX3NlcnZlcl9jb207CiAgICB9CiAgfQp9Cg==",
                                "path": "nginx.conf",
                                "permissions": 436
                            }
                        ],
                        "rootDir": "/etc/nginx"
                    },
                    "directoryMap": {
                        "/etc/nginx": {
                            "files": [
                                {
                                    "contents": "",
                                    "name": "fastcgi.conf",
                                    "permissions": "0644",
                                    "size": 1077
                                },
                                {
                                    "contents": "",
                                    "name": "fastcgi_params",
                                    "permissions": "0644",
                                    "size": 1007
                                },
                                {
                                    "contents": "",
                                    "name": "koi-utf",
                                    "permissions": "0644",
                                    "size": 2837
                                },
                                {
                                    "contents": "",
                                    "name": "koi-win",
                                    "permissions": "0644",
                                    "size": 2223
                                },
                                {
                                    "contents": "",
                                    "name": "mime.types",
                                    "permissions": "0644",
                                    "size": 3957
                                },
                                {
                                    "contents": "",
                                    "name": "nginx.conf",
                                    "permissions": "0644",
                                    "size": 1490
                                },
                                {
                                    "contents": "",
                                    "name": "proxy_params",
                                    "permissions": "0644",
                                    "size": 180
                                },
                                {
                                    "contents": "",
                                    "name": "scgi_params",
                                    "permissions": "0644",
                                    "size": 636
                                },
                                {
                                    "contents": "",
                                    "name": "uwsgi_params",
                                    "permissions": "0644",
                                    "size": 664
                                },
                                {
                                    "contents": "",
                                    "name": "win-utf",
                                    "permissions": "0644",
                                    "size": 3071
                                }
                            ],
                            "name": "/etc/nginx",
                            "permissions": "0755",
                            "size": 4096,
                            "updateTime": "0001-01-01T00:00:00Z"
                        }
                    },
                    "errorLogs": [
                        {
                            "logLevel": "",
                            "name": "error_log.1",
                            "permissions": "rw",
                            "readable": false
                        }
                    ],
                    "ssl": []
                }
            },
            "NginxInstanceSummary": {
                "value": {
                    "items": [
                        {
                            "hostname": "prod-data-1.us-west.acme.com",
                            "lastReportedTime": "2021-11-08T15:35:44Z",
                            "nap": "active",
                            "systemUid": "954ce6a6-6d5e-4d59-ba3c-86bc38ade620",
                            "uid": "646b0a58-37eb-4356-a579-0ab0937198bb",
                            "version": "nginx-plus-r27"
                        }
                    ]
                }
            },
            "NginxInstanceSummaryListResponse": {
                "value": {
                    "items": [
                        {
                            "build": {
                                "nginxPlus": true,
                                "release": "nginx-plus-r24-p1",
                                "version": "1.18.0"
                            },
                            "configPath": "/etc/nginx/nginx.conf",
                            "displayName": "devenv-agent",
                            "id": "3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4",
                            "links": [
                                {
                                    "name": "system",
                                    "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d"
                                },
                                {
                                    "name": "self",
                                    "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d/instances/3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4"
                                }
                            ],
                            "processPath": "/usr/sbin/nginx",
                            "registrationTime": "2021-09-16T23:20:52.000Z",
                            "startTime": "2021-11-08T15:31:44Z",
                            "status": {
                                "lastStatusReport": "2021-09-16T23:21:26.045300902Z",
                                "state": "offline"
                            },
                            "version": "1.18.0"
                        }
                    ]
                }
            },
            "PolicyDeploymentsAssocResponse": {
                "value": {
                    "associations": [
                        {
                            "attackSignatureLibrary": {
                                "uid": "2ce3ddec-7646-460c-bfad-20e66502d961",
                                "versionDateTime": "2022.07.11"
                            },
                            "instance": {
                                "hostname": "",
                                "systemUid": "",
                                "uid": ""
                            },
                            "instanceGroup": {
                                "displayName": "inst_group_1",
                                "instances": [
                                    {
                                        "hostName": "hostname1",
                                        "systemUid": "49d143c2-f556-4cd7-8658-76fff54fb861",
                                        "uid": "c8e15dcf-c504-4b7f-b52d-def7b8fd2f64"
                                    },
                                    {
                                        "hostName": "hostname2",
                                        "systemUid": "88a99ab0-15bb-4719-9107-daf5007c33f7",
                                        "uid": "ed7e9173-794f-41af-80d9-4ed37d593247"
                                    }
                                ],
                                "uid": "51f8addc-c0e9-438b-b0b6-3e4f1aa8202d"
                            },
                            "policyUid": "272df125-69d0-4747-af88-e8b6435fe456",
                            "policyVersionDateTime": "2022-08-31T17:20:17Z",
                            "threatCampaign": {
                                "uid": "8322b7fe-0608-43a2-a3e6-12b58b6baf1d",
                                "versionDateTime": "2022.06.11"
                            }
                        },
                        {
                            "attackSignatureLibrary": {
                                "uid": "2ce3ddec-7646-460c-bfad-20e66502d961",
                                "versionDateTime": "2022.07.11"
                            },
                            "instance": {
                                "hostName": "hostname3",
                                "systemUid": "47692539-9c39-4b7e-a44e-67ae3b7729d6",
                                "uid": "54231c56-e068-467b-910a-7ac3915dd597"
                            },
                            "instanceGroup": {
                                "displayName": "",
                                "instances": [],
                                "uid": ""
                            },
                            "policyUid": "1d585ff1-f00d-4d72-aba6-39ba68fa8e0d",
                            "policyVersionDateTime": "2022-08-31T17:21:17Z",
                            "threatCampaign": {
                                "uid": "8322b7fe-0608-43a2-a3e6-12b58b6baf1d",
                                "versionDateTime": "2022.06.11"
                            }
                        }
                    ]
                }
            },
            "PolicyDeploymentsCountResponse": {
                "value": {
                    "policies": [
                        {
                            "deployedVersionCount": 2,
                            "name": "policy1_name"
                        },
                        {
                            "deployedVersionCount": 0,
                            "name": "policy2_name"
                        }
                    ]
                }
            },
            "PolicyDeploymentsVersionResponse": {
                "value": {
                    "versions": [
                        {
                            "instanceGroups": [
                                "51f8addc-c0e9-438b-b0b6-3e4f1aa8202d"
                            ],
                            "instances": [],
                            "policyUid": "272df125-69d0-4747-af88-e8b6435fe456",
                            "policyVersionDateTime": "2022-08-31T17:20:17Z"
                        },
                        {
                            "instanceGroups": [],
                            "instances": [
                                "be129783-3aee-4386-9880-fed45fa06f3a"
                            ],
                            "policyUid": "1d585ff1-f00d-4d72-aba6-39ba68fa8e0d",
                            "policyVersionDateTime": "2022-08-31T17:21:17Z"
                        },
                        {
                            "instanceGroups": [],
                            "instances": [],
                            "policyUid": "c9971993-c479-49d3-8bae-ddd29b88b491",
                            "policyVersionDateTime": "2022-08-31T17:22:17Z"
                        }
                    ]
                }
            },
            "PublishConfigRequest": {
                "value": {
                    "auxFiles": {
                        "files": [
                            {
                                "contents": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KP\u003cEXAMPLE_SNIPPED\u003e",
                                "name": "/var/www/html/index.nginx-debian.html"
                            }
                        ],
                        "rootDir": "/"
                    },
                    "configFiles": {
                        "files": [
                            {
                                "contents": "dXNlciB3d3ctZGF0YTsKd29ya2VyX3Byb2Nlc3Nlc\u003cEXAMPLE_SNIPPED\u003e",
                                "name": "nginx.conf"
                            }
                        ],
                        "rootDir": "/etc/nginx"
                    },
                    "configUID": "",
                    "ignoreConflict": false,
                    "validateConfig": true
                }
            },
            "PublishConfigResponse": {
                "value": {
                    "deploymentUID": "954ce6a66d5e4d59ba3c86bc38ade620",
                    "links": {
                        "ref": "/api/platform/v1/systems/instances/deployments/954ce6a66d5e4d59ba3c86bc38ade620"
                    },
                    "result": "Publish configuration request Accepted"
                }
            },
            "PublishSecurityContentRequest": {
                "value": {
                    "publications": [
                        {
                            "attackSignatureLibrary": {
                                "uid": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "versionDateTime": "2022.10.02"
                            },
                            "instanceGroups": [
                                "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                            ],
                            "instances": [
                                "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                            ],
                            "policyContent": {
                                "name": "default-enforcement",
                                "uid": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                            },
                            "threatCampaign": {
                                "uid": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                                "versionDateTime": "2022.10.01"
                            }
                        }
                    ]
                }
            },
            "SystemDetailsResponse": {
                "value": {
                    "agent": {
                        "accessibleDirs": "/etc/nginx:/usr/local/etc/nginx",
                        "version": "v0.0.44"
                    },
                    "diskPartitions": [
                        {
                            "device": "/dev/sda1",
                            "fsType": "ext4",
                            "mountPoint": "/"
                        },
                        {
                            "device": "/dev/loop2",
                            "fsType": "squashfs",
                            "mountPoint": "/snap/core18/2074"
                        }
                    ],
                    "displayName": "devenv-agent",
                    "hostname": "devenv-agent",
                    "links": [
                        {
                            "name": "self",
                            "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d"
                        }
                    ],
                    "networkInterfaces": [
                        {
                            "ipv4AddressList": [
                                {
                                    "address": "127.0.0.1",
                                    "netmask": "255.0.0.0",
                                    "prefixLen": 8
                                }
                            ],
                            "ipv6AddressList": [
                                {
                                    "address": "::1",
                                    "netmask": "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff",
                                    "prefixLen": 128
                                }
                            ],
                            "macAddress": "08:00:27:c1:43:c0",
                            "name": "enp0s8"
                        },
                        {
                            "ipv4AddressList": [
                                {
                                    "address": "10.0.2.15",
                                    "netmask": "255.255.255.0",
                                    "prefixLen": 24
                                }
                            ],
                            "ipv6AddressList": [
                                {
                                    "address": "fe80::bd:a9ff:fe2d:eb2",
                                    "netmask": "ffff:ffff:ffff:ffff::",
                                    "prefixLen": 64
                                }
                            ],
                            "macAddress": "08:00:27:c1:43:c0",
                            "name": "enp0s8"
                        },
                        {
                            "ipv4AddressList": [
                                {
                                    "address": "192.168.192.2",
                                    "netmask": "255.255.255.0",
                                    "prefixLen": 24
                                }
                            ],
                            "ipv6AddressList": [
                                {
                                    "address": "fe80::a00:27ff:fec1:43c0",
                                    "netmask": "ffff:ffff:ffff:ffff::",
                                    "prefixLen": 64
                                }
                            ],
                            "macAddress": "08:00:27:c1:43:c0",
                            "name": "enp0s8"
                        }
                    ],
                    "nginxInstances": [
                        {
                            "build": {
                                "nginxPlus": false,
                                "version": "1.18.0"
                            },
                            "configPath": "/etc/nginx/nginx.conf",
                            "displayName": "devenv-agent",
                            "id": "3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4",
                            "links": [],
                            "processPath": "/usr/sbin/nginx",
                            "registrationTime": "2021-09-16T23:39:58.000Z",
                            "startTime": "2021-11-08T15:31:44Z",
                            "status": {
                                "lastStatusReport": "2021-09-17T01:33:53.329029591Z",
                                "state": "offline"
                            },
                            "version": "1.18.0"
                        }
                    ],
                    "osRelease": {
                        "name": "",
                        "version": "20.04",
                        "versionId": ""
                    },
                    "osType": "linux",
                    "processor": [
                        {
                            "architecture": "6",
                            "cores": 1,
                            "cpus": 2,
                            "hypervisor": "vbox",
                            "mhz": 2591.998
                        },
                        {
                            "architecture": "6",
                            "cores": 1,
                            "cpus": 2,
                            "hypervisor": "vbox",
                            "mhz": 2591.998
                        }
                    ],
                    "status": {
                        "lastStatusReport": "2021-09-17T01:33:49.10559204Z",
                        "state": "offline"
                    },
                    "tags": [],
                    "uid": "690e5425-2bfa-cf46-8ad5-e4862ad3c22d",
                    "uname": "Linux devenv 5.4.0-84-generic #94-Ubuntu SMP Thu Aug 26 20:27:37 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux"
                }
            },
            "SystemPatchRequest": {
                "value": {
                    "displayName": "prod-data-1.us-west.acme.com",
                    "tags": [
                        "aws",
                        "location:us-west-1"
                    ]
                }
            },
            "SystemSummaryListResponse": {
                "value": {
                    "count": 1,
                    "items": [
                        {
                            "agent": {
                                "accessibleDirs": "/etc/nginx:/usr/local/etc/nginx",
                                "version": "3.17.22"
                            },
                            "displayName": "prod-data-1.us-west.acme.com",
                            "hostname": "prod-data-1.us-west.acme.com",
                            "links": [
                                {
                                    "name": "self",
                                    "rel": "/api/platform/v1/systems/{system-id}"
                                }
                            ],
                            "nginxInstances": [
                                {
                                    "build": {
                                        "nginxPlus": true,
                                        "release": "nginx-plus-r24-p1",
                                        "version": "1.18.0"
                                    },
                                    "configPath": "/etc/nginx/nginx.conf",
                                    "displayName": "devenv-agent",
                                    "id": "3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4",
                                    "links": [
                                        {
                                            "name": "system",
                                            "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d"
                                        },
                                        {
                                            "name": "self",
                                            "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d/instances/3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4"
                                        }
                                    ],
                                    "processPath": "/usr/sbin/nginx",
                                    "registrationTime": "2021-09-16T23:20:52.000Z",
                                    "startTime": "2021-11-08T15:31:44Z",
                                    "status": {
                                        "lastStatusReport": "2021-09-16T23:21:26.045300902Z",
                                        "state": "offline"
                                    },
                                    "version": "1.18.0"
                                }
                            ],
                            "status": {
                                "lastStatusReport": "2020-05-14T21:38:54.410566Z",
                                "state": "online"
                            },
                            "tags": [],
                            "uid": "690e5425-2bfa-cf46-8ad5-e4862ad3c22d"
                        }
                    ],
                    "itemsPerPage": 25,
                    "startIndex": 0
                }
            },
            "SystemSummaryResponse": {
                "value": {
                    "agent": {
                        "accessibleDirs": "/etc/nginx:/usr/local/etc/nginx",
                        "version": "3.17.22"
                    },
                    "displayName": "prod-data-1.us-west.acme.com",
                    "hostname": "prod-data-1.us-west.acme.com",
                    "links": [
                        {
                            "name": "self",
                            "rel": "/api/platform/v1/systems/{system-id}"
                        }
                    ],
                    "nginxInstances": [
                        {
                            "build": {
                                "nginxPlus": true,
                                "release": "nginx-plus-r24-p1",
                                "version": "1.18.0"
                            },
                            "configPath": "/etc/nginx/nginx.conf",
                            "displayName": "devenv-agent",
                            "id": "3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4",
                            "links": [
                                {
                                    "name": "system",
                                    "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d"
                                },
                                {
                                    "name": "self",
                                    "rel": "/api/platform/v1/systems/690e5425-2bfa-cf46-8ad5-e4862ad3c22d/instances/3d3aa4912dc94592ea0fff71ab3b9558b519575799a14a6a216d78dfe25b48a4"
                                }
                            ],
                            "processPath": "/usr/sbin/nginx",
                            "registrationTime": "2021-09-16T23:20:52.000Z",
                            "startTime": "2021-11-08T15:31:44Z",
                            "status": {
                                "lastStatusReport": "2021-09-16T23:21:26.045300902Z",
                                "state": "offline"
                            },
                            "version": "1.18.0"
                        }
                    ],
                    "status": {
                        "lastStatusReport": "2020-05-14T21:38:54.410566Z",
                        "state": "online"
                    },
                    "tags": [],
                    "uid": "690e5425-2bfa-cf46-8ad5-e4862ad3c22d"
                }
            },
            "SystemTagsResponse": {
                "value": {
                    "items": [
                        "first-nginx-host",
                        "aws-nginx-host-01"
                    ]
                }
            },
            "TemplateGroupRequestBody": {
                "value": {
                    "name": "foo",
                    "templates": [
                        "779004e1-8ead-455c-9324-d5cd0b5ee1b6"
                    ]
                }
            },
            "TemplateGroupResponse": {
                "value": {
                    "name": "foo",
                    "templates": [
                        "779004e1-8ead-455c-9324-d5cd0b5ee1b6"
                    ]
                }
            },
            "TemplateRequestBody": {
                "value": {
                    "contents": "bG9jYXRpb24ge3subG9jYXRpb25OYW1lRXhwcmVzc2lvbn19IHsKICAgIHNldCAkYXBpa2V5ICRodHRwX2FwaUtleTsKICAgIGF1dGhfcmVxdWVzdCB7ey5hdXRoTG9jYXRpb259fTsKICAgIGF1dGhfcmVxdWVzdF9zZXQgJGFwaV9jbGllbnRfbmFtZSAkc2VudF9odHRwX2FwaWNsaWVudDsKICAgIGFjY2Vzc19sb2cgL3Zhci9sb2cvbmdpbngvYWNjZXNzLmxvZyB7ey5hdXRoTG9nTmFtZX19OwogICAgcHJveHlfcGFzcyB7ey5wcm94eVBhc3NVUkl9fTsKfQp7e2lmIC5hdXRoTG9jYXRpb259fQpsb2NhdGlvbiA9IHt7LmF1dGhMb2NhdGlvbn19IHsKICAgIGludGVybmFsOwogICAgc2V0ICRtYXBfaW5wdXQge3sua2V5SGFzaH19OwogICAgc2V0ICRtYXBfb3V0cHV0IHt7LmtleUNsaWVudH19OwogICAganNfY29udGVudCBhcGlfYXV0aC5hdXRoQXBpS2V5Owp9Cnt7ZW5kfX0K",
                    "created": "2022-03-03T20:14:50.909Z",
                    "modified": "2022-03-03T20:14:50.911Z",
                    "name": "apim-auth-location",
                    "uid": "779004e1-8ead-455c-9324-d5cd0b5ee1b6",
                    "version": "v2.0.0-test"
                }
            },
            "TemplateResponse": {
                "value": {
                    "contents": "bG9jYXRpb24ge3subG9jYXRpb25OYW1lRXhwcmVzc2lvbn19IHsKICAgIHNldCAkYXBpa2V5ICRodHRwX2FwaUtleTsKICAgIGF1dGhfcmVxdWVzdCB7ey5hdXRoTG9jYXRpb259fTsKICAgIGF1dGhfcmVxdWVzdF9zZXQgJGFwaV9jbGllbnRfbmFtZSAkc2VudF9odHRwX2FwaWNsaWVudDsKICAgIGFjY2Vzc19sb2cgL3Zhci9sb2cvbmdpbngvYWNjZXNzLmxvZyB7ey5hdXRoTG9nTmFtZX19OwogICAgcHJveHlfcGFzcyB7ey5wcm94eVBhc3NVUkl9fTsKfQp7e2lmIC5hdXRoTG9jYXRpb259fQpsb2NhdGlvbiA9IHt7LmF1dGhMb2NhdGlvbn19IHsKICAgIGludGVybmFsOwogICAgc2V0ICRtYXBfaW5wdXQge3sua2V5SGFzaH19OwogICAgc2V0ICRtYXBfb3V0cHV0IHt7LmtleUNsaWVudH19OwogICAganNfY29udGVudCBhcGlfYXV0aC5hdXRoQXBpS2V5Owp9Cnt7ZW5kfX0K",
                    "created": "2022-03-03T20:14:50.909Z",
                    "modified": "2022-03-03T20:14:50.911Z",
                    "name": "apim-auth-location",
                    "uid": "779004e1-8ead-455c-9324-d5cd0b5ee1b6",
                    "version": "v2.0.0-test"
                }
            },
            "ThreatCampaignDeploymentAssocResponse": {
                "value": {
                    "associations": [
                        {
                            "instance": {
                                "hostname": "",
                                "systemUid": "",
                                "uid": ""
                            },
                            "instanceGroup": {
                                "displayName": "inst_group_1",
                                "instances": [
                                    {
                                        "hostName": "hostname1",
                                        "systemUid": "49d143c2-f556-4cd7-8658-76fff54fb861",
                                        "uid": "c8e15dcf-c504-4b7f-b52d-def7b8fd2f64"
                                    },
                                    {
                                        "hostName": "hostname2",
                                        "systemUid": "88a99ab0-15bb-4719-9107-daf5007c33f7",
                                        "uid": "ed7e9173-794f-41af-80d9-4ed37d593247"
                                    }
                                ],
                                "uid": "51f8addc-c0e9-438b-b0b6-3e4f1aa8202d"
                            },
                            "threatCampaignVersionDateTime": "2022.08.01"
                        },
                        {
                            "instance": {
                                "hostName": "hostname3",
                                "systemUid": "47692539-9c39-4b7e-a44e-67ae3b7729d6",
                                "uid": "54231c56-e068-467b-910a-7ac3915dd597"
                            },
                            "instanceGroup": {
                                "displayName": "",
                                "instances": [],
                                "uid": ""
                            },
                            "threatCampaignVersionDateTime": "2022.08.01"
                        }
                    ]
                }
            },
            "ThreatCampaignDeploymentsCountResponse": {
                "value": {
                    "versions": [
                        {
                            "deployedCount": 1,
                            "threatCampaignVersionDateTime": "2022-02-05"
                        }
                    ]
                }
            },
            "ThreatCampaignList": {
                "value": {
                    "items": [
                        {
                            "revisionTimestamp": "2022.08.30",
                            "uid": "2ce3ddec-7646-460c-bfad-20e66502d961"
                        },
                        {
                            "revisionTimestamp": "2022.08.29",
                            "uid": "3ef3ddec-7646-460c-bfad-20e66777d777"
                        }
                    ]
                }
            },
            "UpdateConfigRequest": {
                "value": {
                    "auxFiles": {
                        "files": [
                            {
                                "contents": "IyBmaWxlIGNvbnRlbnQ=",
                                "name": "/etc/nginx/aux/somefile.1"
                            }
                        ],
                        "rootDir": "/etc/nginx/aux"
                    },
                    "configFiles": {
                        "files": [
                            {
                                "contents": "ZXZlbnRzIHt9Cmh0dHAgeyAgCiAgICBzZXJ2ZXIgeyAgCiAgICAgICAgbGlzdGVuIDgwOyAgCiAgICAgICAgc2VydmVyX25hbWUgXzsKCiAgICAgICAgcmV0dXJuIDIwMCAiSGVsbG8iOyAgCiAgICB9ICAKfQ==",
                                "name": "/etc/nginx/nginx.conf"
                            }
                        ],
                        "rootDir": "/etc/nginx"
                    },
                    "configName": "test1"
                }
            },
            "UpdateInstanceGroupRequestBody": {
                "value": {
                    "description": "NGINX+ deployment group",
                    "displayName": "my-instance-group"
                }
            },
            "UploadConfigRequest": {
                "value": {
                    "auxFiles": {
                        "files": [
                            {
                                "contents": "IyBmaWxlIGNvbnRlbnQ=",
                                "name": "/etc/nginx/aux/somefile.1"
                            }
                        ],
                        "rootDir": "/etc/nginx/aux"
                    },
                    "configFiles": {
                        "files": [
                            {
                                "contents": "ZXZlbnRzIHt9Cmh0dHAgeyAgCiAgICBzZXJ2ZXIgeyAgCiAgICAgICAgbGlzdGVuIDgwOyAgCiAgICAgICAgc2VydmVyX25hbWUgXzsKCiAgICAgICAgcmV0dXJuIDIwMCAiSGVsbG8iOyAgCiAgICB9ICAKfQ==",
                                "name": "/etc/nginx/nginx.conf"
                            }
                        ],
                        "rootDir": "/etc/nginx"
                    },
                    "configName": "test1"
                }
            },
            "UploadConfigResponse": {
                "value": {
                    "auxUploadResult": {
                        "filesAdded": 1,
                        "filesUpdated": 1
                    },
                    "configName": "sample-config",
                    "configUploadResult": {
                        "filesDeleted": 1,
                        "filesUpdated": 1
                    },
                    "createTime": "2021-10-20T22:58:00.391274152Z",
                    "nginxUid": "\u003cguid\u003e",
                    "uid": "\u003cguid\u003e",
                    "updateTime": "2021-10-20T22:58:00.391274152Z"
                }
            }
        },
        "parameters": {
            "AppliedOnly": {
                "description": "Filter to return only tags that have been applied to NGINX instances.",
                "in": "query",
                "name": "appliedOnly",
                "schema": {
                    "default": false,
                    "type": "boolean"
                }
            },
            "CertName": {
                "description": "The name of the Cert. As of 2.4 release, this could also be the uuid of the cert, in lieu of name. The\nuse of name as unique identifier may be deprecated in a future release.\n",
                "explode": false,
                "in": "path",
                "name": "certName",
                "required": true,
                "schema": {
                    "pattern": "^[^\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=\u0026\\~\\^|#\u003c\u003e]+$",
                    "type": "string"
                },
                "style": "simple"
            },
            "ChildInstanceUid": {
                "description": "Filter systems by instance unique ID.",
                "in": "query",
                "name": "childInstanceUid",
                "schema": {
                    "example": "6692f820-c15c-4286-a405-38806b22064f",
                    "format": "uuid",
                    "type": "string"
                }
            },
            "ConfigUid": {
                "description": "The identifier of the staged NGINX configuration.",
                "explode": false,
                "in": "path",
                "name": "configUid",
                "required": true,
                "schema": {
                    "format": "uuid",
                    "type": "string"
                },
                "style": "simple"
            },
            "DeploymentUid": {
                "description": "The unique identifier that was generated for the deployment.",
                "in": "path",
                "name": "deploymentUid",
                "required": true,
                "schema": {
                    "example": "6692f820-c15c-4286-a405-38806b22064f",
                    "format": "uuid",
                    "type": "string"
                }
            },
            "EndTime": {
                "description": "Indicates the end of the time window to include objects from (non-inclusive).\n\n- Must be greater than `startTime`.\n- If `endTime` is not specified when `startTime` is present, `endTime` defaults to the current time.\n- In Events API requests, `endTime` must be provided if `startTime` was specified.\n- In Security Events API requests, `startTime` must be provided if `endTime` was specified.\n",
                "in": "query",
                "name": "endTime",
                "schema": {
                    "$ref": "#/components/schemas/Time"
                }
            },
            "Filter": {
                "description": "Filters results based on key value pairs.\n\nConsists of one or more predicates in the form  `\u003ckey\u003e\u003coperator\u003e\u003cvalue\u003e` where:\n- `\u003ckey\u003e` is the name of the dimension.\n- `\u003coperator\u003e` is one of the supported operators (`=`, `!=`, `\u003c`, `\u003c=`, `\u003e=` `\u003e`, `in` or `not`).\n- `\u003cvalue\u003e` is value of the dimension(s) that you want to filter on.\n- `\u003ckey\u003e and \u003cvalue\u003e` is case sensitive.\n\nFor example: 'count \u003e 100'\n\nPredicates can be combined into logical expressions using `OR`, `AND`, and `(` `)`.\nFor matching values, wildcard (`*`) use is supported.\n\nWrapping predicates in single quotes is required to ensure that the full query string is processed correctly.\n\nSee the Dimensions Catalog to find out more about Dimensions.\n\n- For SecOps APIs:\n  - Only the `=` operator is supported\n  - Catalog of dimensions is currently not available\n  - Available set of dimensions can be seen from the GUI\n",
                "in": "query",
                "name": "filter",
                "schema": {
                    "example": "((server_zone!='server_zone_1' OR server_zone='server_zone_2') AND nginx_id in ('id1', 'id2')) AND (system.tags!='*tag1*')",
                    "type": "string"
                }
            },
            "GroupNameFilter": {
                "description": "The group names to filter.\n",
                "in": "query",
                "name": "groupNameFilter",
                "schema": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "Hostname": {
                "description": "Filter systems by hostname value.",
                "in": "query",
                "name": "hostname",
                "schema": {
                    "example": "mycloud-east-1.mydomain.com,MYCLOUD-WEST-2.example.com",
                    "maxLength": 256,
                    "pattern": "^[A-Za-z0-9-\\.]+$",
                    "type": "string"
                }
            },
            "IncludeLogProfileContent": {
                "description": "Boolean indicating whether to include the profile content for each profile in a list of log profiles.",
                "in": "query",
                "name": "includeLogProfileContent",
                "schema": {
                    "default": false,
                    "type": "boolean"
                }
            },
            "IncludePolicyContent": {
                "description": "Boolean indicating whether or not to include the security policy content for each security policy when getting a list of security policies.",
                "in": "query",
                "name": "includePolicyContent",
                "schema": {
                    "default": false,
                    "type": "boolean"
                }
            },
            "IncludeTotal": {
                "description": "Defines if the Metadata should include the total count of events.\n",
                "in": "query",
                "name": "includeTotal",
                "schema": {
                    "default": false,
                    "example": true,
                    "type": "boolean"
                }
            },
            "InstGroupName": {
                "description": "The unique name of the NGINX instance group.",
                "in": "query",
                "name": "instGroupName",
                "schema": {
                    "type": "string"
                }
            },
            "InstGroupUid": {
                "description": "The unique ID of the NGINX instance group.",
                "explode": false,
                "in": "path",
                "name": "instGroupUid",
                "required": true,
                "schema": {
                    "format": "uuid",
                    "type": "string"
                },
                "style": "simple"
            },
            "InstLimit": {
                "description": "Size limit for the collection returned, used in pagination. Defaults to 25. A value of 0 indicates that no results are to be returned except for a total and count.",
                "in": "query",
                "name": "limit",
                "schema": {
                    "maximum": 99999,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "IsNewRevision": {
                "description": "Boolean indicating if the security policy being created is a new revision of an existing security policy.",
                "in": "query",
                "name": "isNewRevision",
                "schema": {
                    "default": false,
                    "type": "boolean"
                }
            },
            "Limit": {
                "description": "Size limit for the collection returned, used in pagination. Defaults to 25. A value of 0 indicates that no results are to be returned except for a total.",
                "in": "query",
                "name": "limit",
                "schema": {
                    "maximum": 50,
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "LogProfileName": {
                "description": "The name of the security log profile.",
                "in": "path",
                "name": "logProfileName",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "NAPOnly": {
                "description": "Filter instances to those having NGINX App Protect enabled.",
                "in": "query",
                "name": "napOnly",
                "schema": {
                    "type": "boolean"
                }
            },
            "NginxUid": {
                "description": "The ID of the NGINX instance.",
                "explode": false,
                "in": "path",
                "name": "nginxUid",
                "required": true,
                "schema": {
                    "example": "6692f820-c15c-4286-a405-38806b22064f",
                    "format": "uuid",
                    "type": "string"
                },
                "style": "simple"
            },
            "Offset": {
                "description": "Offset starting zero-based index to use for the collection returned, used in pagination. Defaults to 0.",
                "in": "query",
                "name": "offset",
                "schema": {
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "OrderBy": {
                "description": "Sorting for the collection returned, composed of one or more descending order by criteria. Format is \u003cfield\u003e-[asc,desc].",
                "example": "hostname-asc,mtime-desc",
                "in": "query",
                "name": "orderBy",
                "schema": {
                    "items": {
                        "pattern": "^[a-zA-Z]{1,}-[a-zA-Z]{1,}$",
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "Page": {
                "description": "page number",
                "in": "query",
                "name": "page",
                "schema": {
                    "default": 1,
                    "example": 1,
                    "type": "integer"
                }
            },
            "PageSize": {
                "description": "Defines the number of returned items per page.\n\n- The maximum value is 100. If value is greater, it is automatically set down to 100.\n- If `pageSize`=0, pagination is disabled and all Security Events will be returned in the response.\n- The response size is limited to 10,000 results. If the number of results exceeds 10,000 a warning is returned.\n",
                "in": "query",
                "name": "pageSize",
                "schema": {
                    "default": 100,
                    "example": 10,
                    "type": "integer"
                }
            },
            "PageToken": {
                "description": "Transactional token used for pagination.\n\nThe token ensures consistency of the query results across requests for various pages of data. It provides a snapshot of the database contents from the time at which the query was received.\n\nIf `pageToken` is not provided with a page request, a token is automatically generated and will be returned in the response metadata. You should include the token in subsequent requests for pages in the query results.\n\nSending a query without a `pageToken` refreshes the query results.\n",
                "in": "query",
                "name": "pageToken",
                "schema": {
                    "example": "1573653786",
                    "type": "string"
                }
            },
            "PolicyName": {
                "description": "The name for a specific security policy.",
                "in": "path",
                "name": "policyName",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Resolution": {
                "description": "Changes the granularity of the returned data. Applicaable only for endpoints that return time series data.\n\n- Must be a valid duration -- a string starting with a number followed by a unit of time (`y`, `M`, `w`, `d`, `h`, `m` or `s`).\n- When using a `resolution`, you must also provide a `startTime` and `endTime`.\n- If you do not provide a resolution, the default value of `1h` will be used.\n",
                "in": "query",
                "name": "resolution",
                "schema": {
                    "example": "30s",
                    "type": "string"
                }
            },
            "RevisionTimestamp": {
                "description": "The timestamp of the revision for the threat campaign or attack signature.",
                "in": "path",
                "name": "revisionTimestamp",
                "required": true,
                "schema": {
                    "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)\n",
                    "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                    "type": "string"
                }
            },
            "SecurityPolicyUID": {
                "description": "The globally unique identifier for a specific security policy.",
                "in": "path",
                "name": "securityPolicyUID",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "ShowDetails": {
                "description": "Return all system details in the response if set to true.",
                "in": "query",
                "name": "showDetails",
                "schema": {
                    "default": false,
                    "type": "boolean"
                }
            },
            "StartTime": {
                "description": "Indicates the start of the time window to include collection elements from (inclusive).\n\n- Must be provided if `endTime` was specified.\n- In Metrics API requests, if `startTime` is omitted, the last recorded value for the queried Metrics will be returned.\n- In Metrics API requests - for aggregated Metrics - you must provide `startTime` to calculate the resolution\n- In Events API requests, if you do not set a `startTime`, the most recent 100 Events will be returned\n- In SecOps API requests, `startTime` does not have a default value\n",
                "example": "now-5h",
                "in": "query",
                "name": "startTime",
                "schema": {
                    "$ref": "#/components/schemas/Time"
                }
            },
            "SystemUid": {
                "description": "The UID of the system.",
                "explode": false,
                "in": "path",
                "name": "systemUid",
                "required": true,
                "schema": {
                    "example": "6692f820-c15c-4286-a405-38806b22064f",
                    "format": "uuid",
                    "type": "string"
                },
                "style": "simple"
            },
            "Tags": {
                "description": "Filter systems by one or more tag values. Systems having no tags will be included.",
                "explode": false,
                "in": "query",
                "name": "tags",
                "schema": {
                    "example": "aws-east-1,aws-west-2",
                    "items": {
                        "type": "string"
                    },
                    "maxLength": 512,
                    "minLength": 1,
                    "pattern": "^[^\\s\\x00-\\x1f\\x60\\x7f\\,\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?=\u0026\\~\\^|#\u003c\u003e]+$",
                    "type": "array"
                },
                "style": "form"
            },
            "TemplateGroupName": {
                "description": "The name of the Template Groups.",
                "explode": false,
                "in": "path",
                "name": "templateGroupName",
                "required": true,
                "schema": {
                    "pattern": "^[^\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=\u0026\\~\\^|#\u003c\u003e]+$",
                    "type": "string"
                },
                "style": "simple"
            },
            "TemplateUid": {
                "description": "The uid of the Template.",
                "explode": false,
                "in": "path",
                "name": "templateUid",
                "required": true,
                "schema": {
                    "format": "uuid",
                    "type": "string"
                },
                "style": "simple"
            },
            "Versions": {
                "description": "String indicating that the versions for the security policy name should be returned.",
                "in": "query",
                "name": "versions",
                "schema": {
                    "type": "string"
                }
            },
            "count": {
                "description": "Specifies the desired maximum number of query results per page. A value of \"0\" indicates\nthat no resource results are to be returned except for \"totalResults\".\n",
                "in": "query",
                "name": "count",
                "schema": {
                    "minimum": 0,
                    "type": "integer"
                }
            },
            "featureName": {
                "description": "The name of the feature.\n",
                "in": "path",
                "name": "featureName",
                "required": true,
                "schema": {
                    "pattern": "^[^\\s\\x00-\\x1f\\x60\\x7f;\\\\*\"\\[\\]{}\\\\\\/%?:=\u0026~^|#\u003c\u003e]+$",
                    "type": "string"
                }
            },
            "groupName": {
                "description": "The name of the group.\n",
                "in": "path",
                "name": "groupName",
                "required": true,
                "schema": {
                    "pattern": "^[^\\x00-\\x1f\\x60\\x7f\\#\\,\\\"\\+\\\\;\u003c\u003e]+$",
                    "type": "string"
                }
            },
            "roleName": {
                "description": "The name of the Role.\n",
                "in": "path",
                "name": "name",
                "required": true,
                "schema": {
                    "pattern": "^[^A-Z\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=\u0026\\~\\^|#\u003c\u003e]+$",
                    "type": "string"
                }
            },
            "showDetails": {
                "description": "Return all feature details in the response if set to true.",
                "in": "query",
                "name": "showDetails",
                "schema": {
                    "default": false,
                    "type": "boolean"
                }
            },
            "source": {
                "description": "Filter for the type of users to return in the response.",
                "in": "query",
                "name": "source",
                "schema": {
                    "enum": [
                        "All",
                        "Internal",
                        "IDP"
                    ],
                    "type": "string"
                }
            },
            "startIndex": {
                "description": "The 1-based index of the first query result.",
                "in": "query",
                "name": "startIndex",
                "schema": {
                    "type": "integer"
                }
            },
            "userName": {
                "description": "The name for the User resource.\n",
                "in": "path",
                "name": "userName",
                "required": true,
                "schema": {
                    "pattern": "^[^A-Z\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=\u0026\\~\\^|#\u003c\u003e]+$",
                    "type": "string"
                }
            }
        },
        "responses": {
            "GroupsBadRequest": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3801,
                            "message": "Error parsing group from the request payload: bad request. Check that the request is well-formed, then try resending the request."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again.\n"
            },
            "GroupsConflict": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 8919,
                            "message": "Error creating group: group already exists."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request failed due to a conflict with an existing Authentication Group or Authentication Provider resource.\n"
            },
            "GroupsForbidden": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 403,
                            "message": "unauthorized"
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request failed due to insufficient privileges.\n"
            },
            "GroupsInternal": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3811,
                            "message": "Error upserting group: an internal error occurred while processing your request. Try resending the request."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request cannot be processed because of an internal server error.\n"
            },
            "GroupsNotFound": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 8920,
                            "message": "Error getting or deleting group: group not found."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The specified authentication group was not found.\n"
            },
            "GroupsUnauthorized": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 401,
                            "message": "authentication needed"
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "User authentication is invalid or missing.\n"
            },
            "InventoryBadRequest": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3801,
                            "message": "Error parsing request from the request payload: bad request. Check that the request is well-formed, then try resending the request."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again.\n"
            },
            "InventoryInternal": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3811,
                            "message": "Error getting inventory: an internal error occurred while processing your request. Try resending the request."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request cannot be processed because of an internal server error.\n"
            },
            "LicenseBadRequest": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 4578,
                            "details": [
                                {
                                    "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                                }
                            ],
                            "message": "Error processing the request: the license file has an invalid signature. Check if the license file is for NGINX Manager, then try again. If the issue continues, contact NGINX Support."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
            },
            "LicenseForbidden": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 403,
                            "message": "unauthorized"
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request failed due to insufficient privileges."
            },
            "LicenseInternal": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 4581,
                            "details": [
                                {
                                    "description": "The request cannot be processed because of an internal server error."
                                }
                            ],
                            "message": "An internal error occurred while processing the request. Try again later. If the issue continues, contact your system administrator or NGINX Support."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request cannot be processed because of an internal server error."
            },
            "LicenseUnauthorized": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 401,
                            "message": "authentication needed"
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "User authentication is invalid or missing."
            },
            "RolesBadRequest": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 100,
                            "details": [
                                {
                                    "description": "Request body has an error: doesn't match the schema: Error at \"/desiredState/permissions/0/access\":JSON value is not one of the allowed values\nSchema:\n  {\n    \"enum\": [\n      \"NONE\",\n      \"READ\",\n      \"WRITE\",\n      \"FULL\"\n    ],\n    \"type\": \"string\"\n  }\n\nValue:\n  \"DELETE\"\n"
                                }
                            ],
                            "message": "Failed to validate Request"
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again.\n"
            },
            "RolesConflict": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 8919,
                            "message": "Error creating role: role already exists."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request failed due to a conflict with an existing Role, Group, or User resource.\n"
            },
            "RolesForbidden": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 403,
                            "message": "unauthorized"
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request failed due to insufficient privileges.\n"
            },
            "RolesInternal": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 8913,
                            "message": "Failed to add permissions to database."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request cannot be processed because of an internal server error.\n"
            },
            "RolesNotFound": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 8920,
                            "message": "Error getting or deleting role: role not found."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The specified Role was not found.\n"
            },
            "RolesUnauthorized": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 401,
                            "message": "authentication needed"
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "User authentication is invalid or missing.\n"
            },
            "UserInfoForbidden": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 10003,
                            "message": "[group-does-not-exist]: no User Groups exist."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "User access if forbidden.\n"
            },
            "UserInfoInternalServerError": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3464,
                            "message": "Error getting user from the database."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request cannot be processed because of an internal server error.\n"
            },
            "UserInfoNotFound": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3472,
                            "message": "User not found."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The specified User resource was not found.\n"
            },
            "UserInfoUnauthorized": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3463,
                            "message": "Authentication failed. Please log in and try again."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "User authentication is invalid or missing.\n"
            },
            "UsersBadRequest": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3457,
                            "message": "Error parsing the user to create from the request payload."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again.\n"
            },
            "UsersConflict": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3469,
                            "message": "Error creating user: user already exists."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request failed due to a conflict with an existing User resource.\n"
            },
            "UsersForbidden": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 1235,
                            "message": "user is not authorized"
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request failed due to insufficient privileges.\n"
            },
            "UsersInternal": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3464,
                            "message": "Error getting users from the database."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The request cannot be processed because of an internal server error.\n"
            },
            "UsersNotFound": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3472,
                            "message": "Error getting user: user not found."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "The specified User resource was not found.\n"
            },
            "UsersUnauthorized": {
                "content": {
                    "application/json": {
                        "example": {
                            "code": 3463,
                            "message": "No session cookie found in the request header."
                        },
                        "schema": {
                            "$ref": "#/components/schemas/ErrorModel"
                        }
                    }
                },
                "description": "User authentication is invalid or missing.\n"
            }
        },
        "schemas": {
            "AccessLog": {
                "description": "Access log\n",
                "properties": {
                    "format": {
                        "description": "Format of the log file",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the log file",
                        "type": "string"
                    },
                    "permissions": {
                        "description": "Permissions of the log file",
                        "type": "string"
                    },
                    "readable": {
                        "description": "Indicates whether log file is readable",
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "format",
                    "permissions",
                    "readable"
                ],
                "type": "object"
            },
            "AccessLogs": {
                "description": "Array of Access Logs",
                "items": {
                    "$ref": "#/components/schemas/AccessLog"
                },
                "type": "array"
            },
            "AccessType": {
                "description": "Access determines the Role's ability to access a path or object. The options are:\n* CREATE: Has create only access (HTTP POST requests)\n* READ: Has read only access (HTTP GET requests)\n* UPDATE: Has update only access (HTTP PUT requests)\n* DELETE: Has delete only access (HTTP DELETE requests)\n",
                "enum": [
                    "CREATE",
                    "READ",
                    "UPDATE",
                    "DELETE"
                ],
                "type": "string"
            },
            "Agent": {
                "description": "The properties of the NGINX controller agent running on the system.",
                "example": {
                    "accessibleDirs": "/etc/nginx:/usr/local/etc/nginx",
                    "version": "3.17.16"
                },
                "properties": {
                    "accessibleDirs": {
                        "description": "The directories of Controller Agent that is allowed accessing to.",
                        "type": "string"
                    },
                    "version": {
                        "description": "The version of Controller Agent that is currently running on the instance.",
                        "type": "string"
                    }
                },
                "required": [
                    "version",
                    "accessibleDirs"
                ],
                "type": "object"
            },
            "AggregateMetrics": {
                "description": "Lists the aggregate value for Nginx Plus instance usage over a given time period. The default time period is 1h.\n",
                "properties": {
                    "timestamps": {
                        "description": "Returns the list of timestamp datapoints for every hour for instances.\n",
                        "example": [
                            "2019-08-07T09:57:30Z",
                            "2019-08-07T10:57:35Z"
                        ],
                        "items": {
                            "format": "date-time",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "values": {
                        "description": "Returns the unique count of all active Nginx plus instances corresponding to the timestamp.\n",
                        "example": [
                            4,
                            4
                        ],
                        "items": {
                            "format": "int64",
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "AnalysisResponse": {
                "description": "Defines result of NGINX configuration analysis.\n",
                "properties": {
                    "staticAnalysis": {
                        "$ref": "#/components/schemas/StaticAnalysis"
                    }
                },
                "required": [
                    "staticAnalysis"
                ],
                "type": "object"
            },
            "AnalyzeFile": {
                "additionalProperties": false,
                "description": "Configuration file(s) to analyze.",
                "properties": {
                    "contents": {
                        "description": "The base64 encoded contents of the file.",
                        "maxLength": 3000000,
                        "type": "string"
                    },
                    "name": {
                        "description": "Absolute path of the configuration file.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "contents"
                ],
                "type": "object"
            },
            "AppProtect": {
                "description": "This object represents the state of NGINX App Protect. It lets you look up the App Protect system status and which versions of App Protect and related Threat Campaigns and Attack Signatures are installed.",
                "properties": {
                    "attackSignatureVersion": {
                        "description": "The NGINX App Protect Attack Signature version",
                        "type": "string"
                    },
                    "status": {
                        "description": "The NGINX App Protect status.\n- inactive: Indicates that App Protect is installed but not enabled.\n- active: Indicates that App Protect is installed and enabled.\n",
                        "enum": [
                            "inactive",
                            "active"
                        ],
                        "type": "string"
                    },
                    "threatCampaignVersion": {
                        "description": "The NGINX App Protect Threat Campaign version",
                        "type": "string"
                    },
                    "version": {
                        "description": "The NGINX App Protect version",
                        "type": "string"
                    }
                },
                "required": [
                    "version",
                    "threatCampaignVersion",
                    "attackSignatureVersion",
                    "status"
                ],
                "type": "object"
            },
            "AttackSignatureAssociationDetails": {
                "description": "The attack signature revision association details.",
                "properties": {
                    "attackSignatureVersionDateTime": {
                        "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)",
                        "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    },
                    "instance": {
                        "$ref": "#/components/schemas/InstanceAssoc"
                    },
                    "instanceGroup": {
                        "$ref": "#/components/schemas/InstanceGroupAssoc"
                    }
                },
                "required": [
                    "attackSignatureVersionDateTime",
                    "instanceGroup",
                    "instance"
                ],
                "type": "object"
            },
            "AttackSignatureCreateRequest": {
                "properties": {
                    "filename": {
                        "description": "Single tgz file containing the attack signature, update and version files.\n\nThe contents of the .tgz are listed below and typically come from a rpm/deb downloaded install package \nlocated on a system (not NMS). All the below files must be included in the .tgz:\n\n - signatures.bin.tgz\n - signature_update.yaml\n - version\n",
                        "format": "binary",
                        "type": "string"
                    },
                    "revisionTimestamp": {
                        "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)\n",
                        "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    }
                },
                "required": [
                    "revisionTimestamp",
                    "filename"
                ],
                "type": "object"
            },
            "AttackSignatureDeploymentAssocResponse": {
                "properties": {
                    "associations": {
                        "description": "The list of attack signature associations.",
                        "items": {
                            "$ref": "#/components/schemas/AttackSignatureAssociationDetails"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "associations"
                ],
                "type": "object"
            },
            "AttackSignatureDeploymentCount": {
                "description": "The attack signature revision and number of deployments.",
                "properties": {
                    "attackSignatureVersionDateTime": {
                        "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)",
                        "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    },
                    "deployedCount": {
                        "type": "integer"
                    }
                },
                "required": [
                    "attackSignatureVersionDateTime",
                    "deployedCount"
                ],
                "type": "object"
            },
            "AttackSignatureDeploymentsCountResponse": {
                "properties": {
                    "versions": {
                        "description": "The list of attack signature versions.",
                        "items": {
                            "$ref": "#/components/schemas/AttackSignatureDeploymentCount"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "versions"
                ],
                "type": "object"
            },
            "AttackSignatureLibrary": {
                "description": "Reference to an object that defines a collection of attack signatures.\n",
                "properties": {
                    "uid": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "versionDateTime": {
                        "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)",
                        "pattern": "^$|\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AttackSignatureResponse": {
                "properties": {
                    "revisionTimestamp": {
                        "description": "The timestamp of the revision for the attack signature.",
                        "example": "2022.04.12",
                        "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The globally unique identifier for the attack signature.",
                        "example": "21daa130-4ba4-442b-bc4e-ab294af123e5",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "revisionTimestamp",
                    "uid"
                ],
                "type": "object"
            },
            "AttackSignaturesList": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/AttackSignatureResponse"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "AuxData": {
                "description": "Auxiliary configuration files.",
                "properties": {
                    "files": {
                        "description": "Array of auxiliary files that the configuration requires.",
                        "items": {
                            "$ref": "#/components/schemas/FileData"
                        },
                        "type": "array"
                    },
                    "rootDir": {
                        "description": "Root directory of the files contained within the payload.\n",
                        "maxLength": 4096,
                        "type": "string"
                    }
                },
                "required": [
                    "rootDir",
                    "files"
                ],
                "type": "object"
            },
            "AuxUploadResult": {
                "properties": {
                    "auxUploadResult": {
                        "$ref": "#/components/schemas/UploadResult"
                    }
                },
                "required": [
                    "auxUploadResult"
                ],
                "type": "object"
            },
            "BotApplicationResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an application",
                        "example": "Chrome",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "hits"
                ],
                "type": "object"
            },
            "BotCategoryResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the category",
                        "example": "untrusted-bot",
                        "type": "string"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "BotClassResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the class",
                        "example": "suspicious",
                        "type": "string"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "BotSignatureResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the signature",
                        "example": "curl",
                        "type": "string"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "BuildInfo": {
                "properties": {
                    "nginxPlus": {
                        "description": "True if this is an NGINX Plus instance",
                        "type": "boolean"
                    },
                    "release": {
                        "description": "NGINX Plus release string, only present for NGINX Plus instances",
                        "type": "string"
                    },
                    "version": {
                        "description": "Base Open Source NGINX version",
                        "type": "string"
                    }
                },
                "required": [
                    "version",
                    "nginxPlus"
                ],
                "type": "object"
            },
            "CPUCache": {
                "description": "Information about CPU cache layout and sizes.",
                "properties": {
                    "l1D": {
                        "description": "Level 1 data cache size.",
                        "type": "string"
                    },
                    "l1I": {
                        "description": "Level 1 instruction cache size.",
                        "type": "string"
                    },
                    "l2": {
                        "description": "Level 2 shared cache size.",
                        "type": "string"
                    },
                    "l3": {
                        "description": "Level 3 shared cache size."
                    }
                },
                "type": "object"
            },
            "CPUInfo": {
                "description": "System CPU details.",
                "example": {
                    "architecture": "x86_64",
                    "cache": {
                        "l1D": "128 KiB",
                        "l1I": "128 KiB",
                        "l2": "1 MiB",
                        "l3": "32 MiB"
                    },
                    "cores": 4,
                    "cpus": 4,
                    "hypervisor": "KVM",
                    "mhz": "2499.998"
                },
                "properties": {
                    "architecture": {
                        "description": "Processor architecture.",
                        "type": "string"
                    },
                    "cache": {
                        "$ref": "#/components/schemas/CPUCache"
                    },
                    "cores": {
                        "description": "Number of CPU cores",
                        "type": "integer"
                    },
                    "cpus": {
                        "description": "Number of logical processors",
                        "type": "integer"
                    },
                    "hypervisor": {
                        "description": "The hypervisor this system is running on",
                        "type": "string"
                    },
                    "mhz": {
                        "description": "The processor speed.",
                        "format": "double",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "CVE": {
                "properties": {
                    "advisory": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "description",
                    "severity"
                ],
                "type": "object"
            },
            "CVEResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "example": "CVE-2021-1234",
                        "type": "string"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "Cert": {
                "properties": {
                    "certMetadata": {
                        "description": "Public certificate metadata.",
                        "items": {
                            "$ref": "#/components/schemas/CertMetadata"
                        },
                        "type": "array"
                    },
                    "certPEMDetails": {
                        "$ref": "#/components/schemas/PEM"
                    },
                    "certPKCS12Details": {
                        "$ref": "#/components/schemas/PKCS12"
                    },
                    "certRemoteFileDetails": {
                        "$ref": "#/components/schemas/RemoteFile"
                    },
                    "created": {
                        "description": "Time at which the cert was created.",
                        "example": "2021-08-30T23:09:58.403Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "instanceDeployments": {
                        "description": "Deployment identifiers for updates to instanceRefs. Not returned by GET requests.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "instanceRefs": {
                        "description": "References to instance where the cert is current linked or discovered on.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "modified": {
                        "description": "Time at which the cert was last modified.",
                        "example": "2021-08-30T23:09:58.403Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "example": "cert-pem-01",
                        "type": "string"
                    },
                    "serialNumber": {
                        "description": "Unique identifier for the cert.",
                        "example": "71283929",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The globally unique identifier for the cert. SerialNumber as unique identifier for certs will be deprecated in a future release.",
                        "type": "string"
                    },
                    "validFrom": {
                        "description": "The start of the validity period for the certificate.",
                        "example": "2019-07-29T09:12:33.001Z",
                        "type": "string"
                    },
                    "validTo": {
                        "description": "The end of the validity period for the certificate.",
                        "example": "2029-07-29T09:12:33.001Z",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "CertList": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Cert"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "CertMetadata": {
                "description": "Public certificate metadata.",
                "properties": {
                    "authorityKeyIdentifier": {
                        "description": "The identifier of the signing authority for the certificate.",
                        "example": "2B D0 69 47 94 76 09 FE F4 6B 8D 2E 40 A6 F7 47 4D 7F 08 5E",
                        "type": "string"
                    },
                    "commonName": {
                        "description": "The Common Name (CN) for the certificate. This is typically a Fully Qualified Domain Name (FQDN), and must be the same as the web address users access when connecting to a web site.",
                        "example": "www.myapp.com",
                        "type": "string"
                    },
                    "expired": {
                        "description": "Indicates the expiration status of the certificate.",
                        "example": false,
                        "type": "boolean"
                    },
                    "expiry": {
                        "description": "The number of seconds until the certificate will expire.",
                        "example": 35500034,
                        "type": "integer"
                    },
                    "issuer": {
                        "description": "Identifies the entity who signed and issued the certificate.",
                        "example": "DigiCert Class 3 Extended Validation SSL SGC CA.",
                        "type": "string"
                    },
                    "publicKeyType": {
                        "description": "Identifies the encryption algorithm used to create the public key for the certificate.",
                        "example": "RSA (2048 Bits)",
                        "type": "string"
                    },
                    "serialNumber": {
                        "description": "A unique identifier for the certificate.",
                        "example": "16469416336579571270",
                        "type": "string"
                    },
                    "signatureAlgorithm": {
                        "description": "Identifies the algorithm used to sign the certificate.",
                        "example": "SHA-256",
                        "type": "string"
                    },
                    "subject": {
                        "description": "Contains the Distinguished Name (DN) information for the certificate.",
                        "example": "www.myapp.com",
                        "type": "string"
                    },
                    "subjectAlternativeName": {
                        "description": "Defines additional identifies bound to the subject of the certificate. For example, the DNS name is used to add addtional domain names to a certificate.",
                        "example": "DNS Name=static.xxxx",
                        "type": "string"
                    },
                    "subjectKeyIdentifier": {
                        "description": "A hash value of the SSL certificate that can be used to identify certificates that contain a particular public key.",
                        "example": "31 EA 76 A9 23 74 A5 DF D4 FD EE A0 C1 A6 9E C6 11 0E 11 EC",
                        "type": "string"
                    },
                    "thumbprint": {
                        "description": "A hash to ensure that the certificate has not been modified.",
                        "example": "E6 A7 87 96 E0 C7 A3 E5 43 78 35 CA 16 78 5B 48 5A A9 DD C4 5C CD 0A 65 AA 89 33 E3 C3 D0 89 71",
                        "type": "string"
                    },
                    "thumbprintAlgorithm": {
                        "description": "Defines the algorithm used to hash the certificate.",
                        "example": "SHA-1",
                        "type": "string"
                    },
                    "validFrom": {
                        "description": "The start of the validity period for the certificate.",
                        "example": "2019-07-29T09:12:33.001Z",
                        "type": "string"
                    },
                    "validTo": {
                        "description": "The end of the validity period for the certificate.",
                        "example": "2029-07-29T09:12:33.001Z",
                        "type": "string"
                    },
                    "version": {
                        "description": "The version of the certificate, typically 3 for X.509 certificates.",
                        "example": 3,
                        "type": "integer"
                    }
                },
                "required": [
                    "authorityKeyIdentifier",
                    "commonName",
                    "expired",
                    "expiry",
                    "issuer",
                    "publicKeyType",
                    "serialNumber",
                    "signatureAlgorithm",
                    "subject",
                    "subjectAlternativeName",
                    "subjectKeyIdentifier",
                    "thumbprint",
                    "thumbprintAlgorithm",
                    "validFrom",
                    "validTo",
                    "version"
                ],
                "type": "object"
            },
            "CertificateDates": {
                "description": "The validity period for a certificate is the period of time from\n   notBefore through notAfter, inclusive.\n",
                "properties": {
                    "notAfter": {
                        "description": "end epoch time in which the certificate is valid",
                        "type": "integer"
                    },
                    "notBefore": {
                        "description": "start epoch time in which the certificate is valid",
                        "type": "integer"
                    }
                },
                "required": [
                    "notBefore",
                    "notAfter"
                ],
                "type": "object"
            },
            "CertificateName": {
                "description": "Issuer or subject details\n",
                "properties": {
                    "commonName": {
                        "description": "Common name",
                        "type": "string"
                    },
                    "country": {
                        "description": "Country",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "locality": {
                        "description": "Locality",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "organization": {
                        "description": "Organization",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "organizationUnit": {
                        "description": "Organization Unit",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "description": "State",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "commonName"
                ],
                "type": "object"
            },
            "ConfigAnalysisRequest": {
                "additionalProperties": false,
                "description": "Defines the configuration file to be analyzed.\n",
                "properties": {
                    "completeConfig": {
                        "default": true,
                        "description": "The uploaded set of files represent a complete configuration.  Set this property to false to analyze\na single configuration file.\n",
                        "type": "boolean"
                    },
                    "files": {
                        "description": "The list of NGINX configuration files to be analyzed.",
                        "items": {
                            "$ref": "#/components/schemas/AnalyzeFile"
                        },
                        "minItems": 1,
                        "type": "array"
                    },
                    "rootDir": {
                        "default": "/etc/nginx",
                        "description": "The root path of NGINX configuration.",
                        "type": "string"
                    }
                },
                "required": [
                    "rootDir",
                    "files"
                ],
                "type": "object"
            },
            "ConfigCondition": {
                "properties": {
                    "message": {
                        "description": "A human-readable message that provides additional information about the configuration operation.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The condition type.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ConfigData": {
                "description": "NGINX configuration files.",
                "properties": {
                    "files": {
                        "description": "Array of files that make up the configuration.",
                        "items": {
                            "$ref": "#/components/schemas/FileData"
                        },
                        "type": "array"
                    },
                    "rootDir": {
                        "description": "Root directory of the files contained within the payload.\n",
                        "maxLength": 4096,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "rootDir",
                    "files"
                ],
                "type": "object"
            },
            "ConfigState": {
                "description": "A representation of the resource's current configuration state\nthat comprises the status of the resource itself (`selfConfigState`) and any child\nresources (`childrenConfigState`).\n\nThe conditions array provides additional information during configuration changes.\n",
                "properties": {
                    "childrenConfigState": {
                        "$ref": "#/components/schemas/ConfigStateTally"
                    },
                    "conditions": {
                        "items": {
                            "$ref": "#/components/schemas/ConfigCondition"
                        },
                        "type": "array"
                    },
                    "selfConfigState": {
                        "$ref": "#/components/schemas/ConfigStateTally"
                    }
                },
                "type": "object"
            },
            "ConfigStateTally": {
                "properties": {
                    "configured": {
                        "description": "The number of resources that have a complete and valid configuration.",
                        "type": "integer"
                    },
                    "configuring": {
                        "description": "The number of resources that are in the process of being configured.",
                        "type": "integer"
                    },
                    "deleting": {
                        "description": "The number of resources that are in the process of being deleted.",
                        "type": "integer"
                    },
                    "error": {
                        "description": "The number of resources that have encountered an error during the configuration process.",
                        "type": "integer"
                    },
                    "isConfigured": {
                        "description": "The configuration operation is complete.",
                        "type": "boolean"
                    },
                    "isConfiguring": {
                        "description": "The configuration of the resource, or of its child(ren), is in process.",
                        "type": "boolean"
                    },
                    "isDeleting": {
                        "description": "A delete operation is in progress for the resource or its child(ren).",
                        "type": "boolean"
                    },
                    "isError": {
                        "description": "An error occurred while configuring the resource or its child(ren).",
                        "type": "boolean"
                    },
                    "total": {
                        "description": "The total number of resources to which the configuration operation applies.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ConfigUploadResult": {
                "properties": {
                    "configUploadResult": {
                        "$ref": "#/components/schemas/UploadResult"
                    }
                },
                "required": [
                    "configUploadResult"
                ],
                "type": "object"
            },
            "ConfigsResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SavedNginxConfigSummary"
                    },
                    {
                        "$ref": "#/components/schemas/SavedNginxConfigFiles"
                    }
                ]
            },
            "Country": {
                "properties": {
                    "code": {
                        "description": "ISO-3166-1 format based on MaxMind GeoIP Country Code Database.",
                        "example": "CA",
                        "type": "string"
                    },
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "code",
                    "hits",
                    "ips",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "CreateInstanceGroupRequest": {
                "description": "Defines an add instance group request.\n",
                "properties": {
                    "description": {
                        "description": "The description of this NGINX instance group.",
                        "maxLength": 1024,
                        "type": "string"
                    },
                    "displayName": {
                        "description": "User friendly NGINX instance group name.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "The unique name for this group. This cannot be changed after creation.",
                        "maxLength": 1024,
                        "minLength": 1,
                        "pattern": "^[^\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=\u0026\\~\\^|#\u003c\u003e]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "CreateUser": {
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "userDef": {
                        "$ref": "#/components/schemas/CreateUserDef"
                    }
                },
                "required": [
                    "metadata",
                    "userDef"
                ],
                "type": "object"
            },
            "CreateUserDef": {
                "properties": {
                    "account": {
                        "deprecated": true,
                        "description": "The account number of the tenant.",
                        "example": 1,
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "email": {
                        "description": "An email address of the account owner.",
                        "example": "john.doe@nginx.com",
                        "format": "email",
                        "type": "string"
                    },
                    "firstName": {
                        "description": "Given name.",
                        "example": "John",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "id": {
                        "description": "Account ID",
                        "example": 123,
                        "type": "integer"
                    },
                    "isEnabled": {
                        "default": false,
                        "description": "Indicates if the account is enabled.",
                        "type": "boolean"
                    },
                    "lastLogin": {
                        "description": "Unix time (seconds since Epoch) of last login.",
                        "example": 1570132969,
                        "type": "integer"
                    },
                    "lastName": {
                        "description": "Surname.",
                        "example": "Doe",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "roles": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "firstName",
                    "lastName",
                    "email"
                ],
                "type": "object"
            },
            "CurrentInstance": {
                "properties": {
                    "configState": {
                        "$ref": "#/components/schemas/ConfigState"
                    },
                    "features": {
                        "description": "List of the available features and their current usage.",
                        "items": {
                            "$ref": "#/components/schemas/FeatureStatus"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the current instance.",
                        "example": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                        "format": "uuid",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/LicenseStatus"
                    },
                    "telemetryLastReported": {
                        "description": "Date and time when telemetry data was last reported from the current instance. Represented in Coordinated Universal Time (UTC), specifically using the ISO 8601 standard.",
                        "example": "1996-02-26T00:00:00.000Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "type": {
                        "description": "Product type.",
                        "example": "NGINX Manager",
                        "type": "string"
                    },
                    "version": {
                        "description": "Product version.",
                        "example": "3.3.0",
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "version",
                    "status",
                    "features",
                    "configState"
                ],
                "type": "object"
            },
            "CurrentStatus": {
                "properties": {
                    "entitlement": {
                        "$ref": "#/components/schemas/Entitlement"
                    },
                    "state": {
                        "$ref": "#/components/schemas/State"
                    },
                    "subscription": {
                        "$ref": "#/components/schemas/Subscription"
                    }
                },
                "type": "object"
            },
            "DeploymentDetail": {
                "description": "Additional deployment details for the NGINX instances in the group.\n",
                "properties": {
                    "error": {
                        "type": "string"
                    },
                    "failure": {
                        "description": "The NGINX instance that reported an error during deployment.",
                        "items": {
                            "$ref": "#/components/schemas/InstanceStatus"
                        },
                        "type": "array"
                    },
                    "pending": {
                        "description": "The NGINX instance in the deployment that has not reported status and reached a resolution.",
                        "items": {
                            "$ref": "#/components/schemas/InstanceActivityStatus"
                        },
                        "type": "array"
                    },
                    "success": {
                        "description": "The NGINX instance that reported a success during deployment.",
                        "items": {
                            "$ref": "#/components/schemas/InstanceStatus"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "success",
                    "failure",
                    "pending"
                ],
                "type": "object"
            },
            "DeploymentDetails": {
                "description": "Report outcome of a Publish request for an NGINX instance or Instance Group.\n",
                "properties": {
                    "createTime": {
                        "description": "The time when deployment was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/DeploymentDetail"
                    },
                    "id": {
                        "type": "string"
                    },
                    "message": {
                        "description": "Text description of the deployment outcome.",
                        "type": "string"
                    },
                    "status": {
                        "description": "The possible statuses are listed below\n* unknown: publish initiated but never processed\n* finalized: final outcome can be determined by the details (success/failure)\n* pending: deployment is paused and waiting for additional payloads to be available\nDeployment in pending state could be due to: config validation taking longer than expected; waiting on\nadditional payloads to be ready before proceeding.\n",
                        "enum": [
                            "unknown",
                            "finalized",
                            "pending"
                        ],
                        "type": "string"
                    },
                    "updateTime": {
                        "description": "The time when deployment state was last modified.",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "message",
                    "id",
                    "status",
                    "createTime",
                    "updateTime",
                    "details"
                ],
                "type": "object"
            },
            "DesiredState": {
                "properties": {
                    "content": {
                        "description": "Redacted license information.",
                        "format": "password",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DimensionDescriptionRecord": {
                "properties": {
                    "description": {
                        "example": "Instance name.",
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "metrics": {
                        "description": "An array of the Metrics that the Dimensions resource applies to.",
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        },
                        "type": "array"
                    },
                    "modules": {
                        "default": [
                            "platform"
                        ],
                        "description": "The non-empty set of modules the dimension belongs to.",
                        "example": [
                            "adc",
                            "apim",
                            "platform"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "name": {
                        "example": "instance",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "string",
                            "int",
                            "list"
                        ],
                        "example": "string",
                        "type": "string"
                    }
                },
                "required": [
                    "metadata"
                ],
                "type": "object"
            },
            "DimensionDescriptionResponse": {
                "$ref": "#/components/schemas/DimensionDescriptionRecord"
            },
            "DimensionsDescriptionsResponse": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/DimensionDescriptionRecord"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Directory": {
                "description": "Information about a directory\n",
                "properties": {
                    "files": {
                        "items": {
                            "$ref": "#/components/schemas/FileData"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the directory",
                        "type": "string"
                    },
                    "permissions": {
                        "description": "directory permissions assigned",
                        "format": "binary",
                        "type": "string"
                    },
                    "size": {
                        "description": "The file size in bytes",
                        "type": "integer"
                    },
                    "updateTime": {
                        "description": "Modified time of the file",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "updateTime",
                    "permissions",
                    "size",
                    "files"
                ],
                "type": "object"
            },
            "DirectoryMap": {
                "additionalProperties": {
                    "$ref": "#/components/schemas/Directory"
                }
            },
            "DiskPartition": {
                "description": "Disk partitions and filesystem information.",
                "example": {
                    "device": "/dev/sda1",
                    "fsType": "ext4",
                    "mountPoint": "/"
                },
                "properties": {
                    "device": {
                        "description": "The block special device name.",
                        "type": "string"
                    },
                    "fsType": {
                        "description": "The filesystem type.",
                        "type": "string"
                    },
                    "mountPoint": {
                        "description": "The partition mount point.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Endpoint": {
                "properties": {
                    "ip": {
                        "description": "The IP address of a remote host.",
                        "format": "ipv4",
                        "type": "string"
                    },
                    "port": {
                        "description": "The port of a remote host.",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "ip",
                    "port"
                ],
                "type": "object"
            },
            "Entitlement": {
                "description": "Defines the elements of an entitlement.",
                "properties": {
                    "features": {
                        "description": "Product features.",
                        "items": {
                            "$ref": "#/components/schemas/Feature"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "features"
                ],
                "type": "object"
            },
            "ErrorDetail": {
                "properties": {
                    "description": {
                        "description": "A detailed error message returned by the server.\n\nThese messages contain the following information, where applicable:\n\n- What happened.\n- Why it happened.\n- What the consequences are (if any).\n- Recommended action to take to resolve the issue.\n",
                        "example": "Error doing \u003caction\u003e: \u003creason for error\u003e. This can lead to \u003cpotential consequences\u003e. Try \u003caction\u003e to resolve the issue.",
                        "type": "string"
                    }
                },
                "required": [
                    "description"
                ],
                "type": "object"
            },
            "ErrorLog": {
                "description": "Error log\n",
                "properties": {
                    "logLevel": {
                        "description": "Log level of the log file",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the error file",
                        "type": "string"
                    },
                    "permissions": {
                        "description": "Permissions of the log file",
                        "type": "string"
                    },
                    "readable": {
                        "description": "Indicates whether log file is readable",
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "logLevel",
                    "permissions",
                    "readable"
                ],
                "type": "object"
            },
            "ErrorLogs": {
                "description": "Array of Error Logs",
                "items": {
                    "$ref": "#/components/schemas/ErrorLog"
                },
                "type": "array"
            },
            "ErrorModel": {
                "properties": {
                    "code": {
                        "description": "A numeric error code that can be used to identify errors for support purposes.\n",
                        "example": 1234567,
                        "type": "integer"
                    },
                    "details": {
                        "items": {
                            "$ref": "#/components/schemas/ErrorDetail"
                        },
                        "type": "array"
                    },
                    "message": {
                        "description": "A human-readable message, in English, that describes the error.\n",
                        "example": "Error doing \u003caction\u003e.",
                        "type": "string"
                    }
                },
                "required": [
                    "message",
                    "code"
                ],
                "type": "object"
            },
            "ErrorSummary": {
                "properties": {
                    "errorCount": {
                        "type": "integer"
                    }
                },
                "required": [
                    "errorCount"
                ],
                "type": "object"
            },
            "Event": {
                "description": "An Event is a system message.",
                "properties": {
                    "action_outcome": {
                        "example": "success",
                        "type": "string"
                    },
                    "action_type": {
                        "example": "login",
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "correlationId": {
                        "example": "e5f355e4de82edd0afcd74ef6c1ee6aa",
                        "type": "string"
                    },
                    "count": {
                        "example": 99,
                        "type": "integer"
                    },
                    "dimensions": {
                        "type": "object"
                    },
                    "error": {
                        "type": "string"
                    },
                    "id": {
                        "example": "00112233-4455-6677-8899-aabbccddeeff",
                        "format": "uuid",
                        "type": "string"
                    },
                    "level": {
                        "enum": [
                            "DEBUG",
                            "INFO",
                            "WARNING",
                            "ERROR",
                            "CRITICAL"
                        ],
                        "example": "INFO",
                        "type": "string"
                    },
                    "message": {
                        "example": "nginx stub_status detected, https://127.0.0.1:443/basic_status",
                        "type": "string"
                    },
                    "resource_name": {
                        "example": "datadog-forwarder",
                        "type": "string"
                    },
                    "status": {
                        "example": "success",
                        "type": "string"
                    },
                    "timestamp": {
                        "example": "2019-08-07T09:57:36.088757764Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "user": {
                        "example": "admin@nginx.test",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EventDescriptionRecord": {
                "properties": {
                    "dimensions": {
                        "description": "An array of the Dimensions that apply to an Event resource.",
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "modules": {
                        "default": [
                            "platform"
                        ],
                        "description": "The non-empty set of modules the event belongs to.",
                        "example": [
                            "adc",
                            "apim",
                            "platform"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "metadata"
                ],
                "type": "object"
            },
            "EventQueryResult": {
                "properties": {
                    "Metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Event"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "EventsDescriptionsResponse": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/EventDescriptionRecord"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "FactoryFeature": {
                "description": "The factory features available for permission assignment",
                "enum": [
                    "NGINX-PLUS-USAGE",
                    "LICENSING",
                    "USER-MANAGEMENT",
                    "CERTS",
                    "STAGED-CONFIGS",
                    "INSTANCE-GROUPS",
                    "INSTANCE-MANAGEMENT",
                    "SCAN",
                    "ANALYTICS",
                    "TEMPLATES",
                    "SECURITY-POLICIES",
                    "SECURITY-MONITORING"
                ],
                "type": "string"
            },
            "Feature": {
                "description": "Defines a product feature, consumption metric, and metric usage limit.",
                "properties": {
                    "expiry": {
                        "description": "The date on which the license expires. Represented in Coordinated Universal Time (UTC), specifically using the ISO 8601 standard.",
                        "example": "1996-02-26T00:00:00.000Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "gracePeriodDays": {
                        "description": "Number of grace period days after the license expires.",
                        "example": 30,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "id": {
                        "$ref": "#/components/schemas/FeatureID"
                    },
                    "limit": {
                        "description": "Maximum limit for the consumption metric.",
                        "example": 1,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the feature.",
                        "example": "NGINX Manager Load Balancing",
                        "type": "string"
                    },
                    "type": {
                        "description": "The license type.",
                        "enum": [
                            "PRODUCTION",
                            "BETA",
                            "INTERNAL",
                            "PARTNER",
                            "TRIAL",
                            "PAID",
                            "EVAL"
                        ],
                        "example": "PAID",
                        "type": "string"
                    },
                    "unitOfMeasure": {
                        "$ref": "#/components/schemas/UnitOfMeasure"
                    },
                    "unlimited": {
                        "description": "Indicates whether there is a limit for the consumption metric or not.",
                        "example": true,
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "unitOfMeasure",
                    "id",
                    "type"
                ],
                "type": "object"
            },
            "FeatureID": {
                "description": "Unique identifier for a product feature.",
                "enum": [
                    "UNKNOWN",
                    "ADC",
                    "APIM",
                    "ANALYTICS",
                    "INSTANCE_MANAGER",
                    "APPSEC",
                    "APIMS"
                ],
                "example": "ADC",
                "type": "string"
            },
            "FeatureStatus": {
                "properties": {
                    "aggregateNginxPlusUsed": {
                        "description": "Amount of the Nginx Plus instances used by all NGINX Manager instances in the bucket. Only applicable to core Nginx Manager license.",
                        "example": 1,
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "aggregateUsed": {
                        "description": "Amount of the feature used by all NGINX Manager instances in the bucket.",
                        "example": 1,
                        "minimum": 0,
                        "type": "number"
                    },
                    "daysUntilExpiry": {
                        "description": "Defines when the current entitlement expires.",
                        "example": 20,
                        "minimum": 0,
                        "type": "integer"
                    },
                    "gracePeriodRemainingDays": {
                        "description": "Defines the remaining grace period days after the license expires.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "id": {
                        "$ref": "#/components/schemas/FeatureID"
                    },
                    "name": {
                        "description": "Name of the product feature.",
                        "example": "NGINX Manager Load Balancing",
                        "type": "string"
                    },
                    "nginxPlusUsed": {
                        "description": "Amount of the Nginx Plus instances used by the current NGINX Manager instance. Only applicable to core Nginx Manager license.",
                        "example": 1,
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "remaining": {
                        "description": "Amount of the feature remaining.",
                        "example": 1,
                        "minimum": 0,
                        "type": "number"
                    },
                    "unitOfMeasure": {
                        "$ref": "#/components/schemas/UnitOfMeasure"
                    },
                    "used": {
                        "description": "Amount of the feature used by the current NGINX Manager instance.",
                        "example": 1,
                        "minimum": 0,
                        "type": "number"
                    }
                },
                "required": [
                    "name",
                    "unitOfMeasure",
                    "id"
                ],
                "type": "object"
            },
            "FileData": {
                "description": "File contents.",
                "properties": {
                    "contents": {
                        "description": "The base64 encoded contents of the files.",
                        "maxLength": 3145728,
                        "type": "string"
                    },
                    "name": {
                        "description": "Absolute path for the file.",
                        "maxLength": 4096,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "contents"
                ],
                "type": "object"
            },
            "FileDataWithMeta": {
                "description": "File contents and properties.",
                "properties": {
                    "contents": {
                        "description": "The base64 encoded contents of the file",
                        "type": "string"
                    },
                    "created": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "modified": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the file",
                        "type": "string"
                    },
                    "permissions": {
                        "description": "File permissions assigned",
                        "format": "binary",
                        "type": "string"
                    },
                    "size": {
                        "description": "The file size in bytes",
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "contents",
                    "permissions",
                    "size"
                ],
                "type": "object"
            },
            "FoundCert": {
                "properties": {
                    "endpoint": {
                        "$ref": "#/components/schemas/Endpoint"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/CertMetadata"
                    }
                },
                "required": [
                    "endpoint",
                    "metadata"
                ],
                "type": "object"
            },
            "GetAttackCountByCVEResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/CVEResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByCountryResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/Country"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByIPResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/IPResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByInstanceResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/InstanceResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByPolicyResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/PolicyResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByRequestMethodResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/HTTPMethodResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByRequestOutcomeReasonResult": {
                "properties": {
                    "SECURITY_NGINX_VIOLATION": {
                        "type": "integer"
                    },
                    "SECURITY_WAF_BYPASS": {
                        "type": "integer"
                    },
                    "SECURITY_WAF_FLAGGED": {
                        "type": "integer"
                    },
                    "SECURITY_WAF_OK": {
                        "type": "integer"
                    },
                    "SECURITY_WAF_VIOLATION": {
                        "type": "integer"
                    },
                    "SECURITY_WAF_VIOLATION_TRANSPARENT": {
                        "type": "integer"
                    }
                },
                "required": [
                    "SECURITY_NGINX_VIOLATION",
                    "SECURITY_WAF_BYPASS",
                    "SECURITY_WAF_FLAGGED",
                    "SECURITY_WAF_OK",
                    "SECURITY_WAF_VIOLATION",
                    "SECURITY_WAF_VIOLATION_TRANSPARENT"
                ],
                "type": "object"
            },
            "GetAttackCountByRequestStatusResult": {
                "properties": {
                    "alerted": {
                        "type": "integer"
                    },
                    "blocked": {
                        "type": "integer"
                    },
                    "passed": {
                        "type": "integer"
                    }
                },
                "required": [
                    "passed",
                    "blocked",
                    "alerted"
                ],
                "type": "object"
            },
            "GetAttackCountByResponseCodeResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/ResponseCodeResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountBySeverityResult": {
                "properties": {
                    "critical": {
                        "type": "integer"
                    },
                    "error": {
                        "type": "integer"
                    },
                    "informational": {
                        "type": "integer"
                    }
                },
                "required": [
                    "informational",
                    "error",
                    "critical"
                ],
                "type": "object"
            },
            "GetAttackCountBySignatureResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/SignatureResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountBySubViolationResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/Violation"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByThreatCampaignResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/ThreatCampaignResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByURLResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/URLResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountByViolationsResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/Violation"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetAttackCountOverTimeByOutcomeReasonResult": {
                "properties": {
                    "SECURITY_NGINX_VIOLATION": {
                        "$ref": "#/components/schemas/TimeSeries"
                    },
                    "SECURITY_WAF_BYPASS": {
                        "$ref": "#/components/schemas/TimeSeries"
                    },
                    "SECURITY_WAF_FLAGGED": {
                        "$ref": "#/components/schemas/TimeSeries"
                    },
                    "SECURITY_WAF_OK": {
                        "$ref": "#/components/schemas/TimeSeries"
                    },
                    "SECURITY_WAF_VIOLATION": {
                        "$ref": "#/components/schemas/TimeSeries"
                    },
                    "SECURITY_WAF_VIOLATION_TRANSPARENT": {
                        "$ref": "#/components/schemas/TimeSeries"
                    }
                },
                "required": [
                    "SECURITY_NGINX_VIOLATION",
                    "SECURITY_WAF_BYPASS",
                    "SECURITY_WAF_FLAGGED",
                    "SECURITY_WAF_OK",
                    "SECURITY_WAF_VIOLATION",
                    "SECURITY_WAF_VIOLATION_TRANSPARENT"
                ],
                "type": "object"
            },
            "GetAttackCountOverTimeByStatusResult": {
                "properties": {
                    "alerted": {
                        "$ref": "#/components/schemas/TimeSeries"
                    },
                    "blocked": {
                        "$ref": "#/components/schemas/TimeSeries"
                    },
                    "passed": {
                        "$ref": "#/components/schemas/TimeSeries"
                    }
                },
                "required": [
                    "alerted",
                    "blocked",
                    "passed"
                ],
                "type": "object"
            },
            "GetAttackCountResult": {
                "properties": {
                    "count": {
                        "type": "integer"
                    }
                },
                "required": [
                    "count"
                ],
                "type": "object"
            },
            "GetAttackersCountResult": {
                "properties": {
                    "count": {
                        "type": "integer"
                    }
                },
                "required": [
                    "count"
                ],
                "type": "object"
            },
            "GetBotAttackCountByApplicationResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/BotApplicationResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetBotAttackCountByCategoryResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/BotCategoryResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetBotAttackCountByClassResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/BotClassResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetBotAttackCountByRequestStatusResult": {
                "properties": {
                    "alerted": {
                        "type": "integer"
                    },
                    "blocked": {
                        "type": "integer"
                    },
                    "passed": {
                        "type": "integer"
                    }
                },
                "required": [
                    "passed",
                    "blocked",
                    "alerted"
                ],
                "type": "object"
            },
            "GetBotAttackCountBySignatureResult": {
                "properties": {
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/BotSignatureResult"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "series"
                ],
                "type": "object"
            },
            "GetBotAttackCountResult": {
                "properties": {
                    "count": {
                        "type": "integer"
                    }
                },
                "required": [
                    "count"
                ],
                "type": "object"
            },
            "GetBotAttacksOverTimeResult": {
                "properties": {
                    "hits": {
                        "$ref": "#/components/schemas/TimeSeries"
                    }
                },
                "required": [
                    "hits"
                ],
                "type": "object"
            },
            "GetSecurityEventsBySupportIDResult": {
                "items": {
                    "$ref": "#/components/schemas/SecurityEventResult"
                },
                "required": [
                    "items"
                ],
                "type": "array"
            },
            "GetSecurityEventsCollection": {
                "properties": {
                    "Metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/SecurityEventSubset"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "GetSignatureHitsByContextResult": {
                "properties": {
                    "cookie": {
                        "type": "integer"
                    },
                    "header": {
                        "type": "integer"
                    },
                    "parameter": {
                        "type": "integer"
                    }
                },
                "required": [
                    "header",
                    "cookie",
                    "parameter"
                ],
                "type": "object"
            },
            "GetSignatureHitsOverTimeResult": {
                "properties": {
                    "hits": {
                        "$ref": "#/components/schemas/TimeSeries"
                    }
                },
                "required": [
                    "hits"
                ],
                "type": "object"
            },
            "GetSignaturesHitsByRequestStatusResult": {
                "properties": {
                    "alerted": {
                        "type": "integer"
                    },
                    "blocked": {
                        "type": "integer"
                    },
                    "passed": {
                        "type": "integer"
                    }
                },
                "required": [
                    "alerted",
                    "passed",
                    "blocked"
                ],
                "type": "object"
            },
            "GetSignaturesStatsResult": {
                "properties": {
                    "accuracy": {
                        "$ref": "#/components/schemas/Level"
                    },
                    "hits": {
                        "type": "integer"
                    },
                    "risk": {
                        "$ref": "#/components/schemas/Level"
                    },
                    "unique": {
                        "type": "integer"
                    }
                },
                "required": [
                    "unique",
                    "hits",
                    "accuracy",
                    "risk"
                ],
                "type": "object"
            },
            "GetThreatCampaignCountResult": {
                "properties": {
                    "count": {
                        "type": "integer"
                    }
                },
                "required": [
                    "count"
                ],
                "type": "object"
            },
            "Group": {
                "properties": {
                    "groupDef": {
                        "$ref": "#/components/schemas/GroupDef"
                    },
                    "members": {
                        "description": "List of users that are a member of this group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/GroupMeta"
                    }
                },
                "required": [
                    "metadata",
                    "groupDef",
                    "members"
                ],
                "type": "object"
            },
            "GroupDef": {
                "properties": {
                    "roles": {
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "roles"
                ],
                "type": "object"
            },
            "GroupListResponse": {
                "properties": {
                    "count": {
                        "description": "The total number of groups.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "items": {
                        "description": "Contains list of authentication groups.\n",
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "type": "array"
                    },
                    "itemsPerPage": {
                        "description": "The number of resources returned in a list response page",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "startIndex": {
                        "description": "The 1-based index of the first result in the current set of list results",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "items",
                    "count"
                ],
                "type": "object"
            },
            "GroupMeta": {
                "properties": {
                    "createTime": {
                        "description": "A timestamp that represents the server time when the resource was created.\n\nCreate time is not guaranteed to be set in \"happens-before\" order\nacross separate operations.\n\nIn JSON format, `create_time` type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt).\n\nFor example: 2018-04-01T01:30:15.01Z\n\nCreate Time is assigned by the server and cannot be changed.\n",
                        "example": "2019-07-29T09:12:33.001Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "`description` is a free-form text property. You can use it to provide information that helps\nto identify the group.\n\nDescriptions:\n\n- are optional (defaults to an empty string if no value is provided),\n- do not have to be unique,\n- cannot be assigned by the server.\n",
                        "example": "This is a sample description string. It provides information about the group.",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "`displayName` is a user friendly resource name. It can be used to define\na longer, and less constrained, name for a group.\n\nDisplay names:\n\n- are optional (defaults to an empty string if no value is provided),\n- do not have to be unique,\n- cannot be assigned by the server.\n",
                        "example": "My Group Display Name",
                        "type": "string"
                    },
                    "name": {
                        "description": "Group name is a unique identifier for a group within the context of a namespace.\nThe following rules are enforced:\n\n- do not use the following characters: `#`, `,`, `+`, `\"`, `\\`, `\u003c`, `\u003e`, `;`\n- cannot be only `.` or `..`\n",
                        "example": "My Group Name",
                        "maxLength": 1024,
                        "minLength": 1,
                        "not": {
                            "enum": [
                                ".",
                                ".."
                            ],
                            "type": "string"
                        },
                        "pattern": "^[^\\x00-\\x1f\\x60\\x7f\\#\\,\\\"\\+\\\\;\u003c\u003e]+$",
                        "type": "string"
                    },
                    "updateTime": {
                        "description": "A timestamp that represents the server time when the resource was last modified.\n\nResources that have never been updated do not have an `update_time` stamp.\n\nThe default value for resources that have never been updated is the local\nlanguage-specific equivalent of \"null\".\n\nIn JSON format, `update_time` type is encoded as a string as described in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt).\n",
                        "example": "2019-07-29T10:12:33.001Z",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "GroupRequest": {
                "properties": {
                    "groupDef": {
                        "$ref": "#/components/schemas/GroupRequestDef"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/GroupMeta"
                    }
                },
                "required": [
                    "metadata",
                    "groupDef"
                ],
                "type": "object"
            },
            "GroupRequestDef": {
                "properties": {
                    "roles": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "roles"
                ],
                "type": "object"
            },
            "HTTPMethodResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "method": {
                        "example": "GET",
                        "type": "string"
                    }
                },
                "required": [
                    "method",
                    "hits"
                ],
                "type": "object"
            },
            "IPAddress": {
                "description": "IP address information.",
                "properties": {
                    "address": {
                        "description": "The IP addresses.",
                        "type": "string"
                    },
                    "netmask": {
                        "description": "The IP subnet mask.",
                        "type": "string"
                    },
                    "prefixLen": {
                        "description": "The network address prefix length.",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "IPResult": {
                "properties": {
                    "address": {
                        "example": "103.135.56.213",
                        "type": "string"
                    },
                    "hits": {
                        "type": "integer"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "address",
                    "hits",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "InstanceActivityStatus": {
                "description": "Represents a Pending deployment status for an NGINX instance, provide additional information on work in progress\ndeployments.\n",
                "properties": {
                    "message": {
                        "description": "additional message about the instance deployment status.",
                        "type": "string"
                    },
                    "name": {
                        "description": "this is the identifier for the system, typically the systemUID.",
                        "type": "string"
                    },
                    "status": {
                        "description": "status of the pending deployment to the instance.\nThe possible statuses are listed below\n* wait_queue: initial state for the status, the deployment is being processed in the deployment, and has not being put in the queue pipeline to send to the agent.\n* wait_payload: the deployment is waiting for additional payload in the dataplane-manager, see message for additional detailed information.\n* queued: the deployment has been put into the deployment queue, and is waiting to be deployed to the agent.\n* agent_sent: the deployment was sent to the agent, and dataplane-manager is waiting on completion status from the agent. \n* agent_processing: the deployment was sent to the agent, and agent has reported that its processing the change. \n* agent_pending: the deployment was sent to the agent, and agent has reported that the change is being processed but taking longer than expected.\n* finalized_success: dataplane-manager has received the final status of the deployment from the agent, and change was reported successful. \n* finalized_failed: dataplane-manager has received the final status of the deployment from the agent, and change was reported successful. See message for additional detailed information.\n",
                        "enum": [
                            "unknown",
                            "placed",
                            "queued",
                            "built",
                            "deployed",
                            "acked",
                            "resolved",
                            "finalized",
                            "pending"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "status"
                ],
                "type": "object"
            },
            "InstanceAssoc": {
                "properties": {
                    "hostName": {
                        "type": "string"
                    },
                    "systemUid": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "uid": {
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "hostName",
                    "systemUid",
                    "uid"
                ],
                "type": "object"
            },
            "InstanceGroup": {
                "description": "Defines an instance group and it's member instances.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "instances": {
                        "description": "The NGINX instance IDs associated to this group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "lastDeploymentDetails": {
                        "$ref": "#/components/schemas/DeploymentDetails"
                    },
                    "links": {
                        "items": {
                            "$ref": "#/components/schemas/NamedLinks"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "The unique name for this group. This cannot be changed after creation.",
                        "type": "string"
                    },
                    "uid": {
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "uid",
                    "instances",
                    "name"
                ],
                "type": "object"
            },
            "InstanceGroupAssoc": {
                "properties": {
                    "displayName": {
                        "type": "string"
                    },
                    "instances": {
                        "description": "List of instances belonging to the instance group.",
                        "items": {
                            "$ref": "#/components/schemas/InstanceAssoc"
                        },
                        "type": "array"
                    },
                    "uid": {
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "displayName",
                    "uid",
                    "instances"
                ],
                "type": "object"
            },
            "InstanceGroupConfigResponse": {
                "description": "The configuration details for this NGINX instance group",
                "properties": {
                    "auxFiles": {
                        "$ref": "#/components/schemas/AuxData"
                    },
                    "configFiles": {
                        "$ref": "#/components/schemas/ConfigData"
                    },
                    "createTime": {
                        "description": "Create time of the configuration",
                        "format": "date-time",
                        "type": "string"
                    },
                    "instances": {
                        "description": "The NGINX instance IDs associated to this group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updateTime": {
                        "description": "Modified time of the configuration",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "configFiles",
                    "auxFiles",
                    "createTime",
                    "updateTime"
                ],
                "type": "object"
            },
            "InstanceGroupListResponse": {
                "description": "List of representation of an NGINX instance groups.",
                "properties": {
                    "items": {
                        "description": "The list of NGINX instance group descriptions.",
                        "items": {
                            "$ref": "#/components/schemas/InstanceGroup"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "InstanceResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "example": "site-prod-01",
                        "type": "string"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "InstanceStatus": {
                "description": "Represents a Success or Failure deployment status for an NGINX instance\n",
                "properties": {
                    "failMessage": {
                        "description": "Status message, if failure occurred.",
                        "type": "string"
                    },
                    "failType": {
                        "description": "The type of failure that occurred. The failure is further described in the failMessage.\n* none: no failure\n* config-invalid: configuration was not valid\n* config-warnings: configuration had warnings\n* modules-not-found: one or more modules were missing\n",
                        "enum": [
                            "none",
                            "failed",
                            "config-invalid",
                            "config-warnings",
                            "modules-not-found"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "description": "this is the identifier for the system, typically the systemUID.",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "InventoryNginxInstanceSummary": {
                "description": "Summary of NGINX Plus.\n",
                "example": {
                    "$ref": "#/components/examples/NginxInstanceSummary"
                },
                "properties": {
                    "hostname": {
                        "description": "The hostname of the system.",
                        "type": "string"
                    },
                    "lastReportedTime": {
                        "description": "The datetime this NGINX Plus was last reported.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "nap": {
                        "description": "The NGINX App Protect status.\n- inactive: Indicates that App Protect is installed but not enabled.\n- active: Indicates that App Protect is installed and enabled.\n",
                        "enum": [
                            "inactive",
                            "active"
                        ],
                        "type": "string"
                    },
                    "systemUid": {
                        "description": "Unique identifier of the system for this NGINX Plus instance.",
                        "format": "uuid",
                        "type": "string"
                    },
                    "version": {
                        "description": "The version of NGINX Open Source this NGINX Plus instance is based on.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InventoryResponse": {
                "description": "Lists all NGINX Plus instances as reported by NGINX agents.",
                "properties": {
                    "Metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Metadata"
                            },
                            {
                                "properties": {
                                    "itemsPerPage": {
                                        "description": "The 1-based index of the first result in the current set of query.",
                                        "example": 1,
                                        "type": "integer"
                                    },
                                    "startIndex": {
                                        "description": "Specifies the number of query results returned in a query response page.",
                                        "example": 10,
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        ]
                    },
                    "aggregatedNginxAverageCount": {
                        "description": "The aggregatedNginxAverageCount will be average of hourly counts of NGINX Plus instances in the system for the requested date-time range.\n",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "aggregatedNginxMaximumCount": {
                        "description": "The aggregatedNginxMaximumCount will be maximum of hourly counts of NGINX Plus instances in the system for the requested date-time range.\n",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "aggregatedNginxMinimumCount": {
                        "description": "The aggregatedNginxMaximumCount will be minimum of hourly counts of NGINX Plus instances in the system for the requested date-time range.\n",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "aggregatedNginxPlusCount": {
                        "description": "The aggregatedNginxPlusCount will be a count of all unique NGINX Plus instances in this system for the requested date-time range.\n",
                        "format": "int64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "endDate": {
                        "description": "The endDate along with startDate indicates the date range of NGINX Plus instances reporting.\n",
                        "format": "date-time",
                        "type": "string"
                    },
                    "instances": {
                        "description": "The NGINX instance data associated with each NGINX Plus instance in the system.",
                        "items": {
                            "$ref": "#/components/schemas/InventoryNginxInstanceSummary"
                        },
                        "type": "array"
                    },
                    "metrics": {
                        "$ref": "#/components/schemas/AggregateMetrics"
                    },
                    "startDate": {
                        "description": "The startDate indicates a date at which the NGINX Plus instances reporting were included from (inclusive).\n",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "IssueDetails": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "links": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "location": {
                        "$ref": "#/components/schemas/IssueLocation"
                    },
                    "message": {
                        "type": "string"
                    },
                    "severity": {
                        "enum": [
                            "error",
                            "warning"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "severity",
                    "location",
                    "message"
                ],
                "type": "object"
            },
            "IssueLocation": {
                "properties": {
                    "column": {
                        "type": "integer"
                    },
                    "directive": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string"
                    },
                    "line": {
                        "type": "integer"
                    }
                },
                "required": [
                    "file",
                    "line"
                ],
                "type": "object"
            },
            "Level": {
                "properties": {
                    "high": {
                        "type": "integer"
                    },
                    "low": {
                        "type": "integer"
                    },
                    "medium": {
                        "type": "integer"
                    }
                },
                "required": [
                    "low",
                    "medium",
                    "high"
                ],
                "type": "object"
            },
            "LicenseName": {
                "description": "Name of the License resource.",
                "example": "nim-provided",
                "type": "string"
            },
            "LicenseResponse": {
                "properties": {
                    "currentStatus": {
                        "$ref": "#/components/schemas/CurrentStatus"
                    },
                    "desiredState": {
                        "$ref": "#/components/schemas/DesiredState"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    }
                },
                "required": [
                    "metadata",
                    "desiredState",
                    "currentStatus"
                ],
                "type": "object"
            },
            "LicenseStatus": {
                "description": "Status of the current instance with respect to the license.\n- `NONE`: The current instance is not yet licensed.\n- `INVALID`: The current instance has at least one entitlement in non-functional license status.\n- `ENFORCED`: The current instance has at least one entitlement in enforced license status and no entitlements in non-functional status.\n- `GRACE`: The current instance has at least one entitlement in grace period license status and no entitlements in enforced or non-functional status.\n- `VALID`: The current instance has valid entitlement(s) that have no adverse license statuses.\n- `CORRUPTED`: The license for the current instance is corrupted. Upload the license file again to rectify the status.\n- `EXPIRED`: The license for the current instance is expired. Upload the valid license file to rectify the status.\n",
                "enum": [
                    "NONE",
                    "INVALID",
                    "ENFORCED",
                    "GRACE",
                    "VALID",
                    "CORRUPTED",
                    "EXPIRED"
                ],
                "type": "string"
            },
            "LicenseStatusResponse": {
                "properties": {
                    "licenseStatus": {
                        "$ref": "#/components/schemas/LicenseStatus"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    }
                },
                "required": [
                    "metadata",
                    "licenseStatus"
                ],
                "type": "object"
            },
            "ListConfigsResponse": {
                "example": {
                    "items": [
                        {
                            "configName": "test-config",
                            "createTime": "2021-10-31T01:09:41Z",
                            "nginxUid": "e17b541c-b71b-45fc-86e3-ba7a24e720e6",
                            "uid": "4ebc80fb-a92f-4928-9f3c-d8532259b972",
                            "updateTime": "2021-10-31T01:09:41Z"
                        },
                        {
                            "configName": "dev-config",
                            "createTime": "2021-12-19T01:09:41Z",
                            "nginxUid": "af8f0735-075f-44af-bff3-b0e4654e710a",
                            "uid": "5063918d-d593-4eb8-974a-462e137d9196",
                            "updateTime": "2021-12-19T01:09:41Z"
                        }
                    ]
                },
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/SavedNginxConfigSummary"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ListNginxes": {
                "description": "List of NGINX instances associated with system hosts.",
                "properties": {
                    "count": {
                        "description": "The total number of instances.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "items": {
                        "description": "The list of NGINX instance information.",
                        "items": {
                            "$ref": "#/components/schemas/NginxInfo"
                        },
                        "type": "array"
                    },
                    "itemsPerPage": {
                        "description": "The number of resources returned in a list response page",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "nginxAppProtectWAFCount": {
                        "description": "The total number of NGINX App Protect instances.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "nginxPlusCount": {
                        "description": "The total number of NGINX Plus instances.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "startIndex": {
                        "description": "The zero-based index of the first result in the current set of list results",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "count",
                    "nginxPlusCount",
                    "nginxAppProtectWAFCount",
                    "items"
                ],
                "type": "object"
            },
            "ListServerResponse": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/ServerResponse"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Metadata": {
                "properties": {
                    "pagination": {
                        "$ref": "#/components/schemas/MetadataPagination"
                    }
                },
                "type": "object"
            },
            "MetadataPagination": {
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/PaginationLinks"
                    },
                    "pageToken": {
                        "example": "1594048781",
                        "type": "string"
                    },
                    "total": {
                        "description": "Specifies the total number of results matching the client query. Currently reports the same value as totalResults and will be deprecated in the future.\n",
                        "example": 3600,
                        "type": "integer"
                    },
                    "totalResults": {
                        "description": "Specifies the total number of results matching the client query.",
                        "example": 3600,
                        "type": "integer"
                    }
                },
                "required": [
                    "pageToken"
                ],
                "type": "object"
            },
            "Metric": {
                "description": "Metrics provide a means of measuring and analyzing the performance of your systems and of NGINX Manager.",
                "properties": {
                    "aggr": {
                        "enum": [
                            "AVG",
                            "COUNT",
                            "SUM",
                            "MAX",
                            "MIN",
                            "RATE"
                        ],
                        "example": "AVG",
                        "type": "string"
                    },
                    "name": {
                        "example": "plus.upstream.response.count",
                        "type": "string"
                    },
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/Series"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "MetricDescriptionRecord": {
                "properties": {
                    "aggregations": {
                        "example": [
                            "AVG",
                            "SUM"
                        ],
                        "items": {
                            "enum": [
                                "AVG",
                                "COUNT",
                                "SUM",
                                "MAX",
                                "MIN"
                            ],
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "categories": {
                        "description": "An array of freeform strings containing the category(ies) of a Metrics Catalog resource.",
                        "example": [
                            "nginx"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "example": "Number of bytes sent to clients.",
                        "type": "string"
                    },
                    "dimensions": {
                        "description": "An array of the Dimensions that apply to a Metrics Catalog resource.",
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "modules": {
                        "default": [
                            "platform"
                        ],
                        "description": "The non-empty set of modules the metric belongs to.",
                        "example": [
                            "adc",
                            "apim",
                            "platform"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "name": {
                        "example": "nginx.http.request.bytes_sent",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "counter",
                            "gauge",
                            "incremental"
                        ],
                        "example": "incremental",
                        "type": "string"
                    },
                    "unit": {
                        "example": "bytes",
                        "type": "string"
                    }
                },
                "required": [
                    "metadata"
                ],
                "type": "object"
            },
            "MetricDescriptionResponse": {
                "$ref": "#/components/schemas/MetricDescriptionRecord"
            },
            "MetricQueryMetadata": {
                "properties": {
                    "endTime": {
                        "example": "2019-08-07T09:57:36.088757764Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "resolution": {
                        "example": "30m",
                        "type": "string"
                    },
                    "startTime": {
                        "example": "2019-08-07T09:57:36.088757764Z",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MetricQueryResult": {
                "properties": {
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/Metric"
                        },
                        "type": "array"
                    },
                    "queryMetadata": {
                        "$ref": "#/components/schemas/MetricQueryMetadata"
                    },
                    "responseMetadata": {
                        "$ref": "#/components/schemas/MetricResponseMetadata"
                    }
                },
                "type": "object"
            },
            "MetricResponseMetadata": {
                "properties": {
                    "warning": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MetricsDescriptionsResponse": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/MetricDescriptionRecord"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Module": {
                "properties": {
                    "apiSpec": {
                        "description": "optional URI path to the module API Spec",
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "eager": {
                        "type": "boolean"
                    },
                    "icon": {
                        "description": "optional SVG for the module icon",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "platformVersion": {
                        "type": "string"
                    },
                    "rootToken": {
                        "type": "string"
                    },
                    "sourceLocation": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "rootToken",
                    "sourceLocation"
                ],
                "type": "object"
            },
            "ModuleChildFeature": {
                "properties": {
                    "module": {
                        "description": "The module associated with this child feature.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The child feature name.",
                        "type": "string"
                    },
                    "objects": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectCollections"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "module"
                ],
                "type": "object"
            },
            "ModuleFeature": {
                "properties": {
                    "childFeatures": {
                        "items": {
                            "$ref": "#/components/schemas/ModuleChildFeature"
                        },
                        "type": "array"
                    },
                    "module": {
                        "description": "The module associated with this feature.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The feature name.",
                        "type": "string"
                    },
                    "objects": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectCollections"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "module"
                ],
                "type": "object"
            },
            "ModuleFeatureDetail": {
                "properties": {
                    "module": {
                        "description": "The module associated with this feature.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the feature.",
                        "type": "string"
                    },
                    "objects": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectCollections"
                        },
                        "type": "array"
                    },
                    "parentId": {
                        "description": "The parent id of this feature.",
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "module",
                    "objects"
                ],
                "type": "object"
            },
            "ModuleFeatureDetailResponse": {
                "$ref": "#/components/schemas/ModuleFeatureDetail"
            },
            "ModuleFeatureListResponse": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/ModuleFeature"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "Modules": {
                "items": {
                    "$ref": "#/components/schemas/Module"
                },
                "type": "array"
            },
            "NamedLinks": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SelfLinks"
                    },
                    {
                        "description": "Contains information about the object being referred to.\n\nThese are generally details -- like the object name and display name --\nthat are useful to a consumer of the API that performs further\nprocessing.\n\nThis object is only present in responses.\n",
                        "properties": {
                            "displayName": {
                                "description": "A user friendly resource name.",
                                "example": "Production Environment",
                                "type": "string"
                            },
                            "name": {
                                "description": "The name of the linked resource.\n",
                                "example": "production",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "NetworkInterface": {
                "description": "A network interface description.",
                "properties": {
                    "ipv4AddressList": {
                        "description": "A list of IPv4 addresses assigned to this interface.",
                        "items": {
                            "$ref": "#/components/schemas/IPAddress"
                        },
                        "type": "array"
                    },
                    "ipv6AddressList": {
                        "description": "A list of IPv6 addresses assigned to this interface.",
                        "items": {
                            "$ref": "#/components/schemas/IPAddress"
                        },
                        "type": "array"
                    },
                    "macAddress": {
                        "description": "The mac address of the network interface.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the network interface.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NginxInfo": {
                "description": "Basic information about NGINX instances associated with system hosts.",
                "properties": {
                    "displayName": {
                        "description": "User friendly name of the NGINX instance.",
                        "type": "string"
                    },
                    "systemUid": {
                        "description": "Unique identifier of the system for this NGINX instance.",
                        "format": "uuid",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Unique identifier for this NGINX instance.",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "uid",
                    "systemUid",
                    "displayName"
                ],
                "type": "object"
            },
            "NginxInstance": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/NginxInstanceSummary"
                    },
                    {
                        "properties": {
                            "appProtect": {
                                "$ref": "#/components/schemas/AppProtect"
                            },
                            "configureArgs": {
                                "description": "The set of configure arguments used to build the NGINX executable",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "lastDeploymentDetails": {
                                "$ref": "#/components/schemas/DeploymentDetails"
                            },
                            "loadableModules": {
                                "description": "A list of loadable modules installed on the system.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "packages": {
                                "description": "list of packages that are installed on this NGINX instance",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "processId": {
                                "description": "Process ID of the NGINX process",
                                "type": "string"
                            },
                            "ssl": {
                                "description": "SSL library information for this NGINX process.",
                                "properties": {
                                    "built": {
                                        "description": "Compile time SSL library.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "runtime": {
                                        "description": "Runtime SSL library.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "runtime",
                                    "built"
                                ],
                                "type": "object"
                            },
                            "statusURL": {
                                "description": "The URL to get NGINX Plus status.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "configureArgs",
                            "loadableModules",
                            "packages",
                            "processId",
                            "ssl"
                        ],
                        "type": "object"
                    }
                ],
                "description": "A full representation of an NGINX instance.",
                "example": {
                    "$ref": "#/components/examples/NginxInstance"
                }
            },
            "NginxInstanceConfigResponse": {
                "description": "The configuration for this NGINX instance.",
                "properties": {
                    "accessLogs": {
                        "$ref": "#/components/schemas/AccessLogs"
                    },
                    "auxFiles": {
                        "$ref": "#/components/schemas/AuxData"
                    },
                    "configFiles": {
                        "$ref": "#/components/schemas/ConfigData"
                    },
                    "createTime": {
                        "description": "Create time of the configuration",
                        "format": "date-time",
                        "type": "string"
                    },
                    "directoryMap": {
                        "$ref": "#/components/schemas/DirectoryMap"
                    },
                    "errorLogs": {
                        "$ref": "#/components/schemas/ErrorLogs"
                    },
                    "sslCertificates": {
                        "$ref": "#/components/schemas/SslCertificates"
                    },
                    "updateTime": {
                        "description": "Modified time of the configuration",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "configFiles",
                    "auxFiles",
                    "createTime",
                    "updateTime"
                ],
                "type": "object"
            },
            "NginxInstanceGroupInfo": {
                "description": "Basic information about NGINX instance group associated with NGINX",
                "properties": {
                    "name": {
                        "description": "name of the instance group",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Unique identifier for the instance group",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "uid"
                ],
                "type": "object"
            },
            "NginxInstanceListResponse": {
                "description": "List of representation of an NGINX instances.",
                "properties": {
                    "items": {
                        "description": "The list of NGINX instance descriptions.",
                        "items": {
                            "$ref": "#/components/schemas/NginxInstanceSummary"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "NginxInstanceResponse": {
                "$ref": "#/components/schemas/NginxInstance"
            },
            "NginxInstanceSummary": {
                "description": "Defines summary data for the NGINX process.\n",
                "example": {
                    "$ref": "#/components/examples/NginxInstanceSummary"
                },
                "properties": {
                    "appProtect": {
                        "$ref": "#/components/schemas/AppProtect"
                    },
                    "build": {
                        "$ref": "#/components/schemas/BuildInfo"
                    },
                    "configPath": {
                        "description": "Path to the NGINX config",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "User friendly instance name.",
                        "type": "string"
                    },
                    "instanceGroup": {
                        "$ref": "#/components/schemas/NginxInstanceGroupInfo"
                    },
                    "links": {
                        "items": {
                            "$ref": "#/components/schemas/NamedLinks"
                        },
                        "type": "array"
                    },
                    "processPath": {
                        "description": "Path to the NGINX process",
                        "type": "string"
                    },
                    "registrationTime": {
                        "description": "The time that the NGINX process was first registered.",
                        "type": "string"
                    },
                    "startTime": {
                        "description": "The datetime that the NGINX process was last started",
                        "format": "date-time",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Status"
                    },
                    "uid": {
                        "description": "Unique identifier for this NGINX instance.",
                        "type": "string"
                    },
                    "version": {
                        "description": "The version of NGINX Open Source this instance is based on.",
                        "type": "string"
                    }
                },
                "required": [
                    "uid",
                    "version",
                    "build",
                    "configPath",
                    "processPath",
                    "displayName",
                    "status",
                    "links",
                    "registrationTime",
                    "startTime"
                ],
                "type": "object"
            },
            "ObjectCollections": {
                "properties": {
                    "resource": {
                        "type": "string"
                    },
                    "values": {
                        "description": "Values are matched to resources in the API to determine access privileges.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "resource",
                    "values"
                ],
                "type": "object"
            },
            "PEM": {
                "description": "Defines a PEM-formatted certificate that contains a key and certificates.\n\nBecause JSON does not support multi-line strings, you must replace binary line feeds with ASCII line feeds (`\\n`).\nThe private key data will be redacted in the response for all get and list requests. The private key data is\nrequired when creating a new cert.\n",
                "properties": {
                    "caCerts": {
                        "description": "An optional list of intermediate certificates in PEM format that are used to validate the public certificate.\nBecause JSON does not support multi-line strings, you must replace binary line feeds with ASCII line feeds (`\\n`).\n",
                        "example": [
                            "-----BEGIN CERTIFICATE-----\\n MIIE+zCCBGSgAwIBAgICAQ0wDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1Zh\\n \u003cEXAMPLE_SNIPPED\u003e WBsUs5iB0QQeyAfJg594RAoYC5jcdnplDQ1tgMQLARzLrUc+cb53S8wGd9D0Vmsf\\n SxOaFIqII6hR8INMqzW/Rn453HWkrugp++85j09VZw==\\n -----END CERTIFICATE-----"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "password": {
                        "description": "The passphrase to use to decrypt the private key. Required if the private key is encrypted.",
                        "example": "myPa$$w0rd",
                        "type": "string"
                    },
                    "privateKey": {
                        "description": "The private key used to sign the public certificate.\n\nBecause JSON does not support multi-line strings, you must replace binary line feeds with ASCII line feeds (`\\n`). The private key data will be redacted in the response for all get and list requests.\n",
                        "example": "-----BEGIN PRIVATE KEY-----\\n MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALSQBtRafNJtTqN0\\n \u003cEXAMPLE_SNIPPED\u003e nYiZq6TZUsHjfG2R9PlK6jsvno9O6amN96Al6ZSTTDjhr4VU7/RJ0p/cisiCboCX\\n 4cCq6lFKpIpeZJI=\\n -----END PRIVATE KEY-----",
                        "type": "string"
                    },
                    "publicCert": {
                        "description": "The end-entity certificate, in PEM format.\n\nBecause JSON does not support multi-line strings, you must replace binary line feeds with ASCII line feeds (`\\n`).\n",
                        "example": "-----BEGIN CERTIFICATE-----\\n MIICpzCCAhACCQDkjx7mP9cuRjANBgkqhkiG9w0BAQsFADCBlzELMAkGA1UEBhMC\\n \u003cEXAMPLE_SNIPPED\u003e MiJVGawyxDzBm2UhzNOE0ABHfjAgM6PAYmtMhhQawk6bmttXYhJeqhLSji4LEj5d\\n Z4FmXQ5rWM0RWBs=\\n -----END CERTIFICATE-----",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "PEM"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "publicCert",
                    "type"
                ],
                "type": "object"
            },
            "PKCS12": {
                "description": "Defines a cert with key and certificates encoded in PKCS12 format.",
                "properties": {
                    "data": {
                        "description": "A base-64-encoded string that contains a private key, a public certificate, and, optionally, \nother intermediate certificates. The private key is required when creating a new cert.\n",
                        "example": "MIIGoQIBAzCCBmcGCSqGSIb3DQEHAaCCBlgEggZUMIIGUDCCA08GCSqGSIb3DQEHBqCCA0AwggM8AgEAMIIDNQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIe7ZblBoEW3QCAggAgIIDCCgLEvzp9n6\u003cEXAMPLE_SNIPPED\u003e9QbpGT0MDEwITAJBgUrDgMCGgUABBQJs6ZgeAMcxVLrq1hU+TlUOArMuQQIGK59vCBn0wECAggA",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password to use to decrypt PKCS12 data.",
                        "example": "myPa$$w0rd",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "PKCS12"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "PaginationLinks": {
                "properties": {
                    "next": {
                        "$ref": "#/components/schemas/SelfLinks"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/SelfLinks"
                    }
                },
                "type": "object"
            },
            "PatchInstanceGroupRequest": {
                "description": "Defines an update instance group request.\n",
                "properties": {
                    "description": {
                        "description": "The description of this NGINX instance group.",
                        "maxLength": 1024,
                        "type": "string"
                    },
                    "displayName": {
                        "description": "User friendly NGINX instance group name.",
                        "maxLength": 1024,
                        "maximum": 1024,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Permission": {
                "description": "Permission consists of feature, identifying what the user can access, the desired level of access and optional object values. Permissions govern Users ability to access specific features in NMS.\n",
                "properties": {
                    "accessTypes": {
                        "items": {
                            "$ref": "#/components/schemas/AccessType"
                        },
                        "type": "array"
                    },
                    "feature": {
                        "description": "The feature the user has access to. The options for NMS are:\n* USER-MANAGEMENT: has access to groups, users and roles APIs\n* LICENSING: has access to licensing APIs\n* CERTS - has access to certificate APIs\n* STAGED-CONFIG has access to staged configurations APIs\n* INSTANCE-MANAGEMENT: has access to instance management APIs\n* INSTANCE-GROUPS: has access to instance groups APIs\n* SCAN: has access to scan APIs\n",
                        "example": "INSTANCE-MANAGEMENT",
                        "type": "string"
                    },
                    "id": {
                        "description": "Only returned for UserInfo requests. Unique identifier of a Permission.\n",
                        "type": "integer"
                    },
                    "objects": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectCollections"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accessTypes",
                    "feature",
                    "objects"
                ],
                "type": "object"
            },
            "PermissionSummary": {
                "description": "Permission consists of feature, identifying what the user can access, the desired level of access and optional object values. Permissions govern Users ability to access specific features in NMS.\n",
                "properties": {
                    "accessTypes": {
                        "items": {
                            "$ref": "#/components/schemas/AccessType"
                        },
                        "type": "array"
                    },
                    "feature": {
                        "example": "USER-MANAGEMENT",
                        "type": "string"
                    },
                    "objects": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectCollections"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accessTypes",
                    "feature"
                ],
                "type": "object"
            },
            "PolicyAssociationDetails": {
                "description": "The policy association details.",
                "properties": {
                    "attackSignatureLibrary": {
                        "$ref": "#/components/schemas/AttackSignatureLibrary"
                    },
                    "instance": {
                        "$ref": "#/components/schemas/InstanceAssoc"
                    },
                    "instanceGroup": {
                        "$ref": "#/components/schemas/InstanceGroupAssoc"
                    },
                    "policyUid": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "policyVersionDateTime": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "threatCampaign": {
                        "$ref": "#/components/schemas/ThreatCampaign"
                    }
                },
                "required": [
                    "policyUid",
                    "policyVersionDateTime",
                    "attackSignatureLibrary",
                    "threatCampaign",
                    "instanceGroup",
                    "instance"
                ],
                "type": "object"
            },
            "PolicyContent": {
                "properties": {
                    "name": {
                        "description": "The policy name.",
                        "type": "string"
                    },
                    "uid": {
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "uid"
                ]
            },
            "PolicyDeploymentCount": {
                "description": "The policy name and number of deployed versions.",
                "properties": {
                    "deployedVersionCount": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "deployedVersionCount"
                ],
                "type": "object"
            },
            "PolicyDeploymentsAssocResponse": {
                "properties": {
                    "associations": {
                        "description": "The list of policy associations.",
                        "items": {
                            "$ref": "#/components/schemas/PolicyAssociationDetails"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "associations"
                ],
                "type": "object"
            },
            "PolicyDeploymentsCountResponse": {
                "properties": {
                    "policies": {
                        "description": "The list of security policy deployments.",
                        "items": {
                            "$ref": "#/components/schemas/PolicyDeploymentCount"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "policies"
                ],
                "type": "object"
            },
            "PolicyDeploymentsVersionResponse": {
                "properties": {
                    "versions": {
                        "description": "The list of policy versions.",
                        "items": {
                            "$ref": "#/components/schemas/PolicyVersionDetails"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "versions"
                ],
                "type": "object"
            },
            "PolicyResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "example": "strict_policy",
                        "type": "string"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "PolicyVersionDetails": {
                "description": "The policy version details.",
                "properties": {
                    "instanceGroups": {
                        "description": "List of instance group UIDs.",
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "instances": {
                        "description": "List of instances UIDs.",
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "policyUid": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "policyVersionDateTime": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "policyUid",
                    "policyVersionDateTime",
                    "instanceGroups",
                    "instances"
                ],
                "type": "object"
            },
            "PublishConfigRequest": {
                "description": "The configuration publish request. When a configUID is provided, it ignores the configFiles and auxFiles properties.",
                "properties": {
                    "auxFiles": {
                        "$ref": "#/components/schemas/AuxData"
                    },
                    "configFiles": {
                        "$ref": "#/components/schemas/ConfigData"
                    },
                    "configUID": {
                        "description": "When specified the Publish request will ignore the configFiles and auxFiles properties.",
                        "format": "uuid",
                        "type": "string"
                    },
                    "ignoreConflict": {
                        "description": "Bypass conflict validation when publishing.",
                        "type": "boolean"
                    },
                    "updateTime": {
                        "description": "Time when modification of the configuration started, required when not publishing a staged configuration.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "validateConfig": {
                        "description": "Validates the configuration has no errors prior to publishing. The default value is determined from the system flag 'dpm_validate_before_publish', setting this will override the default.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "PublishConfigResponse": {
                "description": "Outcome of a publish config",
                "properties": {
                    "deploymentUID": {
                        "description": "Unique identifier for checking the status of the deployment request.",
                        "format": "uuid",
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/SelfLinks"
                    },
                    "result": {
                        "type": "string"
                    }
                },
                "required": [
                    "result",
                    "deploymentUID",
                    "links"
                ],
                "type": "object"
            },
            "PublishResponse": {
                "description": "The list of published deployments.",
                "properties": {
                    "deployments": {
                        "items": {
                            "$ref": "#/components/schemas/PublishSecurityContentResponse"
                        },
                        "type": "array"
                    },
                    "partialDeploymentFailure": {
                        "$ref": "#/components/schemas/ErrorModel"
                    }
                },
                "required": [
                    "deployments"
                ],
                "type": "object"
            },
            "PublishSecurityContentDetail": {
                "description": "The security content detail to publish.",
                "properties": {
                    "attackSignatureLibrary": {
                        "$ref": "#/components/schemas/AttackSignatureLibrary"
                    },
                    "instanceGroups": {
                        "description": "The target instance group UIDs to apply the security content to.",
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "instances": {
                        "description": "The target nginx UIDs to apply the security content to.",
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "policyContent": {
                        "$ref": "#/components/schemas/PolicyContent"
                    },
                    "threatCampaign": {
                        "$ref": "#/components/schemas/ThreatCampaign"
                    }
                },
                "type": "object"
            },
            "PublishSecurityContentRequest": {
                "description": "The security content publish request.",
                "properties": {
                    "publications": {
                        "items": {
                            "$ref": "#/components/schemas/PublishSecurityContentDetail"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "publications"
                ],
                "type": "object"
            },
            "PublishSecurityContentResponse": {
                "description": "Outcome of a publish security content",
                "properties": {
                    "deploymentUID": {
                        "description": "Unique identifier for checking the status of the deployment request.",
                        "format": "uuid",
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/SelfLinks"
                    },
                    "result": {
                        "type": "string"
                    }
                },
                "required": [
                    "result",
                    "deploymentUID",
                    "links"
                ],
                "type": "object"
            },
            "PutLicenseRequest": {
                "properties": {
                    "desiredState": {
                        "properties": {
                            "content": {
                                "description": "The customer association token or NGINX Manager license, which can be downloaded from your [MyF5](account.f5.com/myf5) account. The license must be formatted as a base64-encoded string, while the association token is unencoded.",
                                "format": "password",
                                "type": "string"
                            }
                        },
                        "required": [
                            "content"
                        ],
                        "type": "object"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    }
                },
                "required": [
                    "metadata",
                    "desiredState"
                ],
                "type": "object"
            },
            "ReleaseInfo": {
                "description": "Provides operating system release information.",
                "example": {
                    "name": "Ubuntu",
                    "version": "18.04.5 LTS (Bionic Beaver)",
                    "versionId": "18.04"
                },
                "properties": {
                    "codename": {
                        "description": "The OS release codename.",
                        "type": "string"
                    },
                    "id": {
                        "description": "The OS release ID.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The OS release name.",
                        "type": "string"
                    },
                    "version": {
                        "description": "The OS release version string.",
                        "type": "string"
                    },
                    "versionId": {
                        "description": "The OS release version.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RemoteFile": {
                "description": "Define a Cert resource by providing references to remote files.\n\n\u003e **Note:** These are file path references only. The system can not validate the file contents or extract the certificate metadata. Providing a PEM or PKCS12 certificate is recommended.\n",
                "properties": {
                    "privateKey": {
                        "description": "The path to the private key file.",
                        "example": "/certs/www.example.com/example.key",
                        "type": "string"
                    },
                    "publicCert": {
                        "description": "The path to the certificate bundle file. The file must contain the public certificate and may contain additional intermediate certificates.",
                        "example": "/certs/www.example.com/example.crt",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "REMOTE_FILE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "privateKey",
                    "publicCert",
                    "type"
                ],
                "type": "object"
            },
            "ResourceMeta": {
                "properties": {
                    "createTime": {
                        "description": "A timestamp that represents the server time when the resource was created.\n\nCreate time is not guaranteed to be set in \"happens-before\" order\nacross separate operations.\n\nIn JSON format, `create_time` type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt).\n\nFor example: 2018-04-01T01:30:15.01Z\n\nCreate Time is assigned by the server and cannot be changed.\n",
                        "example": "2019-07-29T09:12:33.001Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "`description` is a free-form text property. You can use it to provide information that helps\nto identify the resource.\n\nDescriptions:\n\n- are optional (defaults to an empty string if no value is provided),\n- do not have to be unique,\n- cannot be assigned by the server.\n",
                        "example": "This is a sample description string. It provides information about the resource.",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "`displayName` is a user friendly resource name. It can be used to define\na longer, and less constrained, name for a resource.\n\nDisplay names:\n\n- are optional (defaults to an empty string if no value is provided),\n- do not have to be unique,\n- cannot be assigned by the server.\n",
                        "example": "My Display Name",
                        "type": "string"
                    },
                    "kind": {
                        "description": "Kind is a string representation of an API resource's data type.\nIt is assigned by the server and cannot be changed.\n\nWhen creating a `kind`, the server uses hyphens to connect word segments;\nsingleton and collection item resources are not pluralized.\n",
                        "example": "\u003ccollection\u003e-\u003cobject\u003e",
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/SelfLinks"
                    },
                    "name": {
                        "description": "Resource name is a unique identifier for a resource within the context of a namespace.\nResource names must conform to [RFC 1738 Section 2.2](https://www.ietf.org/rfc/rfc1738.txt) and have a valid syntax for email addresses. The following rules are enforced:\n\n- do not utilize URL encoding;\n- do not include spaces;\n- do not use uppercase characters, for example, 'A-Z'; extended character sets are supported;\n- do not use the following characters: `\"`, `*`, `:`, `;`, `/`, `\\`, `%`, `?`, `hash`, `=`, `\u0026`, `|`, `~`, `^`, `{`, `}`, `[`, `]`, `\u003c`, `\u003e`;\n- cannot start or end with an `@` sign;\n- cannot be only `.` or `..`\n\nFor example: For a collection resource located at\n\n`https://controller.example.com/api/platform/v1/services/apps/shopping_@1`\n\nthe resource name is \"shopping_@1\".\n",
                        "example": "resource-name",
                        "maxLength": 1024,
                        "minLength": 1,
                        "not": {
                            "enum": [
                                ".",
                                ".."
                            ],
                            "type": "string"
                        },
                        "pattern": "^[^A-Z\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=\u0026\\~\\^|#\u003c\u003e]+$",
                        "type": "string"
                    },
                    "ref": {
                        "description": "The `ref` field contains a reference to another NGINX Controller resource.\n",
                        "example": "/services/environments/prod",
                        "type": "string"
                    },
                    "tags": {
                        "description": "You can assign `tags` to a resource as a way to help map, scope,\nand organize resources.\n\nThe system uses tag selectors to specify selection criteria that\nmatch resources that have particular tags.\n",
                        "example": [
                            "production_public",
                            "dev",
                            "new_app",
                            "us-west-1",
                            "emea"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "uid": {
                        "description": "Unique Identifier (UID)\n\nUID is a unique identifier in time and space for a resource.\nWhen you create a resource, the server assigns a UID to the resource.\n\nRefer to [IETF RFC 4122](https://tools.ietf.org/html/rfc4122) for more information.\n",
                        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                        "format": "uuid",
                        "type": "string"
                    },
                    "updateTime": {
                        "description": "A timestamp that represents the server time when the resource was last modified.\n\nResources that have never been updated do not have an `update_time` stamp.\n\nThe default value for resources that have never been updated is the local\nlanguage-specific equivalent of \"null\".\n\nIn JSON format, `update_time` type is encoded as a string as described in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt).\n",
                        "example": "2019-07-29T10:12:33.001Z",
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "ResourceRef": {
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/NamedLinks"
                    },
                    "ref": {
                        "description": "A reference to another NGINX Controller resource.\n",
                        "example": "/services/environments/prod",
                        "type": "string"
                    }
                },
                "required": [
                    "ref"
                ],
                "type": "object"
            },
            "ResponseCodeResult": {
                "properties": {
                    "code": {
                        "description": "A HTTP response code",
                        "example": "200",
                        "type": "string"
                    },
                    "hits": {
                        "type": "integer"
                    }
                },
                "required": [
                    "code",
                    "hits"
                ],
                "type": "object"
            },
            "ResponseMetadata": {
                "description": "Metadata used in response tracing.\n",
                "properties": {
                    "requestDuration": {
                        "description": "Time in milliseconds (ms).\n",
                        "example": 12345,
                        "type": "integer"
                    },
                    "requestTime": {
                        "description": "The time of the initial request.\n",
                        "example": "2001-02-03T15:14:16.000-07:00",
                        "type": "string"
                    },
                    "spanId": {
                        "description": "A openTrace identifier for the root span of the request.\n",
                        "example": "0x123456ff",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Role": {
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "roleDef": {
                        "$ref": "#/components/schemas/RoleDef"
                    }
                },
                "required": [
                    "metadata",
                    "roleDef"
                ],
                "type": "object"
            },
            "RoleDef": {
                "description": "A Role is a collection of permissions and child Roles. All Roles are globally unique. You can assign Roles to users or to other Roles.\n",
                "properties": {
                    "permissions": {
                        "items": {
                            "$ref": "#/components/schemas/Permission"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "permissions"
                ],
                "type": "object"
            },
            "RoleDefSummary": {
                "description": "A Role is a collection of permissions and child Roles. All Roles are globally unique. You can assign Roles to users or to other Roles.\n",
                "properties": {
                    "permissions": {
                        "items": {
                            "$ref": "#/components/schemas/PermissionSummary"
                        },
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "required": [
                    "permissions"
                ],
                "type": "object"
            },
            "RoleListResponse": {
                "properties": {
                    "items": {
                        "description": "Contains list of Role objects.\n",
                        "example": {
                            "items": [
                                {
                                    "groups": [],
                                    "metadata": {
                                        "createTime": "2020-02-24T21:29:59.866708Z",
                                        "kind": "role",
                                        "name": "admin"
                                    },
                                    "roleDef": {
                                        "permissions": [
                                            {
                                                "accessTypes": [
                                                    "CREATE",
                                                    "READ",
                                                    "UPDATE",
                                                    "DELETE"
                                                ],
                                                "feature": "USER-MANAGEMENT"
                                            }
                                        ]
                                    },
                                    "users": [
                                        {
                                            "ref": "/api/platform/v1/users/user1"
                                        },
                                        {
                                            "ref": "/api/platform/v1/users/user2"
                                        }
                                    ]
                                }
                            ]
                        },
                        "items": {
                            "$ref": "#/components/schemas/RoleSummary"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "RoleSummary": {
                "description": "A RoleSummary is a collection of permissions and child Roles and any users or groups associated. All Roles are globally unique. You can assign Roles to non-SSO Users or to Groups.\n",
                "example": {
                    "groups": [],
                    "metadata": {
                        "createTime": "2020-02-24T22:38:33.842929Z",
                        "kind": "role",
                        "name": "role1"
                    },
                    "roleDef": {
                        "permissions": [
                            {
                                "accessTypes": [
                                    "READ"
                                ],
                                "feature": "INSTANCE-MANAGEMENT",
                                "objects": [
                                    {
                                        "resource": "Systems",
                                        "values": [
                                            "All"
                                        ]
                                    }
                                ]
                            },
                            {
                                "accessTypes": [
                                    "CREATE",
                                    "READ",
                                    "UPDATE",
                                    "DELETE"
                                ],
                                "feature": "USER-MANAGEMENT",
                                "objects": []
                            }
                        ]
                    },
                    "users": [
                        {
                            "ref": "/api/platform/v1/users/user1"
                        },
                        {
                            "ref": "/api/platform/v1/users/user2"
                        }
                    ]
                },
                "properties": {
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "roleDef": {
                        "$ref": "#/components/schemas/RoleDefSummary"
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "metadata",
                    "roleDef"
                ],
                "type": "object"
            },
            "SavedNginxConfigFiles": {
                "description": "Defines configuration response.\n",
                "example": {
                    "auxFiles": {
                        "files": [
                            {
                                "contents": "IyBmaWxlIGNvbnRlbnQ=",
                                "name": "/etc/nginx/aux/somefile.1"
                            }
                        ],
                        "rootDir": "/etc/nginx/aux"
                    },
                    "configFiles": {
                        "files": [
                            {
                                "contents": "ZXZlbnRzIHt9Cmh0dHAgeyAgCiAgICBzZXJ2ZXIgeyAgCiAgICAgICAgbGlzdGVuIDgwOyAgCiAgICAgICAgc2VydmVyX25hbWUgXzsKCiAgICAgICAgcmV0dXJuIDIwMCAiSGVsbG8iOyAgCiAgICB9ICAKfQ==",
                                "name": "/etc/nginx/nginx.conf"
                            }
                        ],
                        "rootDir": "/etc/nginx"
                    },
                    "configName": "test1",
                    "createTime": "2022-06-13T19:40:26.597Z",
                    "uid": "1a8995a2-7230-4bad-99f6-09d2d8b1ef42",
                    "updateTime": "2022-06-13T21:15:15Z"
                },
                "properties": {
                    "auxFiles": {
                        "$ref": "#/components/schemas/AuxData"
                    },
                    "configFiles": {
                        "$ref": "#/components/schemas/ConfigData"
                    }
                },
                "required": [
                    "configFiles",
                    "auxFiles"
                ],
                "type": "object"
            },
            "SavedNginxConfigSummary": {
                "description": "Defines configuration summary data.",
                "properties": {
                    "configName": {
                        "type": "string"
                    },
                    "createTime": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "instGroupUid": {
                        "type": "string"
                    },
                    "nginxUid": {
                        "type": "string"
                    },
                    "uid": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "updateTime": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "configName",
                    "uid",
                    "createTime",
                    "updateTime"
                ],
                "type": "object"
            },
            "ScanInfo": {
                "properties": {
                    "completionTime": {
                        "description": "Time at which the scan was complete.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "duration": {
                        "description": "Duration of the current scan in milliseconds (ms).",
                        "format": "int64",
                        "type": "integer"
                    },
                    "endpointsScanned": {
                        "description": "Number of IP port combinations scanned.",
                        "type": "integer"
                    },
                    "nginxFound": {
                        "description": "Number of NGINX instances found.",
                        "type": "integer"
                    },
                    "percentageComplete": {
                        "description": "Percentage of total endpoints scanned out of 100.",
                        "type": "number"
                    },
                    "request": {
                        "$ref": "#/components/schemas/ScanRequest"
                    },
                    "serversFound": {
                        "description": "Number of servers found.",
                        "type": "integer"
                    },
                    "status": {
                        "description": "The state of the current scan.",
                        "enum": [
                            "not_run",
                            "scanning",
                            "complete",
                            "cancelled",
                            "error"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "ScanRequest": {
                "properties": {
                    "cidr": {
                        "description": "Defines the particular IP address range to scan in CIDR notation.",
                        "type": "string"
                    },
                    "hostDiscovery": {
                        "default": "icmp",
                        "description": "Host discovery is the first step in instance scanning and is used to identify live hosts. When set to none, the host discovery stage is disabled altogether telling the manager to scan every address. By default ICMP probes are used.",
                        "enum": [
                            "none",
                            "icmp"
                        ],
                        "type": "string"
                    },
                    "portRanges": {
                        "description": "Define ports to scan. Includes individual port numbers, as well as ranges separated by a hyphen (e.g. 1-1023).",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "cidr",
                    "portRanges"
                ],
                "type": "object"
            },
            "SecurityEventResult": {
                "description": "A Security Event originating from NGINX App Protect.",
                "properties": {
                    "blocking_exception_reason": {
                        "type": "string"
                    },
                    "bot_anomalies": {
                        "type": "string"
                    },
                    "bot_category": {
                        "type": "string"
                    },
                    "bot_class": {
                        "type": "string"
                    },
                    "bot_signature_name": {
                        "type": "string"
                    },
                    "client_application": {
                        "type": "string"
                    },
                    "client_application_version": {
                        "type": "string"
                    },
                    "client_ip": {
                        "type": "string"
                    },
                    "client_port": {
                        "type": "string"
                    },
                    "correlation_id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "country_code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "destination_addr": {
                        "type": "string"
                    },
                    "destination_port": {
                        "type": "string"
                    },
                    "enforced_bot_anomalies": {
                        "type": "string"
                    },
                    "http_hostname": {
                        "type": "string"
                    },
                    "id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "instance": {
                        "type": "string"
                    },
                    "instance_group": {
                        "type": "string"
                    },
                    "is_truncated": {
                        "type": "string"
                    },
                    "level": {
                        "enum": [
                            "DEBUG",
                            "INFO",
                            "WARNING",
                            "ERROR",
                            "CRITICAL"
                        ],
                        "type": "string"
                    },
                    "method": {
                        "type": "string"
                    },
                    "nginx_id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "outcome": {
                        "type": "string"
                    },
                    "outcome_reason": {
                        "enum": [
                            "SECURITY_NGINX_VIOLATION",
                            "SECURITY_WAF_BYPASS",
                            "SECURITY_WAF_FLAGGED",
                            "SECURITY_WAF_OK",
                            "SECURITY_WAF_VIOLATION",
                            "SECURITY_WAF_VIOLATION_TRANSPARENT"
                        ],
                        "type": "string"
                    },
                    "policy_name": {
                        "type": "string"
                    },
                    "request": {
                        "type": "string"
                    },
                    "response_code": {
                        "type": "string"
                    },
                    "service_id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "severity": {
                        "enum": [
                            "informational",
                            "error",
                            "critical"
                        ],
                        "type": "string"
                    },
                    "signature_cves": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/Signature"
                        },
                        "type": "array"
                    },
                    "status": {
                        "enum": [
                            "blocked",
                            "passed",
                            "alerted"
                        ],
                        "type": "string"
                    },
                    "sub_violations": {
                        "type": "string"
                    },
                    "support_id": {
                        "type": "string"
                    },
                    "system_hostname": {
                        "type": "string"
                    },
                    "system_id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "system_tags": {
                        "type": "string"
                    },
                    "threat_campaign_names": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "violation_contexts": {
                        "type": "string"
                    },
                    "violation_rating": {
                        "type": "string"
                    },
                    "violations": {
                        "type": "string"
                    },
                    "x_forwarded_for_header_value": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "timestamp",
                    "service_id",
                    "correlation_id",
                    "type",
                    "version",
                    "level",
                    "system_id",
                    "system_hostname",
                    "system_tags",
                    "instance",
                    "instance_group",
                    "nginx_id",
                    "support_id",
                    "country_code",
                    "http_hostname",
                    "client_ip",
                    "client_port",
                    "destination_addr",
                    "destination_port",
                    "status",
                    "outcome_reason",
                    "policy_name",
                    "method",
                    "response_code",
                    "severity",
                    "signature_cves",
                    "threat_campaign_names",
                    "url",
                    "description",
                    "request",
                    "outcome",
                    "is_truncated",
                    "x_forwarded_for_header_value",
                    "blocking_exception_reason",
                    "signatures",
                    "violation_rating",
                    "violations",
                    "sub_violations",
                    "bot_class",
                    "bot_anomalies",
                    "bot_category",
                    "bot_signature_name",
                    "client_application",
                    "client_application_version",
                    "enforced_bot_anomalies",
                    "violation_contexts"
                ],
                "type": "object"
            },
            "SecurityEventSubset": {
                "properties": {
                    "client_ip": {
                        "example": "127.0.0.1",
                        "type": "string"
                    },
                    "country_code": {
                        "example": "US",
                        "type": "string"
                    },
                    "id": {
                        "example": "00112233-4455-6677-8899-aabbccddeeff",
                        "format": "uuid",
                        "type": "string"
                    },
                    "level": {
                        "enum": [
                            "DEBUG",
                            "INFO",
                            "WARNING",
                            "ERROR",
                            "CRITICAL"
                        ],
                        "example": "INFO",
                        "type": "string"
                    },
                    "policy_name": {
                        "example": "default policy",
                        "type": "string"
                    },
                    "status": {
                        "example": "blocked",
                        "type": "string"
                    },
                    "support_id": {
                        "example": "12345678912345678911",
                        "type": "string"
                    },
                    "timestamp": {
                        "example": "2019-08-07T09:57:36.088757764Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "/home",
                        "type": "string"
                    },
                    "violation_rating": {
                        "example": "5",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "timestamp",
                    "support_id",
                    "level",
                    "url",
                    "country_code",
                    "client_ip",
                    "violation_rating",
                    "status",
                    "policy_name"
                ],
                "type": "object"
            },
            "SecurityLogProfileGetResponse": {
                "properties": {
                    "logProfileContent": {
                        "description": "The base64 encoded contents of the security log profile.",
                        "example": "ewoJImZpbHRlciI6IHsKCQkicmVxdWVzdF90eXBlIjogImJsb2NrZWQiCgl9LAoJImNvbnRlbnQiOiB7CgkJImZvcm1hdCI6ICJkZWZhdWx0IiwKCQkibWF4X3JlcXVlc3Rfc2l6ZSI6ICJhbnkiLAoJCSJtYXhfbWVzc2FnZV9zaXplIjogIjVrIgoJfQp9Cg==",
                        "maxLength": 3145728,
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/SecurityLogProfileResponseMetadata"
                    }
                },
                "required": [
                    "metadata"
                ],
                "type": "object"
            },
            "SecurityLogProfileList": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/SecurityLogProfileGetResponse"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "SecurityLogProfileResponseMetadata": {
                "properties": {
                    "created": {
                        "description": "The time when the security policy was created.",
                        "example": "2022-04-10T23:19:58.502Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "modified": {
                        "description": "The time when the security policy was last modified.",
                        "example": "2022-04-12T23:19:58.502Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "description": "The unique name for the security log profile.",
                        "example": "log_blocked",
                        "type": "string"
                    },
                    "revisionTimestamp": {
                        "description": "The timestamp of the revision for the security policy.",
                        "example": "2022-04-12T23:19:58.502Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The globally unique identifier for the security policy.",
                        "example": "21daa130-4ba4-442b-bc4e-ab294af123e5",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "uid",
                    "revisionTimestamp",
                    "created",
                    "modified"
                ],
                "type": "object"
            },
            "SecurityPolicyCreateRequest": {
                "properties": {
                    "content": {
                        "description": "The base64 encoded contents of the security policy file.",
                        "example": "ewoJInBvbGljeSI6IHsKCQkibmFtZSI6ICJzaW1wbGUtYmxvY2tpbmctcG9saWN5IiwKCQkic2lnbmF0dXJlcyI6IFsKCQkJewoJCQkJInNpZ25hdHVyZUlkIjogMjAwMDAxODM0LAoJCQkJImVuYWJsZWQiOiBmYWxzZQoJCQl9CgkJXSwKCQkidGVtcGxhdGUiOiB7CgkJCSJuYW1lIjogIlBPTElDWV9URU1QTEFURV9OR0lOWF9CQVNFIgoJCX0sCgkJImFwcGxpY2F0aW9uTGFuZ3VhZ2UiOiAidXRmLTgiLAoJCSJlbmZvcmNlbWVudE1vZGUiOiAiYmxvY2tpbmciCgl9Cn0=",
                        "maxLength": 3145728,
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/SecurityPolicyRequestMetadata"
                    }
                },
                "required": [
                    "metadata",
                    "content"
                ],
                "type": "object"
            },
            "SecurityPolicyCreateResponse": {
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/SecurityPolicyResponseMetadata"
                    },
                    "selfLink": {
                        "$ref": "#/components/schemas/SelfLinks"
                    }
                },
                "required": [
                    "metadata",
                    "selfLink"
                ],
                "type": "object"
            },
            "SecurityPolicyGetResponse": {
                "properties": {
                    "content": {
                        "description": "The base64 encoded contents of the security policy file.",
                        "example": "ewoJInBvbGljeSI6IHsKCQkibmFtZSI6ICJzaW1wbGUtYmxvY2tpbmctcG9saWN5IiwKCQkic2lnbmF0dXJlcyI6IFsKCQkJewoJCQkJInNpZ25hdHVyZUlkIjogMjAwMDAxODM0LAoJCQkJImVuYWJsZWQiOiBmYWxzZQoJCQl9CgkJXSwKCQkidGVtcGxhdGUiOiB7CgkJCSJuYW1lIjogIlBPTElDWV9URU1QTEFURV9OR0lOWF9CQVNFIgoJCX0sCgkJImFwcGxpY2F0aW9uTGFuZ3VhZ2UiOiAidXRmLTgiLAoJCSJlbmZvcmNlbWVudE1vZGUiOiAiYmxvY2tpbmciCgl9Cn0=",
                        "maxLength": 3145728,
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/SecurityPolicyResponseMetadata"
                    }
                },
                "required": [
                    "metadata",
                    "content"
                ],
                "type": "object"
            },
            "SecurityPolicyList": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/SecurityPolicyGetResponse"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "SecurityPolicyRequestMetadata": {
                "properties": {
                    "description": {
                        "description": "Description for the security policy.",
                        "example": "Ignore cross-site scripting is a security policy that intentionally ignores cross site scripting.",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "Non-unique alternate name to show for the security policy.",
                        "example": "Ignore cross-site scripting",
                        "type": "string"
                    },
                    "name": {
                        "description": "The unique name for the security policy. Should be globally unique across the NGINX Instance Manager.",
                        "example": "ignore-cross-site-scripting",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "SecurityPolicyResponseMetadata": {
                "properties": {
                    "created": {
                        "description": "The time when the security policy was created.",
                        "example": "2022-04-10T23:19:58.502Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description for the security policy.",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "Non-unique alternate name to show for the security policy.",
                        "example": "Ignore cross-site scripting",
                        "type": "string"
                    },
                    "modified": {
                        "description": "The time when the security policy was last modified.",
                        "example": "2022-04-12T23:19:58.502Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "description": "The unique name for the security policy.",
                        "example": "ignore-cross-site-scripting",
                        "type": "string"
                    },
                    "revisionTimestamp": {
                        "description": "The timestamp of the revision for the security policy.",
                        "example": "2022-04-12T23:19:58.502Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The globally unique identifier for the security policy.",
                        "example": "21daa130-4ba4-442b-bc4e-ab294af123e5",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "uid",
                    "revisionTimestamp",
                    "created",
                    "modified"
                ],
                "type": "object"
            },
            "SelfLinks": {
                "description": "The SelfLinks object contains a link from the resource to itself.\nThis object is used only in responses.\n",
                "properties": {
                    "rel": {
                        "description": "`rel` contains the complete path fragment of a URI and can be used\nto construct a query to the object.\n",
                        "example": "/api/platform/v1/services/environments/prod",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Series": {
                "properties": {
                    "dimensions": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "instance_group": "prod",
                            "server_zone": "prod_zone"
                        },
                        "type": "object"
                    },
                    "timestamps": {
                        "example": [
                            "2019-08-07T09:57:30",
                            "2019-08-07T09:57:35"
                        ],
                        "items": {
                            "format": "date-time",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "values": {
                        "example": [
                            4.2,
                            4.4
                        ],
                        "items": {
                            "type": "number"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ServerResponse": {
                "properties": {
                    "certs": {
                        "items": {
                            "$ref": "#/components/schemas/FoundCert"
                        },
                        "type": "array"
                    },
                    "createTime": {
                        "description": "Time at which the server was found.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "cves": {
                        "items": {
                            "$ref": "#/components/schemas/CVE"
                        },
                        "type": "array"
                    },
                    "links": {
                        "items": {
                            "$ref": "#/components/schemas/NamedLinks"
                        },
                        "type": "array"
                    },
                    "network": {
                        "items": {
                            "$ref": "#/components/schemas/Endpoint"
                        },
                        "type": "array"
                    },
                    "nginxType": {
                        "description": "Nginx Product Type.",
                        "enum": [
                            "oss",
                            "plus"
                        ],
                        "type": "string"
                    },
                    "nginxUid": {
                        "description": "The NGINX instance identifier to associate the found server with.",
                        "type": "string"
                    },
                    "serverApplication": {
                        "description": "The name of the software that handled the request.",
                        "type": "string"
                    },
                    "systemUid": {
                        "description": "The system identifier to associate the found server with.",
                        "type": "string"
                    },
                    "updateTime": {
                        "description": "Time at which the server was modified.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "vendor": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "network",
                    "createTime",
                    "updateTime",
                    "certs"
                ],
                "type": "object"
            },
            "ServiceVersion": {
                "properties": {
                    "name": {
                        "description": "Service name.",
                        "example": "myservice",
                        "type": "string"
                    },
                    "version": {
                        "description": "Semver version of the service.",
                        "example": "v0.0.1-githashabc123",
                        "type": "string"
                    }
                },
                "required": [
                    "version",
                    "name"
                ],
                "type": "object"
            },
            "Signature": {
                "description": "Attack Signature data.",
                "properties": {
                    "blocking_mask": {
                        "type": "string"
                    },
                    "buffer": {
                        "type": "string"
                    },
                    "length": {
                        "type": "string"
                    },
                    "offset": {
                        "type": "string"
                    },
                    "signature_accuracy": {
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "type": "string"
                    },
                    "signature_id": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "signature_name": {
                        "type": "string"
                    },
                    "signature_risk": {
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "signature_id",
                    "signature_name",
                    "signature_accuracy",
                    "signature_risk",
                    "buffer",
                    "offset",
                    "length",
                    "blocking_mask"
                ],
                "type": "object"
            },
            "SignatureResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "example": "Unix hidden (dot-file)",
                        "type": "string"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "Source": {
                "description": "Read only value. Indicates where the user's account is managed:\n* Internal users are created for use with Basic Auth and are managed internally.\n* IDP users are created for use with OIDC and are managed externally.\n",
                "enum": [
                    "Internal",
                    "IDP"
                ],
                "type": "string"
            },
            "SslCertificate": {
                "description": "SSL Certificate\n",
                "properties": {
                    "fileName": {
                        "description": "file path of the certificate",
                        "type": "string"
                    },
                    "issuer": {
                        "$ref": "#/components/schemas/CertificateName"
                    },
                    "ocspURL": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "publicKeyAlgorithm": {
                        "type": "string"
                    },
                    "serialNumber": {
                        "type": "string"
                    },
                    "signatureAlgorithm": {
                        "type": "string"
                    },
                    "size": {
                        "description": "the certificate file size in bytes",
                        "type": "integer"
                    },
                    "subject": {
                        "$ref": "#/components/schemas/CertificateName"
                    },
                    "subjectAltNames": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updateTime": {
                        "description": "Modified time of the file",
                        "format": "date-time",
                        "type": "string"
                    },
                    "validity": {
                        "$ref": "#/components/schemas/CertificateDates"
                    }
                },
                "required": [
                    "fileName",
                    "size",
                    "updateTime",
                    "validity",
                    "issuer",
                    "subject",
                    "subjectAltNames",
                    "serialNumber"
                ],
                "type": "object"
            },
            "SslCertificates": {
                "description": "Array of SSL Certificates",
                "items": {
                    "$ref": "#/components/schemas/SslCertificate"
                },
                "type": "array"
            },
            "State": {
                "properties": {
                    "currentInstance": {
                        "$ref": "#/components/schemas/CurrentInstance"
                    }
                },
                "required": [
                    "currentInstance"
                ],
                "type": "object"
            },
            "StaticAnalysis": {
                "properties": {
                    "errorCount": {
                        "description": "The number of errors discovered in the configuration.",
                        "type": "integer"
                    },
                    "issues": {
                        "description": "A list of issues discovered in this configuration.",
                        "items": {
                            "$ref": "#/components/schemas/IssueDetails"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Status": {
                "description": "Information about status",
                "properties": {
                    "lastStatusReport": {
                        "description": "The time of the last report for this object",
                        "format": "date-time",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state of the object",
                        "enum": [
                            "unknown",
                            "online",
                            "offline"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "lastStatusReport",
                    "state"
                ],
                "type": "object"
            },
            "Subscription": {
                "description": "Defines the features of a subscription.",
                "properties": {
                    "id": {
                        "description": "Subscription ID.",
                        "example": "b6d7c577-b708-44ad-839c-9743f85fcf7c",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "SystemDetails": {
                "description": "The read-only properties of the system.",
                "properties": {
                    "bootTime": {
                        "description": "The system boot time.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "diskPartitions": {
                        "description": "The disk partition data.",
                        "items": {
                            "$ref": "#/components/schemas/DiskPartition"
                        },
                        "type": "array"
                    },
                    "networkInterfaces": {
                        "description": "The system networking details.",
                        "items": {
                            "$ref": "#/components/schemas/NetworkInterface"
                        },
                        "type": "array"
                    },
                    "osRelease": {
                        "$ref": "#/components/schemas/ReleaseInfo"
                    },
                    "osType": {
                        "description": "The operating system type.",
                        "enum": [
                            "linux"
                        ],
                        "type": "string"
                    },
                    "processor": {
                        "description": "The system CPU resources.",
                        "items": {
                            "$ref": "#/components/schemas/CPUInfo"
                        },
                        "type": "array"
                    },
                    "uname": {
                        "description": "System information from uname(1) command.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SystemPatchRequest": {
                "example": {
                    "$ref": "#/components/examples/SystemPatchRequest"
                },
                "properties": {
                    "displayName": {
                        "description": "The human readable name of the system.",
                        "maxLength": 512,
                        "type": "string"
                    },
                    "tags": {
                        "description": "A list of tags to apply to this system.",
                        "items": {
                            "example": "aws-east-1,aws-west-2",
                            "maxLength": 512,
                            "minLength": 1,
                            "pattern": "^[^\\s\\x00-\\x1f\\x60\\x7f\\,\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?=\u0026\\~\\^|#\u003c\u003e]+$",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "SystemResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SystemSummary"
                    },
                    {
                        "$ref": "#/components/schemas/SystemDetails"
                    }
                ],
                "description": "The system object represents the host operating system of the NGINX instances reported by the\nagent.\n"
            },
            "SystemSummary": {
                "description": "Brief description of the dataplane operating system running an NGINX instance.",
                "example": {
                    "$ref": "#/components/examples/SystemSummaryResponse"
                },
                "properties": {
                    "agent": {
                        "$ref": "#/components/schemas/Agent"
                    },
                    "appProtect": {
                        "$ref": "#/components/schemas/AppProtect"
                    },
                    "displayName": {
                        "description": "The name to display. The default value is the system hostname.",
                        "type": "string"
                    },
                    "hostname": {
                        "description": "The hostname of the system.",
                        "type": "string"
                    },
                    "links": {
                        "items": {
                            "$ref": "#/components/schemas/NamedLinks"
                        },
                        "type": "array"
                    },
                    "nginxInstances": {
                        "description": "Summary information for the instances of NGINX executing on the system.",
                        "items": {
                            "$ref": "#/components/schemas/NginxInstanceSummary"
                        },
                        "type": "array"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Status"
                    },
                    "tags": {
                        "description": "A set of labels to apply to this system.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "uid": {
                        "description": "The UID of the system.",
                        "type": "string"
                    }
                },
                "required": [
                    "uid",
                    "hostname",
                    "displayName",
                    "agent",
                    "tags",
                    "nginxInstances"
                ],
                "type": "object"
            },
            "SystemSummaryListResponse": {
                "description": "List of dataplane operating system descriptions running NGINX instances.",
                "example": {
                    "$ref": "#/components/examples/SystemSummaryListResponse"
                },
                "properties": {
                    "count": {
                        "description": "The total number of systems.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "items": {
                        "description": "The list of system descriptions.",
                        "items": {
                            "$ref": "#/components/schemas/SystemSummary"
                        },
                        "type": "array"
                    },
                    "itemsPerPage": {
                        "description": "The number of resources returned in a list response page",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "startIndex": {
                        "description": "The zero-based index of the first result in the current set of list results",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "items",
                    "count"
                ],
                "type": "object"
            },
            "SystemSummaryResponse": {
                "description": "Description of dataplane operating system running NGINX instance(s)",
                "properties": {
                    "system": {
                        "$ref": "#/components/schemas/SystemSummary"
                    }
                },
                "required": [
                    "system"
                ],
                "type": "object"
            },
            "SystemTagsResponse": {
                "description": "List of tags associated with system hosts of all NGINX instances.",
                "properties": {
                    "items": {
                        "description": "The list of tags.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "Template": {
                "properties": {
                    "contents": {
                        "description": "The base64 encoded contents of the template.",
                        "type": "string"
                    },
                    "created": {
                        "description": "Time at which the template was created.",
                        "example": "2021-08-30T23:09:58.403Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "groups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "modified": {
                        "description": "Time at which the template was last modified.",
                        "example": "2021-08-30T23:09:58.403Z",
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "example": "template-foo-01",
                        "type": "string"
                    },
                    "parent": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "schema": {
                        "description": "The base64 encoded contents of the template schema.",
                        "type": "string"
                    },
                    "uid": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "version": {
                        "description": "semantic version of the template",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "version",
                    "contents"
                ],
                "type": "object"
            },
            "TemplateGroup": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "templates": {
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "templates"
                ],
                "type": "object"
            },
            "TemplateList": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Template"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "ThreatCampaign": {
                "description": "Reference to an object that degined a threat campaign.\n",
                "properties": {
                    "uid": {
                        "format": "uuid",
                        "type": "string"
                    },
                    "versionDateTime": {
                        "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)\n",
                        "pattern": "^$|\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ThreatCampaignAssociationDetails": {
                "description": "The threat campaign revision association details.",
                "properties": {
                    "instance": {
                        "$ref": "#/components/schemas/InstanceAssoc"
                    },
                    "instanceGroup": {
                        "$ref": "#/components/schemas/InstanceGroupAssoc"
                    },
                    "threatCampaignVersionDateTime": {
                        "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)",
                        "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    }
                },
                "required": [
                    "threatCampaignVersionDateTime",
                    "instanceGroup",
                    "instance"
                ],
                "type": "object"
            },
            "ThreatCampaignCreateRequest": {
                "properties": {
                    "filename": {
                        "description": "Single tgz file containing the threat campaign, update and version files.\n\nThe contents of the .tgz are listed below and typically come from a rpm/deb downloaded install package \nlocated on a system (not NMS). All the below files must be included in the .tgz:\n\n - threat_campaigns.bin.tgz\n - threat_campaign_update.yaml\n - version\n",
                        "format": "binary",
                        "type": "string"
                    },
                    "revisionTimestamp": {
                        "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)\n",
                        "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    }
                },
                "required": [
                    "revisionTimestamp",
                    "filename"
                ],
                "type": "object"
            },
            "ThreatCampaignDeploymentAssocResponse": {
                "properties": {
                    "associations": {
                        "description": "The list of threat campaign associations.",
                        "items": {
                            "$ref": "#/components/schemas/ThreatCampaignAssociationDetails"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "associations"
                ],
                "type": "object"
            },
            "ThreatCampaignDeploymentCount": {
                "description": "The threat campaign revision and number of deployments.",
                "properties": {
                    "deployedCount": {
                        "type": "integer"
                    },
                    "threatCampaignVersionDateTime": {
                        "description": "A formatted yyyy.mm.dd (e.g. 2022.07.11)",
                        "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    }
                },
                "required": [
                    "threatCampaignVersionDateTime",
                    "deployedCount"
                ],
                "type": "object"
            },
            "ThreatCampaignDeploymentsCountResponse": {
                "properties": {
                    "versions": {
                        "description": "The list of threat campaign versions.",
                        "items": {
                            "$ref": "#/components/schemas/ThreatCampaignDeploymentCount"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "versions"
                ],
                "type": "object"
            },
            "ThreatCampaignList": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/ThreatCampaignResponse"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object"
            },
            "ThreatCampaignResponse": {
                "properties": {
                    "revisionTimestamp": {
                        "description": "The timestamp of the revision for the threat campaign.",
                        "example": "2022.04.12",
                        "pattern": "^\\d{4}.\\d{2}.\\d{2}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The globally unique identifier for the threat campaign.",
                        "example": "21daa130-4ba4-442b-bc4e-ab294af123f4",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "revisionTimestamp",
                    "uid"
                ],
                "type": "object"
            },
            "ThreatCampaignResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "example": "Campaign A",
                        "type": "string"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "policies",
                    "urls",
                    "violations"
                ],
                "type": "object"
            },
            "Time": {
                "description": "Indicates a point in time.\n\nYou can provide time using ISO 8601 format or as an offset. An offset is a string that starts with `+` or `-`, followed by a number and a unit of time (`y`, `M`, `w`, `d`, `h`, `m` or `s`).\nExamples: \"2019-08-07T09:57:36.088757764Z\", \"now-3h\"\n",
                "example": "2019-08-07T09:57:36.088757764Z",
                "type": "string"
            },
            "TimeSeries": {
                "properties": {
                    "timestamps": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "values": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "timestamps",
                    "values"
                ],
                "type": "object"
            },
            "URLResult": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "url": {
                        "example": "/home",
                        "type": "string"
                    },
                    "violations": {
                        "type": "integer"
                    }
                },
                "required": [
                    "url",
                    "hits",
                    "ips",
                    "policies",
                    "violations"
                ],
                "type": "object"
            },
            "UnitOfMeasure": {
                "description": "Unit of measure used for computing consumption.",
                "enum": [
                    "INSTANCES",
                    "WORKLOADS",
                    "DATA_PER_HOUR_IN_GB",
                    "SUCCESSFUL_API_CALLS_IN_MILLIONS",
                    "SUCCESSFUL_API_CALLS"
                ],
                "example": "WORKLOADS",
                "type": "string"
            },
            "UpdateConfigRequest": {
                "properties": {
                    "auxFiles": {
                        "$ref": "#/components/schemas/AuxData"
                    },
                    "configFiles": {
                        "$ref": "#/components/schemas/ConfigData"
                    },
                    "configName": {
                        "maxLength": 1024,
                        "minLength": 1,
                        "not": {
                            "enum": [
                                ".",
                                ".."
                            ]
                        },
                        "pattern": "^[^\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=\u0026\\~\\^|#\u003c\u003e]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "configName",
                    "configFiles"
                ],
                "type": "object"
            },
            "UpdateUser": {
                "example": {
                    "metadata": {
                        "createTime": "2019-07-29T09:12:33.001Z",
                        "description": "NGINX Manager user with a production environment role.",
                        "displayName": "Jane Doe",
                        "kind": "user",
                        "name": "john.doe"
                    },
                    "userDef": {
                        "firstName": "Jane",
                        "lastName": "Doe",
                        "roles": [
                            {
                                "ref": "/api/platform/v1/roles/new"
                            }
                        ]
                    }
                },
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "userDef": {
                        "$ref": "#/components/schemas/UpdateUserDef"
                    }
                },
                "required": [
                    "metadata",
                    "userDef"
                ],
                "type": "object"
            },
            "UpdateUserDef": {
                "example": {
                    "firstName": "Jane",
                    "lastName": "Doe",
                    "roles": [
                        {
                            "ref": "/api/platform/v1/roles/new"
                        }
                    ]
                },
                "properties": {
                    "email": {
                        "description": "An email address of the account owner.",
                        "example": "john.doe@nginx.com",
                        "format": "email",
                        "type": "string"
                    },
                    "firstName": {
                        "description": "Given name.",
                        "example": "Jane",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "lastName": {
                        "description": "Surname.",
                        "example": "Doe",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "roles": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "UploadConfigRequest": {
                "example": {
                    "$ref": "#/components/examples/UploadConfigRequest"
                },
                "properties": {
                    "auxFiles": {
                        "$ref": "#/components/schemas/AuxData"
                    },
                    "configFiles": {
                        "$ref": "#/components/schemas/ConfigData"
                    },
                    "configName": {
                        "maxLength": 1024,
                        "minLength": 1,
                        "not": {
                            "enum": [
                                ".",
                                ".."
                            ]
                        },
                        "pattern": "^[^\\s\\x00-\\x1f\\x60\\x7f\\;\\*\\\"\\[\\]\\{\\}\\\\\\/%\\?:=\u0026\\~\\^|#\u003c\u003e]+$",
                        "type": "string"
                    },
                    "instGroupUid": {
                        "description": "The NGINX instance group identifier to associate the uploaded config with",
                        "format": "uuid",
                        "type": "string"
                    },
                    "nginxUid": {
                        "description": "The NGINX instance identifier to associate the uploaded config with",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "configName",
                    "configFiles"
                ],
                "type": "object"
            },
            "UploadConfigResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SavedNginxConfigSummary"
                    },
                    {
                        "$ref": "#/components/schemas/ConfigUploadResult"
                    },
                    {
                        "$ref": "#/components/schemas/AuxUploadResult"
                    }
                ],
                "description": "Defines staged configuration upload results.",
                "example": {
                    "$ref": "#/components/examples/UploadConfigResponse"
                },
                "type": "object"
            },
            "UploadResult": {
                "description": "Details of the file actions\n",
                "properties": {
                    "filesAdded": {
                        "type": "integer"
                    },
                    "filesDeleted": {
                        "type": "integer"
                    },
                    "filesUpdated": {
                        "type": "integer"
                    }
                },
                "required": [
                    "filesAdded",
                    "filesDeleted",
                    "filesUpdated"
                ],
                "type": "object"
            },
            "User": {
                "properties": {
                    "groups": {
                        "description": "Applicable to SSO users. The list of groups they are a member of.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResourceMeta"
                    },
                    "userDef": {
                        "$ref": "#/components/schemas/UserDef"
                    }
                },
                "required": [
                    "metadata",
                    "userDef"
                ],
                "type": "object"
            },
            "UserDef": {
                "properties": {
                    "email": {
                        "description": "An email address of the account owner.",
                        "example": "john.doe@nginx.com",
                        "format": "email",
                        "type": "string"
                    },
                    "firstName": {
                        "description": "Given name.",
                        "example": "John",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "lastLogin": {
                        "description": "Unix time (seconds since Epoch) of last login.",
                        "example": 1570132969,
                        "type": "integer"
                    },
                    "lastName": {
                        "description": "Surname.",
                        "example": "Doe",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "roles": {
                        "description": "List of Roles the user is associated with.\n* For non-SSO users these are the roles assigned directly combined with roles associated to groups they are a member of.\n* For SSO users these are the roles associated with the groups they are a member of.\n",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        },
                        "type": "array"
                    },
                    "source": {
                        "$ref": "#/components/schemas/Source"
                    }
                },
                "required": [
                    "firstName",
                    "lastName",
                    "email"
                ],
                "type": "object"
            },
            "UserListResponse": {
                "properties": {
                    "count": {
                        "description": "The total number of groups.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "items": {
                        "description": "List of User resources.",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "type": "array"
                    },
                    "itemsPerPage": {
                        "description": "The number of resources returned in a list response page",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "startIndex": {
                        "description": "The 1-based index of the first result in the current set of list results",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "count"
                ],
                "type": "object"
            },
            "Violation": {
                "properties": {
                    "hits": {
                        "type": "integer"
                    },
                    "ips": {
                        "type": "integer"
                    },
                    "name": {
                        "example": "Unsupported browser",
                        "type": "string"
                    },
                    "policies": {
                        "type": "integer"
                    },
                    "urls": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "hits",
                    "ips",
                    "policies",
                    "urls"
                ],
                "type": "object"
            }
        }
    },
    "info": {
        "description": "The API Reference documentation for NGINX Instance Manager",
        "termsOfService": "https://docs.nginx.com/nginx-instance-manager/",
        "title": "NGINX Instance Manager Spec",
        "version": "v1"
    },
    "openapi": "3.0.3",
    "paths": {
        "/analysis": {
            "post": {
                "description": "Generates a report from the uploaded NGINX configuration.",
                "operationId": "createReport",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "ConfigAnalysisRequest": {
                                    "$ref": "#/components/examples/ConfigAnalysisRequest"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/ConfigAnalysisRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "AnalysisResponse": {
                                        "$ref": "#/components/examples/AnalysisResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/AnalysisResponse"
                                }
                            }
                        },
                        "description": "Successfully created the configuration report."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11010,
                                    "message": "Error generating report: could not parse the request payload. Check the format of the request, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, malformed or unparsable configuration."
                    }
                },
                "summary": "Performs configuration analysis.",
                "tags": [
                    "Analyzer"
                ]
            }
        },
        "/analytics/catalogs/dimensions": {
            "get": {
                "description": "Lists all of the Dimension resources in the Catalog.\n\nDimensions provide a means of refining the data returned by metrics and events queries.\nYou can use the List Dimensions Catalog endpoint to find out what Dimensions are available.\nThen, use the Get a Dimension endpoint to find out more about a specific dimension.\n",
                "operationId": "listDimensionsDescriptions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DimensionsDescriptionsResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Dimensions Catalog list."
                    }
                },
                "summary": "List the Dimensions Catalog",
                "tags": [
                    "Catalogs"
                ]
            }
        },
        "/analytics/catalogs/dimensions/{dimensionName}": {
            "get": {
                "description": "Gets the description of the specified Dimension resource.\n",
                "operationId": "getDimensionDescription",
                "parameters": [
                    {
                        "description": "Name of the Dimension",
                        "in": "path",
                        "name": "dimensionName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DimensionDescriptionRecord"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Dimension resource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The specified Dimension resource was not found."
                    }
                },
                "summary": "Get a Dimension Description",
                "tags": [
                    "Catalogs"
                ]
            }
        },
        "/analytics/catalogs/events": {
            "get": {
                "description": "Lists all of the Event resources in the Catalog.\n\nThe Events Catalog contains the definitions for all of the available events.\nYou can use the List Events Catalog endpoint to find out what Events are available.\nThen, use the Get Event endpoint to find out more about a specific Event.\n",
                "operationId": "listEventsDescriptions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventsDescriptionsResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Events Catalog list."
                    }
                },
                "summary": "List the Events Catalog",
                "tags": [
                    "Catalogs"
                ]
            }
        },
        "/analytics/catalogs/events/{eventName}": {
            "get": {
                "description": "Gets the description of the specified Event.\n",
                "operationId": "getEventDescription",
                "parameters": [
                    {
                        "description": "Name of the Event resource.",
                        "in": "path",
                        "name": "eventName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventDescriptionRecord"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Event resource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The specified Event resource was not found."
                    }
                },
                "summary": "Get an Event Description",
                "tags": [
                    "Catalogs"
                ]
            }
        },
        "/analytics/catalogs/metrics": {
            "get": {
                "description": "Lists all of the Metric resources in the Catalog.\n\nThe Metrics Catalog contains the definitions for all of the available NGINX and NGINX Manager Agent metrics.\nYou can use the Catalogs API to find information about the available Metrics, then use those Metrics to refine your Analytics data queries.\n",
                "operationId": "listMetricsDescriptions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetricsDescriptionsResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the Metrics Catalog list."
                    }
                },
                "summary": "List the Metrics Catalog",
                "tags": [
                    "Catalogs"
                ]
            }
        },
        "/analytics/catalogs/metrics/{metricName}": {
            "get": {
                "description": "Gets the description of the specified Metric.\n",
                "operationId": "getMetricDescription",
                "parameters": [
                    {
                        "description": "Name of the Metric resource.",
                        "in": "path",
                        "name": "metricName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetricDescriptionRecord"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Metric resource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The specified Metric resource was not found."
                    }
                },
                "summary": "Get a Metric Description",
                "tags": [
                    "Catalogs"
                ]
            }
        },
        "/analytics/events": {
            "get": {
                "description": "Returns a list of system Events.",
                "operationId": "queryEvents",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "description": "Indicates how the results will be ordered.\n\nConsists of at most three comma-separated clauses in the form `\u003cdimension\u003e\u003csingle space\u003e\u003csort order\u003e` or `\u003cdimension\u003e` where:\n- `\u003cdimension\u003e` is the name of the dimension.\n- `\u003csort order\u003e` is the order by which the specified dimension will be sorted. Valid sort order is either \"ASC\" for ascending order, or \"DESC\" for descending order. If no sort order is provided, the default one (\"ASC\") will be used.\n\nNote that if no orderBy is provided, the default combination of descending \"timestamp\" and ascending \"id\" will be used regardless. If you provide different order for \"timestamp\" or \"id\" in orderBy, the default one will be overwritten.\n",
                        "in": "query",
                        "name": "orderBy",
                        "schema": {
                            "example": "name ASC,timestamp DESC",
                            "type": "string"
                        }
                    },
                    {
                        "description": "page number",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "default": 1,
                            "example": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Transactional token used for pagination.\n\nThe token ensures consistency of the query results across requests for various pages of data. It provides a snapshot of the database contents from the time at which the query was received.\n\nIf `pageToken` is not provided with a page request, a token is automatically generated and will be returned in the response metadata. You should include the token in subsequent requests for pages in the query results.\n\nSending a query without a `pageToken` refreshes the query results.\n",
                        "in": "query",
                        "name": "pageToken",
                        "schema": {
                            "example": "1573653786",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Defines the number of returned items per page.\n\n- The maximum value is 100. If value is greater, it is automatically set down to 100.\n- If `pageSize`=0, pagination is disabled and all Events will be returned in response.\n- The response size is limited to 10,000 results. If the number of results exceeds 10,000 a warning is returned.\n",
                        "in": "query",
                        "name": "pageSize",
                        "schema": {
                            "default": 100,
                            "example": 10,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Defines if the Metadata should include the total count of events.\n",
                        "in": "query",
                        "name": "includeTotal",
                        "schema": {
                            "default": false,
                            "example": true,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventQueryResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Events."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    }
                },
                "summary": "Get Events",
                "tags": [
                    "Events"
                ]
            }
        },
        "/analytics/events/{id}": {
            "get": {
                "description": "Returns the specified Event.",
                "operationId": "queryEventsByID",
                "parameters": [
                    {
                        "description": "Identifies the Event that you want to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "example": "00112233-4455-6677-8899-aabbccddeeff",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested Event."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    }
                },
                "summary": "Get an Event",
                "tags": [
                    "Events"
                ]
            }
        },
        "/analytics/metrics": {
            "get": {
                "description": "Returns system Metrics data based on the query parameters provided.\n\nSupports filtering based on name and/or timestamp; aggregation over a configurable time span; and grouping by dimension.\n",
                "operationId": "queryMetrics",
                "parameters": [
                    {
                        "description": "Identifies the Metrics data that you want to receive.\n\n- Provide multiple names as a comma-separated list.\n- You can provide an aggregate function for each Metric (`AVG`, `SUM`, `COUNT`, `MAX`, `MIN`, or `RATE`).\n- Combining non-aggregated and aggregated Metrics in a single query would apply any `groupBy` clause to only the latter.\n- Metrics with aggregates require the `startTime` parameter.\n",
                        "in": "query",
                        "name": "names",
                        "required": true,
                        "schema": {
                            "example": "AVG(agent.cpu.system),SUM(plus.upstream.bytes_rcvd)",
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "description": "Changes the granularity of the returned data.\n\n- Must be a valid duration -- a string starting with a number followed by a unit of time (`y`, `M`, `w`, `d`, `h`, `m` or `s`).\n- When using a resolution, you must provide an aggregate function (or functions) in the `names` parameter and `startTime`.\n- If you do not provide a resolution, the maximum available resolution will be returned (`endTime` - `startTime`).\n",
                        "in": "query",
                        "name": "resolution",
                        "schema": {
                            "example": "30s",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Groups the results according to the specified dimension(s).\n\n- Provide multiple dimension names as a comma-separated list.\n- All Metric names that you pass into the `names` parameter must be aggregated for the `groupBy` to work.\n",
                        "in": "query",
                        "name": "groupBy",
                        "schema": {
                            "example": "server_zone,instance_group",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sets an upper limit on the number of series returned.\nAlways returns additional series with dimension value named `all` (aggregating the values of all the metrics included in the results).\nIf the result does not include `all` stored dimensions values, the Metrics query returns series with dimension value named `other` (aggregating the values of all the metrics not included in the results).\nHas to be used along with the `orderSeriesBy` parameter.\n\n- Exactly one groupBy parameter must be provided in the query\n- Cannot be used along with `dimensions` parameter.\n",
                        "in": "query",
                        "name": "seriesLimit",
                        "schema": {
                            "example": 25,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Sorts the results according to the order specified. \n\nUsed along with the `seriesLimit` parameter.\n",
                        "in": "query",
                        "name": "orderSeriesBy",
                        "schema": {
                            "default": "SUM DESC",
                            "example": "MAX DESC",
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of dimensions that should be returned in the response for each metric series.\n\nDimensions not specified in this parameter will be hidden in the results.\nThis might result in series having exact same dimension set, but being visible as separate.\n\nIf the `aggregation` and `groupBy` parameters are provided for a metric, any dimension provided in\nthe `dimensions` query parameter also has to be provided in the `groupBy` parameter.\n\nDimensions provided in the `groupBy` query parameter do not have to be provided in the `dimensions` query parameter.\n\n- To get a single series, provide the metric name with aggregation and the dimensions parameter with an empty value.\n- Cannot be used along with `seriesLimit`.\n",
                        "in": "query",
                        "name": "dimensions",
                        "schema": {
                            "example": "server_zone,instance_group",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetricQueryResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Metrics data."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Metrics",
                "tags": [
                    "Metrics"
                ]
            }
        },
        "/analytics/security/events": {
            "get": {
                "description": "Return Security Events based on given query parameters.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "querySecurityEvents",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "$ref": "#/components/parameters/PageToken"
                    },
                    {
                        "$ref": "#/components/parameters/PageSize"
                    },
                    {
                        "$ref": "#/components/parameters/IncludeTotal"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "Metadata": {
                                        "links": {
                                            "next": {
                                                "rel": "/api/platform/v1/analytics/securitymonitor/events?filter=country='US'\u0026page=2\u0026pageToken=1666847937\u0026pageSize=2\u0026includeTotal=true"
                                            },
                                            "prev": []
                                        },
                                        "pageToken": "1666847937",
                                        "total": 2
                                    },
                                    "items": [
                                        {
                                            "client_ip": "127.0.0.1",
                                            "country_code": "US",
                                            "id": "d1cd4806-3519-4c72-a0e4-63fd611ee6fb",
                                            "level": "WARNING",
                                            "policy_name": "default_policy",
                                            "status": "blocked",
                                            "support_id": "12345678912345678911",
                                            "timestamp": "2022-10-26T06:57:03Z",
                                            "url": "/home",
                                            "violation_rating": "5"
                                        },
                                        {
                                            "client_ip": "127.0.0.1",
                                            "country_code": "CA",
                                            "id": "735979a0-dc51-4ab1-8e50-a674efb3fbc0",
                                            "level": "ERROR",
                                            "policy_name": "default_policy",
                                            "status": "alerted",
                                            "support_id": "43215678912345678911",
                                            "timestamp": "2022-10-25T07:45:10Z",
                                            "url": "/home/index",
                                            "violation_rating": "3"
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetSecurityEventsCollection"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Events. If called without parameters, returns a maximum of 100 latest security events."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Events",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/events/{id}": {
            "get": {
                "description": "Return a Security Event based on its ID.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "querySecurityEventsByID",
                "parameters": [
                    {
                        "description": "Identifies the Security Event that you want to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "example": "859ad281-1844-4d52-96d6-188ad02ec322",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "blocking_exception_reason": "Policy violation",
                                    "bot_anomalies": "anomaly-01",
                                    "bot_category": "bot-category-01",
                                    "bot_class": "suspicious",
                                    "bot_signature_name": "Bot Client Detected",
                                    "client_application": "Chrome",
                                    "client_application_version": "107.0.5304.87",
                                    "client_ip": "127.0.0.1",
                                    "client_port": "8765",
                                    "correlation_id": "6707cc37-d416-4077-bd12-777491027011",
                                    "country_code": "US",
                                    "description": "This is the event description",
                                    "destination_addr": "127.0.0.2",
                                    "destination_port": "8847",
                                    "enforced_bot_anomalies": "enforced-bot-anomaly-01",
                                    "http_hostname": "nginx.org",
                                    "id": "d1cd4806-3519-4c72-a0e4-63fd611ee6fb",
                                    "instance": "4ba4595d-db6d-4e90-b6eb-3dee3ce8533b",
                                    "instance_group": "1caa4cd4-3e20-4ed9-8379-36c6850c4ed3",
                                    "is_truncated": "false",
                                    "level": "WARNING",
                                    "method": "PUT",
                                    "nginx_id": "3b4ef5d6-735d-4031-859c-3c8de70d24a9",
                                    "outcome": "alerted",
                                    "outcome_reason": "SECURITY_NGINX_VIOLATION",
                                    "policy_name": "strict",
                                    "request": "example request",
                                    "response_code": "200",
                                    "service_id": "2b63403b-b8fc-4dd5-a0e9-0ee7d2d252fb",
                                    "severity": "CRITICAL",
                                    "signature_cves": [
                                        "signature_cve-01",
                                        "signature_cve-02",
                                        "signature_cve-03"
                                    ],
                                    "signatures": [
                                        {
                                            "blocking_mask": "blocking_mask-01",
                                            "buffer": "buffer-01",
                                            "length": "length-01",
                                            "offset": "offset-01",
                                            "signature_accuracy": "medium",
                                            "signature_id": "4128e567-f7d6-40cc-8cee-d98d483475a8",
                                            "signature_name": "s",
                                            "signature_risk": "low"
                                        },
                                        {
                                            "blocking_mask": "blocking_mask-02",
                                            "buffer": "buffer-34",
                                            "length": "length-98",
                                            "offset": "offset-23",
                                            "signature_accuracy": "high",
                                            "signature_id": "8bd3d74a-e23f-4a92-bcb8-a00111430b59",
                                            "signature_name": "Revision Control System dir access (/RCS/)",
                                            "signature_risk": "high"
                                        }
                                    ],
                                    "status": "blocked",
                                    "sub_violations": "violation-02,violation-33,violation-43",
                                    "support_id": "12345678912345678911",
                                    "system_hostname": "testenv",
                                    "system_id": "31ed9d05-9cb0-48c3-9f97-d63b1b6dd342",
                                    "system_tags": "env:production,env:staging",
                                    "threat_campaign_names": [
                                        "threat_campaign-01",
                                        "threat_campaign-02",
                                        "threat_campaign-03"
                                    ],
                                    "timestamp": "2022-10-26T06:57:03Z",
                                    "type": "Security Event",
                                    "url": "/home",
                                    "version": "v1.0",
                                    "violation_contexts": "violation-context-01",
                                    "violation_rating": "ration-02",
                                    "violations": "violation-01,violation-02,violation-03",
                                    "x_forwarded_for_header_value": "x-forwareded-header-value-01"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityEventResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Event."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Security event not found. Check the input ID and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Event by ID",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCount": {
            "get": {
                "description": "Return count of security attacks based on given query parameters. Primarily intended for consumption\nonly by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCount",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "count": 10
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Attack Count",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByCVE": {
            "get": {
                "description": "Return Attack Counts based on given query parameters and grouped by CVE.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByCVE",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 8,
                                            "ips": 63,
                                            "name": "CVE-2021-1234",
                                            "policies": 48,
                                            "urls": 71,
                                            "violations": 10
                                        },
                                        {
                                            "hits": 12,
                                            "ips": 1,
                                            "name": "CVE-2021-5678",
                                            "policies": 75,
                                            "urls": 3,
                                            "violations": 5
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByCVEResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Attack Counts grouped by CVE. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Attack Counts grouped by CVE",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByCountry": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by country.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByCountry",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "code": "CA",
                                            "hits": 10,
                                            "ips": 10,
                                            "policies": 1,
                                            "urls": 1,
                                            "violations": 1
                                        },
                                        {
                                            "code": "US",
                                            "hits": 10,
                                            "ips": 3,
                                            "policies": 2,
                                            "urls": 1,
                                            "violations": 1
                                        },
                                        {
                                            "code": "IN",
                                            "hits": 10,
                                            "ips": 1,
                                            "policies": 1,
                                            "urls": 1,
                                            "violations": 1
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByCountryResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by country. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by country.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByIP": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by IP address.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByIP",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "address": "103.135.56.206",
                                            "hits": 10,
                                            "ips": 10,
                                            "policies": 10,
                                            "urls": 10,
                                            "violations": 10
                                        },
                                        {
                                            "address": "103.135.56.213",
                                            "hits": 10,
                                            "ips": 10,
                                            "policies": 10,
                                            "urls": 10,
                                            "violations": 10
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByIPResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by IP address. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by IP address.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByInstance": {
            "get": {
                "description": "Return Attack Counts based on given query parameters and grouped by Instance.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByInstance",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 96,
                                            "ips": 753,
                                            "name": "site-prod-01",
                                            "policies": 96,
                                            "urls": 351,
                                            "violations": 232
                                        },
                                        {
                                            "hits": 854,
                                            "ips": 543,
                                            "name": "site-prod-02",
                                            "policies": 816,
                                            "urls": 768,
                                            "violations": 312
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByInstanceResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Attack Counts grouped by Instance. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Attack Counts grouped by Instance",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByPolicy": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by security policy.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByPolicy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "ips": 10,
                                            "name": "strict_policy",
                                            "policies": 10,
                                            "urls": 10,
                                            "violations": 10
                                        },
                                        {
                                            "hits": 10,
                                            "ips": 10,
                                            "name": "relaxed_policy",
                                            "policies": 10,
                                            "urls": 10,
                                            "violations": 10
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByPolicyResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by security policy. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by security policy.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByRequestMethod": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by request method.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByRequestMethod",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "method": "GET"
                                        },
                                        {
                                            "hits": 10,
                                            "method": "PUT"
                                        },
                                        {
                                            "hits": 10,
                                            "method": "OPTIONS"
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByRequestMethodResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by request method."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by request method.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByRequestOutcomeReason": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by request outcome reason.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByRequestOutcomeReason",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "SECURITY_NGINX_VIOLATION": 10,
                                    "SECURITY_WAF_BYPASS": 10,
                                    "SECURITY_WAF_FLAGGED": 10,
                                    "SECURITY_WAF_OK": 10,
                                    "SECURITY_WAF_VIOLATION": 10,
                                    "SECURITY_WAF_VIOLATION_TRANSPARENT": 10
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByRequestOutcomeReasonResult"
                                }
                            }
                        },
                        "description": "Successfully resturned the requested Security Attack count grouped by request outcome reason."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by request outcome reason",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByRequestStatus": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by request status. Primarily\nintended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByRequestStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "alerted": 10,
                                    "blocked": 10,
                                    "passed": 10
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByRequestStatusResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by request status."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by request status",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByResponseCode": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by Response Code.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByResponseCode",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "code": "200",
                                            "hits": 10
                                        },
                                        {
                                            "hits": 10,
                                            "name": "404"
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByResponseCodeResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by Response Code."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by Response Code.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountBySeverity": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by severity of the attack.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountBySeverity",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "critical": 10,
                                    "error": 10,
                                    "informational": 10
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountBySeverityResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by severity of the attack."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by severity of the attack.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountBySignature": {
            "get": {
                "description": "Return Attack Counts based on given query parameters and grouped by attack signature.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountBySignature",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "ips": 9,
                                            "name": "Unix hidden (dot-file)",
                                            "policies": 74,
                                            "urls": 35,
                                            "violations": 141
                                        },
                                        {
                                            "hits": 22,
                                            "ips": 34,
                                            "name": "PHP injection attempt",
                                            "policies": 7,
                                            "urls": 46,
                                            "violations": 99
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountBySignatureResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Attack Counts grouped by attack signature. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Attack Counts grouped by Signature",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountBySubViolation": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by sub-violations.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountBySubViolation",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "ips": 10,
                                            "name": "Attack signature Detected",
                                            "policies": 10,
                                            "urls": 10
                                        },
                                        {
                                            "code": "Bot Client Detected",
                                            "hits": 10,
                                            "ips": 10,
                                            "policies": 10,
                                            "urls": 10
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountBySubViolationResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by sub-violations. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by sub-violations.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByThreatCampaign": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by threat campaign.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByThreatCampaign",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "ips": 10,
                                            "name": "Campaign A",
                                            "policies": 10,
                                            "urls": 10,
                                            "violations": 10
                                        },
                                        {
                                            "hits": 10,
                                            "ips": 10,
                                            "name": "Campaign B",
                                            "policies": 10,
                                            "urls": 10,
                                            "violations": 10
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByThreatCampaignResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by threat campaign. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by threat campaign.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByURL": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by URL.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByURL",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "ips": 10,
                                            "policies": 10,
                                            "url": "/",
                                            "violations": 10
                                        },
                                        {
                                            "hits": 10,
                                            "ips": 10,
                                            "name": "/home",
                                            "policies": 10,
                                            "violations": 10
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByURLResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by URL. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by URL.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountByViolations": {
            "get": {
                "description": "Return count of attacks based on given query parameters and grouped by violations.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountByViolations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "ips": 10,
                                            "name": "Unsupported browser",
                                            "policies": 10,
                                            "urls": 10
                                        },
                                        {
                                            "code": "Bot Client Detected",
                                            "hits": 10,
                                            "ips": 10,
                                            "policies": 10,
                                            "urls": 10
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountByViolationsResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by violations. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count grouped by violations.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountOverTimeByOutcomeReason": {
            "get": {
                "description": "Return count of attacks over a given time period based on given query parameters and grouped by request outcome reason.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountOverTimeByOutcomeReason",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Resolution"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "SECURITY_NGINX_VIOLATION": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            10,
                                            11,
                                            12
                                        ]
                                    },
                                    "SECURITY_WAF_BYPASS": {
                                        "stimestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            21,
                                            22,
                                            23
                                        ]
                                    },
                                    "SECURITY_WAF_FLAGGED": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            32,
                                            33,
                                            34
                                        ]
                                    },
                                    "SECURITY_WAF_OK": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            43,
                                            44,
                                            45
                                        ]
                                    },
                                    "SECURITY_WAF_VIOLATION": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            54,
                                            56,
                                            57
                                        ]
                                    },
                                    "SECURITY_WAF_VIOLATION_TRANSPARENT": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            65,
                                            66,
                                            67
                                        ]
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountOverTimeByOutcomeReasonResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count timeseries data grouped by request outcome reason. Limited to a maximum of 10000 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count timeseries data grouped by request outcome reason.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackCountOverTimeByStatus": {
            "get": {
                "description": "Return count of attacks over a given time period based on given query parameters and grouped by request status.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackCountOverTimeByStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Resolution"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "alerted": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            10,
                                            11,
                                            12
                                        ]
                                    },
                                    "blocked": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            23,
                                            24,
                                            25
                                        ]
                                    },
                                    "passed": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            36,
                                            37,
                                            38
                                        ]
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackCountOverTimeByStatusResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count time series data grouped by request status. Limited to a maximum of 10000 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Attack count time series data grouped by request status.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getAttackersCount": {
            "get": {
                "description": "Return count of attackers based on given query parameters.  Primarily intended for consumption\nonly by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getAttackersCount",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "count": 10
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetAttackersCountResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Attackers count."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Attackers Count",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getBotAttackCount": {
            "get": {
                "description": "Return count of bot attacks based on given query parameters. Primarily intended \nfor consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getBotAttackCount",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "count": 10
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetBotAttackCountResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Bot Attack count."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Bot Attack Count",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getBotAttackCountByApplication": {
            "get": {
                "description": "Return count of bot attacks based on given query parameters and grouped by application.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getBotAttackCountByApplication",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "name": "Chrome"
                                        },
                                        {
                                            "hits": 55,
                                            "name": "Firefox"
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetBotAttackCountByApplicationResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Bot Attack count grouped by application. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Bot Attack Count grouped by Application",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getBotAttackCountByCategory": {
            "get": {
                "description": "Return count of bot attacks based on given query parameters and grouped by category.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getBotAttackCountByCategory",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 56,
                                            "ips": 33,
                                            "name": "untrusted-bot",
                                            "policies": 25,
                                            "urls": 67,
                                            "violations": 19
                                        },
                                        {
                                            "hits": 7,
                                            "ips": 3,
                                            "name": "trusted-bot",
                                            "policies": 15,
                                            "urls": 13,
                                            "violations": 2
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetBotAttackCountByCategoryResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Bot Attack count grouped by category. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Bot Attack Count grouped by Category",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getBotAttackCountByClass": {
            "get": {
                "description": "Return count of bot attacks based on given query parameters and grouped by class.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getBotAttackCountByClass",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 10,
                                            "ips": 30,
                                            "name": "suspicious",
                                            "policies": 55,
                                            "urls": 43,
                                            "violations": 25
                                        },
                                        {
                                            "hits": 8,
                                            "ips": 13,
                                            "name": "malicious",
                                            "policies": 5,
                                            "urls": 35,
                                            "violations": 11
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetBotAttackCountByClassResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Bot Attack count grouped by class. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Bot Attack Count grouped by Class",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getBotAttackCountByRequestStatus": {
            "get": {
                "description": "Return count of bot attacks based on given query parameters and grouped by request status.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getBotAttackCountByRequestStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "alerted": 7,
                                    "blocked": 31,
                                    "passed": 15
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetBotAttackCountByRequestStatusResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Bot Attack count grouped by request status."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Bot Attack Count grouped by Request Status",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getBotAttackCountBySignature": {
            "get": {
                "description": "Return count of bot attacks based on given query parameters and grouped by signature.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getBotAttackCountBySignature",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "series": [
                                        {
                                            "hits": 11,
                                            "ips": 34,
                                            "name": "Google",
                                            "policies": 22,
                                            "urls": 21,
                                            "violations": 9
                                        },
                                        {
                                            "hits": 85,
                                            "ips": 57,
                                            "name": "curl",
                                            "policies": 44,
                                            "urls": 76,
                                            "violations": 36
                                        },
                                        {
                                            "hits": 8,
                                            "ips": 3,
                                            "name": "aHrefs",
                                            "policies": 10,
                                            "urls": 4,
                                            "violations": 4
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetBotAttackCountBySignatureResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Bot Attack count grouped by signature. Limited to a maximum of 20 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Bot Attack Count grouped by Signature",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getBotAttacksOverTime": {
            "get": {
                "description": "Return count of bot attacks over a given time period based on given query parameters.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getBotAttacksOverTime",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Resolution"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "hits": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            10,
                                            11,
                                            12
                                        ]
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetBotAttacksOverTimeResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Bot Attack count grouped by application. Limited to a maximum of 10000 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Bot Attack Count over time",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getSignatureHitsByContext": {
            "get": {
                "description": "Return attack signatures based on given query parameters and grouped by context.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getSignatureHitsByContext",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "cookie": 85,
                                    "header": 33,
                                    "parameter": 74
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetSignatureHitsByContextResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Attack Signature counts grouped by context."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get distinct Attack Signatures grouped by Context",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getSignatureHitsOverTime": {
            "get": {
                "description": "Return count of attack signatures over a given time period based on given query parameters.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getSignatureHitsOverTime",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    },
                    {
                        "$ref": "#/components/parameters/Resolution"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "hits": {
                                        "timestamps": [
                                            "2022-10-23T23:24:56Z",
                                            "2022-10-23T23:25:56Z",
                                            "2022-10-23T23:26:56Z"
                                        ],
                                        "values": [
                                            10,
                                            11,
                                            12
                                        ]
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetSignatureHitsOverTimeResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Attack Signature count grouped by application. Limited to a maximum of 10000 results."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Attack Signature Count over time",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getSignaturesHitsByRequestStatus": {
            "get": {
                "description": "Return attack signatures based on given query parameters and grouped by request status.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getSignaturesHitsByRequestStatus",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "alerted": 13,
                                    "blocked": 80,
                                    "passed": 68
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetSignaturesHitsByRequestStatusResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested attack Signature counts grouped by request status."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get distinct Attack Signatures grouped by Request Status",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getSignaturesStats": {
            "get": {
                "description": "Return statistics of signatures based on given query parameters. Primarily intended for consumption\nonly by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getSignaturesStats",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "accuracy": {
                                        "hight": 30,
                                        "low": 10,
                                        "med": 20
                                    },
                                    "hits": 10,
                                    "risk": {
                                        "high": 30,
                                        "low": 10,
                                        "med": 20
                                    },
                                    "unique": 10
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GetSignaturesStatsResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Signature Statistics."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Signature Statistics",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/getThreatCampaignCount": {
            "get": {
                "description": "Return count of distinct threat campaigns based on given query parameters and grouped by security policy.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "getThreatCampaignCount",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/StartTime"
                    },
                    {
                        "$ref": "#/components/parameters/EndTime"
                    },
                    {
                        "$ref": "#/components/parameters/Filter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": [
                                    {
                                        "count": 10
                                    }
                                ],
                                "schema": {
                                    "$ref": "#/components/schemas/GetThreatCampaignCountResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Attack count grouped by security policy."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get threat campaign count.",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/analytics/security/support/{supportId}": {
            "get": {
                "description": "Return a list of Security Events based on its support ID.\nPrimarily intended for consumption only by the NGINX Management Suite's Graphical User Interface.\n",
                "operationId": "querySecurityEventsBySupportID",
                "parameters": [
                    {
                        "description": "Identifies the Security Event(s) by Support ID that you want to retrieve.",
                        "in": "path",
                        "name": "supportId",
                        "required": true,
                        "schema": {
                            "example": "12345678912345678911",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": [
                                    {
                                        "blocking_exception_reason": "Policy violation",
                                        "bot_anomalies": "anomaly-01",
                                        "bot_category": "bot-category-01",
                                        "bot_class": "suspicious",
                                        "bot_signature_name": "Bot Client Detected",
                                        "client_application": "Chrome",
                                        "client_application_versoin": "107.0.5304.87",
                                        "client_ip": "127.0.0.1",
                                        "client_port": "8765",
                                        "correlation_id": "6707cc37-d416-4077-bd12-777491027011",
                                        "country_code": "US",
                                        "description": "This is the event description",
                                        "destination_addr": "127.0.0.2",
                                        "destination_port": "8847",
                                        "enforced_bot_anomalies": "enforced-bot-anomaly-01",
                                        "http_hostname": "nginx.org",
                                        "id": "d1cd4806-3519-4c72-a0e4-63fd611ee6fb",
                                        "instance": "4ba4595d-db6d-4e90-b6eb-3dee3ce8533b",
                                        "instance_group": "1caa4cd4-3e20-4ed9-8379-36c6850c4ed3",
                                        "is_truncated": "false",
                                        "level": "WARNING",
                                        "method": "PUT",
                                        "nginx_id": "3b4ef5d6-735d-4031-859c-3c8de70d24a9",
                                        "outcome": "alerted",
                                        "outcome_reason": "SECURITY_NGINX_VIOLATION",
                                        "policy_name": "strict",
                                        "request": "example request",
                                        "response_code": "200",
                                        "service_id": "2b63403b-b8fc-4dd5-a0e9-0ee7d2d252fb",
                                        "severity": "CRITICAL",
                                        "signature_cves": [
                                            "signature_cve-01",
                                            "signature_cve-02",
                                            "signature_cve-03"
                                        ],
                                        "signatures": [
                                            {
                                                "blocking_mask": "blocking_mask-01",
                                                "buffer": "buffer-01",
                                                "length": "length-01",
                                                "offset": "offset-01",
                                                "signature_accuracy": "medium",
                                                "signature_id": "4128e567-f7d6-40cc-8cee-d98d483475a8",
                                                "signature_name": "s",
                                                "signature_risk": "low"
                                            },
                                            {
                                                "blocking_mask": "blocking_mask-02",
                                                "buffer": "buffer-34",
                                                "length": "length-98",
                                                "offset": "offset-23",
                                                "signature_accuracy": "high",
                                                "signature_id": "8bd3d74a-e23f-4a92-bcb8-a00111430b59",
                                                "signature_name": "Revision Control System dir access (/RCS/)",
                                                "signature_risk": "high"
                                            }
                                        ],
                                        "status": "blocked",
                                        "sub_violations": "violation-02,violation-33,violation-43",
                                        "support_id": "12345678912345678911",
                                        "system_hostname": "testenv",
                                        "system_id": "31ed9d05-9cb0-48c3-9f97-d63b1b6dd342",
                                        "system_tags": "env:production,env:staging",
                                        "threat_campaign_names": [
                                            "threat_campaign-01",
                                            "threat_campaign-02",
                                            "threat_campaign-03"
                                        ],
                                        "timestamp": "2022-10-26T06:57:03Z",
                                        "type": "Security Event",
                                        "url": "/home",
                                        "version": "v1.0",
                                        "violation_contexts": "violation-context-01",
                                        "violation_rating": "ration-02",
                                        "violations": "violation-01,violation-02,violation-03",
                                        "x_forwarded_for_header_value": "x-forwareded-header-value-01"
                                    }
                                ],
                                "schema": {
                                    "$ref": "#/components/schemas/GetSecurityEventsBySupportIDResult"
                                }
                            }
                        },
                        "description": "Successfully returned the requested Security Event. Limited to a maximum of 100 latest security events."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request cannot be processed because of an internal server error."
                    }
                },
                "summary": "Get Security Events by Support ID",
                "tags": [
                    "SecurityMonitoring"
                ]
            }
        },
        "/certs": {
            "get": {
                "description": "Returns a list of Cert metadata objects for all of the Certs.",
                "operationId": "listCerts",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "CertListResponse": {
                                        "$ref": "#/components/examples/CertListResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/CertList"
                                }
                            }
                        },
                        "description": "Successfully retrieved a list of Certs."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "List all Certs",
                "tags": [
                    "Certs"
                ]
            },
            "post": {
                "description": "Creates a new Cert resource.\n",
                "operationId": "createCert",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "CertRequestBody": {
                                    "$ref": "#/components/examples/CertRequestBody"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Cert"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "CertResponse": {
                                        "$ref": "#/components/examples/CertResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Cert"
                                }
                            }
                        },
                        "description": "Successfully created the specified Cert resource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 134009,
                                    "message": "Error adding the certificate: the certificate already exists. Use a unique name for the certificate, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request failed due to a conflict with an existing cert resource."
                    }
                },
                "summary": "Create a Cert",
                "tags": [
                    "Certs"
                ]
            }
        },
        "/certs/{certName}": {
            "delete": {
                "description": "Deletes the specified Cert resource.",
                "operationId": "deleteCert",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/CertName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified Cert resource was successfully deleted."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 134017,
                                    "message": "Error deleting the certificate: the specified certificate does not exist. Check the certificate name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "summary": "Delete a Cert",
                "tags": [
                    "Certs"
                ]
            },
            "get": {
                "description": "Returns information for a specific Cert resource.",
                "operationId": "getCert",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/CertName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "CertResponse": {
                                        "$ref": "#/components/examples/CertResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Cert"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested Cert."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 134001,
                                    "message": "Error getting the certificate: the specified certificate does not exist. Check the certificate name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "summary": "Get a Cert",
                "tags": [
                    "Certs"
                ]
            },
            "put": {
                "description": "Creates a new Cert or updates an existing Cert resource.",
                "operationId": "upsertCert",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/CertName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "CertRequestBody": {
                                    "$ref": "#/components/examples/CertRequestBody"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Cert"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "CertResponse": {
                                        "$ref": "#/components/examples/CertResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Cert"
                                }
                            }
                        },
                        "description": "Successfully updated the specified Cert resource."
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "CertResponse": {
                                        "$ref": "#/components/examples/CertResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Cert"
                                }
                            }
                        },
                        "description": "Successfully created the requested Cert resource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "Upsert a Cert",
                "tags": [
                    "Certs"
                ]
            }
        },
        "/configs": {
            "get": {
                "description": "List all saved configurations.\n",
                "operationId": "listConfigurations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListConfigsResponse"
                                }
                            }
                        },
                        "description": "An array of configuration summary data."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "List NGINX staged configurations.",
                "tags": [
                    "Configurations"
                ]
            },
            "post": {
                "description": "Stores NGINX configuration files.",
                "operationId": "uploadConfiguration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "UploadConfigRequest": {
                                    "$ref": "#/components/examples/UploadConfigRequest"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/UploadConfigRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "UploadConfigResponse": {
                                        "$ref": "#/components/examples/UploadConfigResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/UploadConfigResponse"
                                }
                            }
                        },
                        "description": "Successfully uploaded the configuration."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11010,
                                    "message": "Error uploading the configuration: could not parse the request payload. Check the format of the request, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter or URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "Upload NGINX configuration files for future deployment.",
                "tags": [
                    "Configurations"
                ]
            }
        },
        "/configs/{configUid}": {
            "delete": {
                "description": "Delete the configuration with the given ID.",
                "operationId": "deleteConfiguration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ConfigUid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the configuration. No content is returned."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11011,
                                    "message": "Error retrieving the configuration: the specified configuration does not exist. Check the configuration name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Configuration not found."
                    }
                },
                "summary": "Delete configuration.",
                "tags": [
                    "Configurations"
                ]
            },
            "get": {
                "description": "Get a saved configuration with the given unique ID.",
                "operationId": "getConfiguration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ConfigUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigsResponse"
                                }
                            }
                        },
                        "description": "Successfully returned configuration."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11010,
                                    "message": "Error retrieving the configuration: could not parse the request payload. Check the format of the request, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter or URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11011,
                                    "message": "Error retrieving the configuration: the specified configuration does not exist. Check the configuration name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Configuration not found."
                    }
                },
                "summary": "Get configuration.",
                "tags": [
                    "Configurations"
                ]
            },
            "put": {
                "description": "Updates NGINX staged configuration files.",
                "operationId": "updateConfiguration",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ConfigUid"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "UpdateConfigRequest": {
                                    "$ref": "#/components/examples/UpdateConfigRequest"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/UpdateConfigRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "UploadConfigResponse": {
                                        "$ref": "#/components/examples/UploadConfigResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/UploadConfigResponse"
                                }
                            }
                        },
                        "description": "Successfully updated the configuration."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11010,
                                    "message": "Error updating the configuration: could not parse the request payload. Check the format of the request, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter or URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "Updates NGINX staged configuration files.",
                "tags": [
                    "Configurations"
                ]
            }
        },
        "/features": {
            "get": {
                "description": "Returns an unfiltered list of all available module features.\n",
                "operationId": "getFeatures",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/showDetails"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "items": [
                                        {
                                            "module": "core",
                                            "name": "LICENSING"
                                        },
                                        {
                                            "module": "core",
                                            "name": "USER-MANAGEMENT"
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleFeatureListResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved available module features.\n"
                    },
                    "403": {
                        "$ref": "#/components/responses/RolesForbidden"
                    }
                },
                "summary": "List Module Features",
                "tags": [
                    "Roles"
                ]
            }
        },
        "/features/{featureName}": {
            "get": {
                "description": "Returns details about a specific feature by its name.\n",
                "operationId": "getFeatureDetail",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/featureName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleFeatureDetailResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested feature details by its name.\n"
                    },
                    "403": {
                        "$ref": "#/components/responses/RolesForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/RolesNotFound"
                    }
                },
                "summary": "Get a Feature details",
                "tags": [
                    "Roles"
                ]
            }
        },
        "/groups": {
            "get": {
                "description": "Returns a list of all of the authentication groups.\n",
                "operationId": "listGroups",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/GroupNameFilter"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "items": [
                                        {
                                            "groupDef": {
                                                "roles": [
                                                    {
                                                        "metadata": {
                                                            "createTime": "2020-02-24T22:38:33.842929Z",
                                                            "kind": "role",
                                                            "links": {
                                                                "rel": "/api/platform/v1/roles/role1"
                                                            },
                                                            "name": "role1",
                                                            "updateTime": "2020-02-24T22:53:14.340686Z"
                                                        },
                                                        "roleDef": {
                                                            "permissions": [
                                                                {
                                                                    "accessTypes": [
                                                                        "CREATE",
                                                                        "READ",
                                                                        "UPDATE",
                                                                        "DELETE"
                                                                    ],
                                                                    "feature": "INSTANCE-MANAGEMENT",
                                                                    "objects": [
                                                                        {
                                                                            "resource": "Systems",
                                                                            "values": [
                                                                                "dev-agent",
                                                                                "test-agent"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "metadata": {
                                                "createTime": "2020-02-24T22:55:51.729272Z",
                                                "name": "group-1",
                                                "updateTime": "2020-02-24T22:55:51.729272Z"
                                            }
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/GroupListResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved a list of all authentication groups.\n"
                    },
                    "401": {
                        "$ref": "#/components/responses/GroupsUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/GroupsForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/GroupsInternal"
                    }
                },
                "summary": "List Authentication Groups",
                "tags": [
                    "Groups"
                ]
            },
            "post": {
                "description": "Creates a new authentication group.",
                "operationId": "createGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "groupDef": {
                                    "roles": [
                                        {
                                            "ref": "/api/platform/v1/roles/role1"
                                        }
                                    ]
                                },
                                "metadata": {
                                    "name": "group-1"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/GroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "groupDef": {
                                        "roles": [
                                            {
                                                "metadata": {
                                                    "createTime": "2020-02-24T22:38:33.842929Z",
                                                    "kind": "role",
                                                    "links": {
                                                        "rel": "/api/platform/v1/roles/role1"
                                                    },
                                                    "name": "role1",
                                                    "updateTime": "2020-02-24T22:53:14.340686Z"
                                                },
                                                "roleDef": {
                                                    "permissions": [
                                                        {
                                                            "accessTypes": [
                                                                "CREATE",
                                                                "READ",
                                                                "UPDATE",
                                                                "DELETE"
                                                            ],
                                                            "feature": "INSTANCE-MANAGEMENT",
                                                            "objects": [
                                                                {
                                                                    "resource": "Systems",
                                                                    "values": [
                                                                        "dev-agent",
                                                                        "test-agent"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "name": "group-1",
                                        "updateTime": "2020-02-24T22:55:51.729272Z"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Successfully created the requested authentication group.\n"
                    },
                    "400": {
                        "$ref": "#/components/responses/GroupsBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/GroupsUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/GroupsForbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/GroupsConflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/GroupsInternal"
                    }
                },
                "summary": "Add an Authentication Group",
                "tags": [
                    "Groups"
                ]
            }
        },
        "/groups/{groupName}": {
            "delete": {
                "description": "Deletes a specific authentication group.",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/groupName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the authentication group. No content was returned."
                    },
                    "401": {
                        "$ref": "#/components/responses/GroupsUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/GroupsForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/GroupsNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/GroupsConflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/GroupsInternal"
                    }
                },
                "summary": "Delete an Authentication Group",
                "tags": [
                    "Groups"
                ]
            },
            "get": {
                "description": "Returns information about a specific Authentication Group resource.\n",
                "operationId": "getGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/groupName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "groupDef": {
                                        "roles": [
                                            {
                                                "metadata": {
                                                    "createTime": "2020-02-24T22:38:33.842929Z",
                                                    "kind": "role",
                                                    "links": {
                                                        "rel": "/api/platform/v1/roles/role1"
                                                    },
                                                    "name": "role1",
                                                    "updateTime": "2020-02-24T22:53:14.340686Z"
                                                },
                                                "roleDef": {
                                                    "permissions": [
                                                        {
                                                            "accessTypes": [
                                                                "CREATE",
                                                                "READ",
                                                                "UPDATE",
                                                                "DELETE"
                                                            ],
                                                            "feature": "INSTANCE-MANAGEMENT",
                                                            "objects": [
                                                                {
                                                                    "resource": "Systems",
                                                                    "values": [
                                                                        "dev-agent",
                                                                        "test-agent"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "name": "group-1",
                                        "updateTime": "2020-02-24T22:55:51.729272Z"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested Authentication Group resource.\n"
                    },
                    "401": {
                        "$ref": "#/components/responses/GroupsUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/GroupsForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/GroupsNotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/GroupsInternal"
                    }
                },
                "summary": "Get an Authentication Group",
                "tags": [
                    "Groups"
                ]
            },
            "put": {
                "description": "Updates an existing Authentication Group.\n",
                "operationId": "updateGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/groupName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "groupDef": {
                                    "roles": [
                                        {
                                            "ref": "/api/platform/v1/roles/role1"
                                        },
                                        {
                                            "ref": "/api/platform/v1/roles/role2"
                                        }
                                    ]
                                },
                                "metadata": {
                                    "name": "group-1"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/GroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "groupDef": {
                                        "roles": [
                                            {
                                                "metadata": {
                                                    "createTime": "2020-02-24T22:38:33.842929Z",
                                                    "kind": "role",
                                                    "links": {
                                                        "rel": "/api/platform/v1/roles/role1"
                                                    },
                                                    "name": "role1",
                                                    "updateTime": "2020-02-24T22:53:14.340686Z"
                                                },
                                                "roleDef": {
                                                    "permissions": [
                                                        {
                                                            "accessTypes": [
                                                                "CREATE",
                                                                "READ",
                                                                "UPDATE",
                                                                "DELETE"
                                                            ],
                                                            "feature": "INSTANCE-MANAGEMENT",
                                                            "objects": [
                                                                {
                                                                    "resource": "Systems",
                                                                    "values": [
                                                                        "dev-agent",
                                                                        "test-agent"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "metadata": {
                                                    "createTime": "2020-02-24T22:38:33.842929Z",
                                                    "kind": "role",
                                                    "links": {
                                                        "rel": "/api/platform/v1/roles/role2"
                                                    },
                                                    "name": "role2",
                                                    "updateTime": "2020-02-24T22:53:14.340686Z"
                                                },
                                                "roleDef": {
                                                    "permissions": [
                                                        {
                                                            "accessTypes": [
                                                                "CREATE",
                                                                "READ",
                                                                "UPDATE",
                                                                "DELETE"
                                                            ],
                                                            "feature": "ANALYTICS",
                                                            "objects": []
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "name": "group-1",
                                        "updateTime": "2020-02-24T22:55:51.729272Z"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Successfully upserted the specified group.\n"
                    },
                    "400": {
                        "$ref": "#/components/responses/GroupsBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/GroupsUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/GroupsForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/GroupsInternal"
                    }
                },
                "summary": "Updates an Authentication Group",
                "tags": [
                    "Groups"
                ]
            }
        },
        "/instance-groups": {
            "get": {
                "description": "Returns all the NGINX instance groups on this system.",
                "operationId": "ListInstanceGroups",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "InstanceGroupListResponse": {
                                        "$ref": "#/components/examples/InstanceGroupListResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/InstanceGroupListResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the NGINX instance groups managed by this system."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "List all NGINX instance groups managed by this system.",
                "tags": [
                    "NGINX Instance Groups"
                ]
            },
            "post": {
                "description": "Create NGINX instance group",
                "operationId": "CreateInstanceGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "CreateInstanceGroupRequestBody": {
                                    "$ref": "#/components/examples/CreateInstanceGroupRequestBody"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/CreateInstanceGroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "InstanceGroupResponseBody": {
                                        "$ref": "#/components/examples/InstanceGroupResponseBody"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/InstanceGroup"
                                }
                            }
                        },
                        "description": "Successfully created the NGINX instance group"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "details": [
                                        {
                                            "description": "request body has an error: doesn't match the schema: Error at \"/name\": minimum string length is 1\nSchema:\n  {\n    \"description\": \"The unique name for this group. This cannot be changed after creation.\",\n    \"maxLength\": 1024,\n    \"minLength\": 1,\n    \"type\": \"string\"\n  }\n"
                                        }
                                    ],
                                    "message": "Failed to validate Request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. This might occur if there are errors in the request body."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133030,
                                    "message": "Conflict found when creating the instance group. An instance group with this name already exists."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Conflict found when creation the instance group. An instance group with this name already exists."
                    }
                },
                "summary": "Create NGINX instance group",
                "tags": [
                    "NGINX Instance Groups"
                ]
            }
        },
        "/instance-groups/deployments/{deploymentUid}": {
            "get": {
                "description": "Returns the Instance Group deployment job details",
                "operationId": "getDeployment",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/DeploymentUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "DeploymentDetailsResponse": {
                                        "$ref": "#/components/examples/DeploymentDetailsResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentDetails"
                                }
                            }
                        },
                        "description": "Successfully retrieved deployment job details for the request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "details": [
                                        {
                                            "description": "parameter \"deploymentUid\" in path has an error: string doesn't match the format \"uuid\" (regular expression \"^(?i)(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$\")\nSchema:\n  {\n    \"format\": \"uuid\",\n    \"type\": \"string\"\n  }\n"
                                        }
                                    ],
                                    "message": "Failed to validate Request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the deployment UID is a valid UUID."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 0,
                                    "message": "Requested deployment was not found."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Deployment not found."
                    }
                },
                "summary": "Instance Group deployment job details",
                "tags": [
                    "NGINX Instance Groups"
                ]
            }
        },
        "/instance-groups/{instGroupUid}": {
            "delete": {
                "description": "Removes the NGINX instance group",
                "operationId": "RemoveInstanceGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/InstGroupUid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully removed the instance group. No content is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "details": [
                                        {
                                            "description": "parameter \"instGroupUid\" in path has an error: string doesn't match the format \"uuid\" (regular expression \"^(?i)(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$\")\nSchema:\n  {\n    \"format\": \"uuid\",\n    \"type\": \"string\"\n  }\n"
                                        }
                                    ],
                                    "message": "Failed to validate Request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133013,
                                    "message": "Error retrieving the instance group: the specified instance group does not exist. Check the instance group id, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Instance group not found."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133028,
                                    "message": "Error removing the instance group: the specified instance group is associated with one or more NGINX instances. All NGINX instances must be unassociated from this group before it can be removed."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Precondition failed."
                    }
                },
                "summary": "Removes the NGINX instance group",
                "tags": [
                    "NGINX Instance Groups"
                ]
            },
            "get": {
                "description": "Returns the NGINX instance group",
                "operationId": "GetInstanceGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/InstGroupUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "InstanceGroupResponseBody": {
                                        "$ref": "#/components/examples/InstanceGroupResponseBody"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/InstanceGroup"
                                }
                            }
                        },
                        "description": "Successfully returned the NGINX instance group."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133007,
                                    "message": "Error retrieving the instance group: the specified instance group does not exist. Check the instance group id, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Instance group not found."
                    }
                },
                "summary": "Returns the NGINX instance group",
                "tags": [
                    "NGINX Instance Groups"
                ]
            },
            "patch": {
                "description": "Updates NGINX instance group",
                "operationId": "PatchInstanceGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/InstGroupUid"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "UpdateInstanceGroupRequestBody": {
                                    "$ref": "#/components/examples/UpdateInstanceGroupRequestBody"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/PatchInstanceGroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "InstanceGroupResponseBody": {
                                        "$ref": "#/components/examples/InstanceGroupResponseBody"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/InstanceGroup"
                                }
                            }
                        },
                        "description": "Successfully updated the NGINX instance group"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "details": [
                                        {
                                            "description": "request body has an error: doesn't match the schema: Error at \"/displayName\": maximum string length is 1024\nSchema:\n  {\n    \"description\": \"User friendly NGINX instance group name.\",\n    \"maxLength\": 1024,\n    \"minLength\": 1,\n    \"type\": \"string\"\n  }\n"
                                        }
                                    ],
                                    "message": "Failed to validate Request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. This might occur if there are errors in the request body."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133005,
                                    "message": "Error retrieving the instance group: the specified instance group does not exist. Check the instance group id, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Instance group not found."
                    }
                },
                "summary": "Updates NGINX instance group",
                "tags": [
                    "NGINX Instance Groups"
                ]
            }
        },
        "/instance-groups/{instGroupUid}/config": {
            "get": {
                "description": "Returns the NGINX instance group configuration",
                "operationId": "getInstanceGroupConfig",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/InstGroupUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "InstanceGroupConfigResponse": {
                                        "$ref": "#/components/examples/InstanceGroupConfigResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/InstanceGroupConfigResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the NGINX instance group configuration."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133009,
                                    "message": "Error retrieving the instance group: the specified instance group does not exist. Check the instance group id, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Instance group not found."
                    }
                },
                "summary": "Returns the NGINX instance group configuration",
                "tags": [
                    "NGINX Instance Groups"
                ]
            },
            "post": {
                "description": "Publishes a NGINX instance group configuration for either a staged configuration or provided config and aux files. If configFiles or auxFiles are provided, an updateTime is required.",
                "operationId": "publishInstanceGroupConfig",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/InstGroupUid"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "InstanceGroupPublishConfigRequest": {
                                    "$ref": "#/components/examples/InstanceGroupPublishConfigRequest"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/PublishConfigRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PublishConfigResponse"
                                }
                            }
                        },
                        "description": "Publish configuration request Accepted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133020,
                                    "message": "Error publishing the NGINX instance group: the publish request could not be parsed. Please check the request and try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "409": {
                        "description": "Conflict found when publishing the NGINX configuration. One or more newer configuration(s) already exists."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133027,
                                    "message": "Error publishing the NGINX instance group. The specified instance group is not associated with any NGINX instances."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Precondition failed."
                    }
                },
                "summary": "Publishes a NGINX instance group configuration.",
                "tags": [
                    "NGINX Instance Groups"
                ]
            }
        },
        "/instances": {
            "get": {
                "description": "Returns all the registered NGINX instances.",
                "operationId": "listNginxes",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/NAPOnly"
                    },
                    {
                        "$ref": "#/components/parameters/InstGroupName"
                    },
                    {
                        "$ref": "#/components/parameters/InstLimit"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "ListNginxes": {
                                        "$ref": "#/components/examples/ListNginxes"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ListNginxes"
                                }
                            }
                        },
                        "description": "Successfully returned the NGINX instances."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "List all NGINX instances.",
                "tags": [
                    "NGINX Instances"
                ]
            }
        },
        "/inventory": {
            "get": {
                "description": "Returns the summary of your NGINX Plus usage.\n",
                "operationId": "nginxPlusInstanceCount",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/startIndex"
                    },
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "description": "Indicates the start date to include instances that have been reported from (inclusive).\n",
                        "example": "2019-08-07T09:57:36.088757764Z",
                        "in": "query",
                        "name": "startDate",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Indicates the end date to include instances that have been reported until this date (non-inclusive).\n\n- Must be greater than `startDate`.\n- If `endDate` is not specified when `startDate` is present, `endDate` defaults to the current date.\n",
                        "example": "2019-08-07T09:57:36.088757764Z",
                        "in": "query",
                        "name": "endDate",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "When set to true, it returns the result for aggregate functions (`AVG`, `MAX`, `MIN`) for hourly counts of NGINX Plus instances in the system for the requested date-time range.\n\n- If no `startDate` and `endDate` are provided, aggregate function (`AVG`, `MAX`, `MIN`) returns inventory data for last thirty days.\n",
                        "example": true,
                        "in": "query",
                        "name": "aggregate",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "When set to true, it returns the hourly timestamps with values of total number of NGINX Plus instances running during that hour in the system for the requested date-time range.\n\n- `aggregate` must be set to true for detailed view.\n- If no `startDate` and `endDate` are provided, detailed view returns inventory data for last thirty days.\n",
                        "example": false,
                        "in": "query",
                        "name": "detailedView",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "InventoryResponse": {
                                        "$ref": "#/components/examples/InventoryResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryResponse"
                                }
                            }
                        },
                        "description": "Successfully returned summary of your NGINX Plus usage.\n"
                    },
                    "400": {
                        "$ref": "#/components/responses/InventoryBadRequest"
                    },
                    "500": {
                        "$ref": "#/components/responses/InventoryInternal"
                    }
                },
                "summary": "List the count of unique NGINX Plus instances reported by NGINX agents.",
                "tags": [
                    "NGINX Plus Instances Count"
                ]
            }
        },
        "/license": {
            "get": {
                "description": "Gets information for the active NGINX Manager license.",
                "operationId": "getLicense",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "currentStatus": {
                                        "entitlement": {
                                            "features": [
                                                {
                                                    "expiry": "1996-02-26T00:00:00.000Z",
                                                    "gracePeriodDays": 30,
                                                    "id": "ADC",
                                                    "limit": 20,
                                                    "name": "NGINX Manager Load Balancing",
                                                    "type": "PAID",
                                                    "unitOfMeasure": "WORKLOADS"
                                                }
                                            ]
                                        },
                                        "state": {
                                            "currentInstance": {
                                                "configState": {
                                                    "conditions": [],
                                                    "selfConfigState": {
                                                        "isConfigured": true,
                                                        "isConfiguring": false,
                                                        "isDeleting": false,
                                                        "isError": false
                                                    }
                                                },
                                                "features": [
                                                    {
                                                        "aggregateNginxPlusUsed": 3,
                                                        "aggregateUsed": 10,
                                                        "daysUntilExpiry": 20,
                                                        "gracePeriodRemainingDays": 30,
                                                        "id": "ADC",
                                                        "name": "NGINX Manager Load Balancing",
                                                        "nginxPlusUsed": 2,
                                                        "remaining": 5,
                                                        "unitOfMeasure": "WORKLOADS",
                                                        "used": 5
                                                    }
                                                ],
                                                "id": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                                                "status": "INVALID",
                                                "telemetryLastReported": "2021-05-10T00:00:00Z",
                                                "type": "NGINX Manager",
                                                "version": "3.3.0"
                                            }
                                        },
                                        "subscription": {
                                            "id": "b6d7c577-b708-44ad-839c-9743f85fcf7c"
                                        }
                                    },
                                    "desiredState": {
                                        "content": "******"
                                    },
                                    "metadata": {
                                        "name": "license"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved the active NGINX Manager license."
                    },
                    "401": {
                        "$ref": "#/components/responses/LicenseUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/LicenseForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/LicenseInternal"
                    }
                },
                "summary": "Get a License",
                "tags": [
                    "License"
                ]
            },
            "put": {
                "description": "Uploads an NGINX Manager license.\n\nProvide your NGINX Manager license in the JSON request body as a base64-encoded string or as an unencoded customer association token.\n",
                "operationId": "putLicense",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "desiredState": {
                                    "content": "\u003cbase-64-encoded-license-file-contents or association-token\u003e"
                                },
                                "metadata": {
                                    "name": "license"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/PutLicenseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "currentStatus": {
                                        "entitlement": {
                                            "features": [
                                                {
                                                    "expiry": "2021-02-26T00:00:00.000Z",
                                                    "gracePeriodDays": 30,
                                                    "id": "ADC",
                                                    "limit": 20,
                                                    "name": "NGINX Manager Load Balancing",
                                                    "type": "PAID",
                                                    "unitOfMeasure": "WORKLOADS"
                                                }
                                            ]
                                        },
                                        "state": {
                                            "currentInstance": {
                                                "configState": {
                                                    "conditions": [],
                                                    "selfConfigState": {
                                                        "isConfigured": true,
                                                        "isConfiguring": false,
                                                        "isDeleting": false,
                                                        "isError": false
                                                    }
                                                },
                                                "features": [
                                                    {
                                                        "aggregateNginxPlusUsed": 3,
                                                        "aggregateUsed": 10,
                                                        "daysUntilExpiry": 20,
                                                        "gracePeriodRemainingDays": 0,
                                                        "id": "ADC",
                                                        "name": "NGINX Manager Load Balancing",
                                                        "nginxPlusUsed": 2,
                                                        "remaining": 5,
                                                        "unitOfMeasure": "WORKLOADS",
                                                        "used": 5
                                                    }
                                                ],
                                                "id": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                                                "status": "INVALID",
                                                "telemetryLastReported": "2021-05-10T00:00:00Z",
                                                "type": "NGINX Manager",
                                                "version": "3.3.0"
                                            }
                                        },
                                        "subscription": {
                                            "id": "b6d7c577-b708-44ad-839c-9743f85fcf7c"
                                        }
                                    },
                                    "desiredState": {
                                        "content": "******"
                                    },
                                    "metadata": {
                                        "name": "license"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseResponse"
                                }
                            }
                        },
                        "description": "Successfully uploaded the license."
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "currentStatus": {
                                        "entitlement": {
                                            "features": [
                                                {
                                                    "expiry": "2021-02-26T00:00:00.000Z",
                                                    "gracePeriodDays": 30,
                                                    "id": "ADC",
                                                    "limit": 20,
                                                    "name": "NGINX Manager Load Balancing",
                                                    "type": "PAID",
                                                    "unitOfMeasure": "WORKLOADS"
                                                }
                                            ]
                                        },
                                        "state": {
                                            "currentInstance": {
                                                "configState": {
                                                    "conditions": [],
                                                    "selfConfigState": {
                                                        "isConfigured": false,
                                                        "isConfiguring": true,
                                                        "isDeleting": false,
                                                        "isError": false
                                                    }
                                                },
                                                "features": [
                                                    {
                                                        "aggregateNginxPlusUsed": 3,
                                                        "aggregateUsed": 10,
                                                        "daysUntilExpiry": 20,
                                                        "gracePeriodRemainingDays": 0,
                                                        "id": "ADC",
                                                        "name": "NGINX Manager Load Balancing",
                                                        "nginxPlusUsed": 2,
                                                        "remaining": 5,
                                                        "unitOfMeasure": "WORKLOADS",
                                                        "used": 5
                                                    }
                                                ],
                                                "id": "8ce9b80a-f7fc-48fd-ac28-8d5f3fe898d6",
                                                "status": "INVALID",
                                                "telemetryLastReported": "2021-05-10T00:00:00Z",
                                                "type": "NGINX Manager",
                                                "version": "3.3.0"
                                            }
                                        },
                                        "subscription": {
                                            "id": "b6d7c577-b708-44ad-839c-9743f85fcf7c"
                                        }
                                    },
                                    "desiredState": {
                                        "content": "******"
                                    },
                                    "metadata": {
                                        "name": "license"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseResponse"
                                }
                            }
                        },
                        "description": "The request to upload a license succeeded. The License resource will be created when the upload is complete."
                    },
                    "400": {
                        "$ref": "#/components/responses/LicenseBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/LicenseUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/LicenseForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/LicenseInternal"
                    }
                },
                "summary": "Upload a License",
                "tags": [
                    "License"
                ]
            }
        },
        "/license/status": {
            "get": {
                "description": "Gets information about the status of active NIM license.",
                "operationId": "getLicenseStatus",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "licenseStatus": "VALID",
                                    "metadata": {
                                        "name": "license"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseStatusResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved the active NGINX Manager license."
                    },
                    "401": {
                        "$ref": "#/components/responses/LicenseUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/LicenseForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/LicenseInternal"
                    }
                },
                "summary": "Get a License status info",
                "tags": [
                    "License"
                ]
            }
        },
        "/modules": {
            "get": {
                "description": "list all current modules",
                "operationId": "listModules",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Modules"
                                }
                            }
                        },
                        "description": "Successfully returned list of the modules"
                    }
                },
                "security": [],
                "summary": "List all Modules",
                "tags": [
                    "Modules"
                ]
            }
        },
        "/roles": {
            "get": {
                "description": "Returns an unfiltered list of all Role resources.",
                "operationId": "getRoles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/showDetails"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleListResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved a list of all of the Role resources.\n"
                    },
                    "401": {
                        "$ref": "#/components/responses/RolesUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/RolesForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/RolesInternal"
                    }
                },
                "summary": "List Roles",
                "tags": [
                    "Roles"
                ]
            },
            "post": {
                "description": "Creates a new Role resource.",
                "operationId": "createRole",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "metadata": {
                                    "kind": "role",
                                    "name": "role1"
                                },
                                "roleDef": {
                                    "permissions": [
                                        {
                                            "accessTypes": [
                                                "READ"
                                            ],
                                            "feature": "INSTANCE-MANAGEMENT",
                                            "objects": [
                                                {
                                                    "resource": "Systems",
                                                    "values": [
                                                        "All"
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "accessTypes": [
                                                "CREATE",
                                                "READ",
                                                "UPDATE",
                                                "DELETE"
                                            ],
                                            "feature": "USER-MANAGEMENT",
                                            "objects": []
                                        }
                                    ]
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "metadata": {
                                        "createTime": "2020-02-24T22:55:51.729272Z",
                                        "kind": "role",
                                        "name": "role1"
                                    },
                                    "roleDef": {
                                        "permissions": [
                                            {
                                                "accessTypes": [
                                                    "CREATE",
                                                    "READ",
                                                    "UPDATE",
                                                    "DELETE"
                                                ],
                                                "feature": "INSTANCE-MANAGEMENT",
                                                "objects": [
                                                    {
                                                        "resource": "Systems",
                                                        "values": [
                                                            "All"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Successfully created the requested Role resource.\n"
                    },
                    "400": {
                        "$ref": "#/components/responses/RolesBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/RolesUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/RolesForbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/RolesConflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/RolesInternal"
                    }
                },
                "summary": "Create a Role",
                "tags": [
                    "Roles"
                ]
            }
        },
        "/roles/{name}": {
            "delete": {
                "description": "Deletes a specific Role resource.",
                "operationId": "deleteRole",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/roleName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the role. No content was returned."
                    },
                    "400": {
                        "$ref": "#/components/responses/RolesBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/RolesUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/RolesForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/RolesNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/RolesConflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/RolesInternal"
                    }
                },
                "summary": "Delete a Role",
                "tags": [
                    "Roles"
                ]
            },
            "get": {
                "description": "Returns information about a specific Role resource by its name.\n",
                "operationId": "getRoleByName",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/roleName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoleSummary"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested Role resource.\n"
                    },
                    "401": {
                        "$ref": "#/components/responses/RolesUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/RolesForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/RolesNotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/RolesInternal"
                    }
                },
                "summary": "Get a Role",
                "tags": [
                    "Roles"
                ]
            },
            "put": {
                "description": "Creates a new Role resource or updates an existing Role resource.\n",
                "operationId": "upsertRole",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/roleName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "metadata": {
                                    "kind": "role",
                                    "name": "role1"
                                },
                                "roleDef": {
                                    "permissions": [
                                        {
                                            "accessTypes": [
                                                "CREATE",
                                                "READ",
                                                "UPDATE",
                                                "DELETE"
                                            ],
                                            "feature": "INSTANCE-MANAGEMENT",
                                            "objects": [
                                                {
                                                    "resource": "Systems",
                                                    "values": [
                                                        "All"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "metadata": {
                                        "createTime": "2020-02-24T22:38:33.842929Z",
                                        "kind": "role",
                                        "name": "role1",
                                        "updateTime": "2020-02-24T22:53:14.340686Z"
                                    },
                                    "roleDef": {
                                        "permissions": [
                                            {
                                                "accessTypes": [
                                                    "CREATE",
                                                    "READ",
                                                    "UPDATE",
                                                    "DELETE"
                                                ],
                                                "feature": "INSTANCE-MANAGEMENT",
                                                "objects": [
                                                    {
                                                        "resource": "Systems",
                                                        "values": [
                                                            "All"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Successfully updated the specified Role resource.\n"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "metadata": {
                                        "createTime": "2020-02-24T22:38:33.842929Z",
                                        "kind": "role",
                                        "name": "role1",
                                        "updateTime": "2020-02-24T22:53:14.340686Z"
                                    },
                                    "roleDef": {
                                        "permissions": [
                                            {
                                                "accessTypes": [
                                                    "CREATE",
                                                    "READ",
                                                    "UPDATE",
                                                    "DELETE"
                                                ],
                                                "feature": "INSTANCE-MANAGEMENT",
                                                "objects": [
                                                    {
                                                        "resource": "Systems",
                                                        "values": [
                                                            "All"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Successfully created the specified Role resource.\n"
                    },
                    "400": {
                        "$ref": "#/components/responses/RolesBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/RolesUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/RolesForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/RolesInternal"
                    }
                },
                "summary": "Upsert a Role",
                "tags": [
                    "Roles"
                ]
            }
        },
        "/security/attack-signatures": {
            "get": {
                "description": "Returns a list of the attack signatures.",
                "operationId": "listAttackSignatures",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "AttackSignaturesList": {
                                        "$ref": "#/components/examples/AttackSignaturesList"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/AttackSignaturesList"
                                }
                            }
                        },
                        "description": "Successfully retrieved the attack signatures."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            },
            "post": {
                "description": "Creates an attack signature.",
                "operationId": "CreateAttackSignature",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AttackSignatureCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttackSignatureResponse"
                                }
                            }
                        },
                        "description": "Successfully created the attack signature"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "details": [
                                        {
                                            "description": "the provided file is not a valid TGZ."
                                        }
                                    ],
                                    "message": "Failed to validate Request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. This might occur if there are errors in the request body or file format is not a valid TGZ."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 13041,
                                    "message": "Conflict found when creating the attack signature. An attack signature for this version already exists."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Conflict found when creating the attack signature. An attack signature with this revision timestamp already exists."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            }
        },
        "/security/attack-signatures/{revisionTimestamp}": {
            "delete": {
                "description": "Remove an attack signature.",
                "operationId": "RemoveAttackSignature",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/RevisionTimestamp"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully removed the attack signature. No content is returned."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133013,
                                    "message": "Error retrieving the attack signature: the specified attack signature revision does not exist. Check the instance group id, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Attack signature revision not found."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133028,
                                    "message": "Error removing the attack signature: the specified attack signature revision is associated with one or more NGINX instances. All NGINX instances must be unassociated from this attack signature revision before it can be removed."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Precondition failed."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            }
        },
        "/security/deployments": {
            "get": {
                "description": "Returns policy version counts that are deployed to dataplane instances.",
                "operationId": "listPolicyDeployments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "PolicyDeploymentsCountResponse": {
                                        "$ref": "#/components/examples/PolicyDeploymentsCountResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/PolicyDeploymentsCountResponse"
                                }
                            }
                        },
                        "description": "Successfully returned policy deployment count details."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator. User has not been granted READ permission."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "List of policies by name and the count of associated versions that are deployed.",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/deployments/associations/{policyName}": {
            "get": {
                "description": "Returns policy association details for instance groups and instances that are deployed.",
                "operationId": "policyDeploymentAssociations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/PolicyName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "PolicyDeploymentsAssocResponse": {
                                        "$ref": "#/components/examples/PolicyDeploymentsAssocResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/PolicyDeploymentsAssocResponse"
                                }
                            }
                        },
                        "description": "Successfully returned policy deployment details."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator. User has not been granted READ permission."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 0,
                                    "message": "Requested policy was not found."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Policy not found."
                    }
                },
                "summary": "List of policy associations to instance groups and instances that are deployed.",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/deployments/attack-signatures": {
            "get": {
                "description": "Returns attack signature versions and a deployment count.",
                "operationId": "listAttackSignatureDeployments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "AttackSignatureDeploymentsCountResponse": {
                                        "$ref": "#/components/examples/AttackSignatureDeploymentsCountResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/AttackSignatureDeploymentsCountResponse"
                                }
                            }
                        },
                        "description": "Successfully returned attack signature version deployment details."
                    }
                },
                "summary": "List of attack signature versions and a deployment count.",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/deployments/attack-signatures/associations": {
            "get": {
                "description": "Returns attack signature association details for instance groups and instances that are deployed.",
                "operationId": "attackSignatureDeploymentAssociations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "AttackSignatureDeploymentAssocResponse": {
                                        "$ref": "#/components/examples/AttackSignatureDeploymentAssocResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/AttackSignatureDeploymentAssocResponse"
                                }
                            }
                        },
                        "description": "Successfully returned attack signature association deployment details."
                    }
                },
                "summary": "List of attack signature associations to instance groups and instances that are deployed.",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/deployments/threat-campaigns": {
            "get": {
                "description": "Returns threat campaign versions and a deployment count.",
                "operationId": "listThreatCampaignDeployments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "ThreatCampaignDeploymentsCountResponse": {
                                        "$ref": "#/components/examples/ThreatCampaignDeploymentsCountResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ThreatCampaignDeploymentsCountResponse"
                                }
                            }
                        },
                        "description": "Successfully returned threat campaign version deployment details."
                    }
                },
                "summary": "List of threat campaigns versions and a deployment count.",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/deployments/threat-campaigns/associations": {
            "get": {
                "description": "Returns threat campaign association details for instance groups and instances that are deployed.",
                "operationId": "threatCampaignDeploymentAssociations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "ThreatCampaignDeploymentAssocResponse": {
                                        "$ref": "#/components/examples/ThreatCampaignDeploymentAssocResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ThreatCampaignDeploymentAssocResponse"
                                }
                            }
                        },
                        "description": "Successfully returned threat campaign association deployment details."
                    }
                },
                "summary": "List of threat campaign associations to instance groups and instances that are deployed.",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/deployments/versions/{policyName}": {
            "get": {
                "description": "Returns policy version details for instance groups and instances that are deployed.",
                "operationId": "policyDeploymentVersions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/PolicyName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "PolicyDeploymentsVersionResponse": {
                                        "$ref": "#/components/examples/PolicyDeploymentsVersionResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/PolicyDeploymentsVersionResponse"
                                }
                            }
                        },
                        "description": "Successfully returned policy deployment details."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator. User has not been granted READ permission."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 0,
                                    "message": "Requested policy was not found."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Policy not found."
                    }
                },
                "summary": "List of policy version to instance groups and instances that are deployed.",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/deployments/{deploymentUid}": {
            "get": {
                "description": "Returns the security policy deployment job details",
                "operationId": "getDeployment",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/DeploymentUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "DeploymentDetailsResponse": {
                                        "$ref": "#/components/examples/DeploymentDetailsResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentDetails"
                                }
                            }
                        },
                        "description": "Successfully retrieved deployment job details for the request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "details": [
                                        {
                                            "description": "parameter \"deploymentUid\" in path has an error: string doesn't match the format \"uuid\" (regular expression \"^(?i)(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$\")\nSchema:\n  {\n    \"format\": \"uuid\",\n    \"type\": \"string\"\n  }\n"
                                        }
                                    ],
                                    "message": "Failed to validate Request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the deployment UID is a valid UUID."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 0,
                                    "message": "Requested deployment was not found."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Deployment not found."
                    }
                },
                "summary": "Security policy content deployment job details",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/logprofiles": {
            "get": {
                "description": "Returns a list of the security log profiles.",
                "operationId": "listSecurityLogProfiles",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IncludeLogProfileContent"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityLogProfileList"
                                }
                            }
                        },
                        "description": "Successfully retrieved the log profile list."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "tags": [
                    "SecurityLogProfiles"
                ]
            }
        },
        "/security/logprofiles/{logProfileName}": {
            "get": {
                "description": "Returns the security log profile.",
                "operationId": "getSecurityLogProfile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/LogProfileName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityLogProfileGetResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved the log profile."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "tags": [
                    "SecurityLogProfiles"
                ]
            }
        },
        "/security/policies": {
            "get": {
                "description": "Returns a list of the security policies.",
                "operationId": "listSecurityPolicies",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IncludePolicyContent"
                    },
                    {
                        "$ref": "#/components/parameters/Versions"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityPolicyList"
                                }
                            }
                        },
                        "description": "Successfully retrieved the security policy list."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 13022,
                                    "message": "Error getting the security policy: the specified security policy does not exist. Check the security policy name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The policy name defined in the parameter could not be found. Check the parameter for errors and try again."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            },
            "post": {
                "description": "Creates a new security policy.",
                "operationId": "createSecurityPolicy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/IsNewRevision"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecurityPolicyCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityPolicyCreateResponse"
                                }
                            }
                        },
                        "description": "Successfully created the requested security policy."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 13020,
                                    "message": "Error creating the security policy: the security policy specified by the supplied name does not exist so no new revision could be created. Check the security policy name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The security policy given by the name could not be found. Check the name for typos and try again."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            }
        },
        "/security/policies/{securityPolicyUID}": {
            "delete": {
                "description": "Deletes a specific security policy.",
                "operationId": "deleteSecurityPolicy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SecurityPolicyUID"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified security policy was successfully deleted."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 13009,
                                    "message": "Error deleting the security policy: the specified security policy does not exist. Check the security policy name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 13049,
                                    "message": "Error deleting the security policy: the specified security policy is associated with one or more NGINX instances. All NGINX instances must be unassociated from this security policy before it can be removed."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Precondition failed."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            },
            "get": {
                "description": "Gets a specific security policy.",
                "operationId": "getSecurityPolicy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SecurityPolicyUID"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityPolicyGetResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested security policy."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 13007,
                                    "message": "Error getting the security policy: the specified security policy does not exist. Check the security policy name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            },
            "put": {
                "description": "Updates an existing security policy.",
                "operationId": "updateSecurityPolicy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SecurityPolicyUID"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecurityPolicyCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityPolicyCreateResponse"
                                }
                            }
                        },
                        "description": "Successfully updated the specified security policy."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 13019,
                                    "message": "Error updating the security policy: the specified security policy does not exist. Check the security policy uid, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "summary": "Updates an existing security policy.",
                "tags": [
                    "SecurityPolicies"
                ]
            }
        },
        "/security/publish": {
            "post": {
                "description": "Publishes security content.",
                "operationId": "publishSecurityContent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "PublishSecurityContentRequest": {
                                    "$ref": "#/components/examples/PublishSecurityContentRequest"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/PublishSecurityContentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "deployments": [
                                        {
                                            "deploymentUID": "ddc781ca-15d6-46c9-86ea-e7bdb91e8dec",
                                            "links": {
                                                "rel": "/api/platform/v1/security/deployments/ddc781ca-15d6-46c9-86ea-e7bdb91e8dec"
                                            },
                                            "result": "Publish security content request Accepted"
                                        }
                                    ]
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/PublishResponse"
                                }
                            }
                        },
                        "description": "Publish configuration request Accepted."
                    },
                    "204": {
                        "description": "No changes to instances or instance groups were found in the request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 131057,
                                    "message": "Error publishing the security content: missing specified instance(s) and instance group(s).  You must publish the security content to one or more instance(s) and/or instance groups."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request.  This might occur if there are errors in the request body or the configuration itself."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator. User has not been granted CREATE permission."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 131059,
                                    "message": "Error getting the instance: the specified instance does not exist. Check the instance name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "System or Instance Group object not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 131078,
                                    "message": "Error publishing the security content: the specified instance is an instance group member.  You must publish the security content to the instance group."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Conflict found when publishing the security  configuration. A newer configuration already exists."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 131067,
                                    "message": "Error publishing the security content: the security content already exists for the Systems and Instance Groups specified."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Precondition Failed. This error can occur if an Instance Group with no instances was specified, or if no security content changes to existing Systems or Instance Groups is determined."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 131066,
                                    "message": "Error publishing the security content: one or more NGINX instances are not ready. Check the status(es), then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Service Unavailable. This error occurs when the NGINX instance is offline."
                    }
                },
                "summary": "Publishes security content.",
                "tags": [
                    "Security Content"
                ]
            }
        },
        "/security/threat-campaigns": {
            "get": {
                "description": "Returns a list of the threat campaigns.",
                "operationId": "listThreatCampaigns",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "ThreatCampaignList": {
                                        "$ref": "#/components/examples/ThreatCampaignList"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ThreatCampaignList"
                                }
                            }
                        },
                        "description": "Successfully retrieved the threat campaigns."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            },
            "post": {
                "description": "Creates a threat campaign.",
                "operationId": "CreateThreatCampaign",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ThreatCampaignCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThreatCampaignResponse"
                                }
                            }
                        },
                        "description": "Successfully created the threat campaign"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "details": [
                                        {
                                            "description": "the provided file is not a valid TGZ."
                                        }
                                    ],
                                    "message": "Failed to validate Request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. This might occur if there are errors in the request body or file format is not a valid TGZ."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 13037,
                                    "message": "Conflict found when creating the threat campaign. A threat campaign for this version already exists."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Conflict found when creating the threat campaign. A threat campaign with this revision timestamp already exists."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            }
        },
        "/security/threat-campaigns/{revisionTimestamp}": {
            "delete": {
                "description": "Remove a threat campaign.",
                "operationId": "RemoveThreatCampaign",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/RevisionTimestamp"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully removed the threat campaign. No content is returned."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133013,
                                    "message": "Error retrieving the threat campaign: the specified threat campaign revision does not exist. Check the revision timestamp, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Threat campaign revision not found."
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 133028,
                                    "message": "Error removing the threat campaign: the specified threat campaign revision is associated with one or more NGINX instances. All NGINX instances must be unassociated from this threat campaign revision before it can be removed."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Precondition failed."
                    }
                },
                "tags": [
                    "SecurityPolicies"
                ]
            }
        },
        "/servers": {
            "delete": {
                "description": "Delete all stored found servers.",
                "operationId": "deleteServers",
                "responses": {
                    "204": {
                        "description": "A successful response."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "Delete servers",
                "tags": [
                    "Scanner"
                ]
            },
            "get": {
                "description": "List all stored found servers.",
                "operationId": "listServers",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListServerResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved a list of all found servers."
                    }
                },
                "summary": "List found servers",
                "tags": [
                    "Scanner"
                ]
            }
        },
        "/servers/scan": {
            "delete": {
                "operationId": "cancelScan",
                "responses": {
                    "204": {
                        "description": "Successfully cancels the scan. No content was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 135006,
                                    "message": "Error canceling a scan: no scan in progress. Check the scan status, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "No scan in progress."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "Cancel the running server scan.",
                "tags": [
                    "Scanner"
                ]
            },
            "get": {
                "description": "Get status of current server scan.",
                "operationId": "scanStatus",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScanInfo"
                                }
                            }
                        },
                        "description": "Successfully retrieved the status of the current scan."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "Get scan status",
                "tags": [
                    "Scanner"
                ]
            },
            "post": {
                "description": "Scan a subnet for servers.",
                "operationId": "scan",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScanRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScanInfo"
                                }
                            }
                        },
                        "description": "Successfully started a server scan."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 135000,
                                    "message": "An internal error occurred while starting a scan. Try again later. If the problem persists, contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 135002,
                                    "message": "Error starting a scan: a scan is currently in progress. Try again later. If the problem persists, contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Scan is currently in progress."
                    }
                },
                "summary": "Scan for Servers",
                "tags": [
                    "Scanner"
                ]
            }
        },
        "/systems": {
            "get": {
                "description": "Returns operating system summary information.",
                "operationId": "listSystems",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Hostname"
                    },
                    {
                        "$ref": "#/components/parameters/Tags"
                    },
                    {
                        "$ref": "#/components/parameters/ChildInstanceUid"
                    },
                    {
                        "$ref": "#/components/parameters/InstGroupName"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "SystemsSummaryList": {
                                        "$ref": "#/components/examples/SystemSummaryListResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/SystemSummaryListResponse"
                                }
                            }
                        },
                        "description": "Successfully returned system details."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "message": "Failed to validate the request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Check the request query parameters, then try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "List systems hosting NGINX instances.",
                "tags": [
                    "NGINX Instances"
                ]
            }
        },
        "/systems/instances/deployments/{deploymentUid}": {
            "get": {
                "description": "Returns the NGINX deployment job details",
                "operationId": "getDeployment",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/DeploymentUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "DeploymentDetailsResponse": {
                                        "$ref": "#/components/examples/DeploymentDetailsResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentDetails"
                                }
                            }
                        },
                        "description": "Successfully retrieved deployment job details for the request."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "details": [
                                        {
                                            "description": "parameter \"deploymentUid\" in path has an error: string doesn't match the format \"uuid\" (regular expression \"^(?i)(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$\")\nSchema:\n  {\n    \"format\": \"uuid\",\n    \"type\": \"string\"\n  }\n"
                                        }
                                    ],
                                    "message": "Failed to validate Request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the deployment UID is a valid UUID."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 0,
                                    "message": "Requested deployment was not found."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Deployment not found."
                    }
                },
                "summary": "NGINX deployment job details",
                "tags": [
                    "NGINX Instances"
                ]
            }
        },
        "/systems/tags": {
            "get": {
                "description": "Returns list of all tags.\n",
                "operationId": "getTags",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AppliedOnly"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "SystemTagsResponse": {
                                        "$ref": "#/components/examples/SystemTagsResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/SystemTagsResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the tags."
                    }
                },
                "summary": "Returns list of tags associated with NGINX instance(s) host operating systems.",
                "tags": [
                    "NGINX Instances"
                ]
            }
        },
        "/systems/{systemUid}": {
            "delete": {
                "description": "Deletes the specified system resource.",
                "operationId": "deleteSystem",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SystemUid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified system was successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "message": "Failed to validate request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the system UID is a valid UUID."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11029,
                                    "message": "Error deleting the system: the specified system does not exist. Check the System ID, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Specified System not found."
                    }
                },
                "summary": "Delete the system.",
                "tags": [
                    "NGINX Instances"
                ]
            },
            "get": {
                "description": "Returns summary data about the host operating system.  If showDetails parameter is set to true,\nthe response includes extra data about the host resources and operating system.\n",
                "operationId": "getSystem",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SystemUid"
                    },
                    {
                        "$ref": "#/components/parameters/ShowDetails"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "ShowDetails": {
                                        "$ref": "#/components/examples/SystemDetailsResponse"
                                    },
                                    "SummaryOnly": {
                                        "$ref": "#/components/examples/SystemSummaryResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/SystemResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the system details."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "message": "Failed to validate request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the system UID is a valid UUID."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 120603,
                                    "message": "Error getting the instance: the specified instance does not exist. Check the instance name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "System object not found."
                    }
                },
                "summary": "Returns information about NGINX instance(s) host operating system.",
                "tags": [
                    "NGINX Instances"
                ]
            },
            "patch": {
                "operationId": "patchSystem",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SystemUid"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "SystemPatchRequest": {
                                    "$ref": "#/components/examples/SystemPatchRequest"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/SystemPatchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "SummaryOnly": {
                                        "$ref": "#/components/examples/SystemDetailsResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/SystemResponse"
                                }
                            }
                        },
                        "description": "Successfully updated the system."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "message": "Failed to validate the request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the system UID is a valid UUID."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11044,
                                    "message": "Error updating the system: the specified system does not exist.  Check the System ID, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "System not found."
                    }
                },
                "summary": "Allows a user to update the system tags and displayName properties",
                "tags": [
                    "NGINX Instances"
                ]
            }
        },
        "/systems/{systemUid}/instances": {
            "get": {
                "description": "Returns all the NGINX instances running on this system.",
                "operationId": "listInstances",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SystemUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "NginxInstancesList": {
                                        "$ref": "#/components/examples/NginxInstanceSummaryListResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/NginxInstanceListResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the NGINX instances managed by this system."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "message": "Failed to validate request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the system UID is a valid UUID."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11015,
                                    "message": "Error listing the instances: the specified system does not exist. Check the System ID, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "System not found."
                    }
                },
                "summary": "List all NGINX instances managed by this system.",
                "tags": [
                    "NGINX Instances"
                ]
            }
        },
        "/systems/{systemUid}/instances/{nginxUid}": {
            "delete": {
                "description": "Deletes the specified NGINX instance.",
                "operationId": "deleteNginx",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SystemUid"
                    },
                    {
                        "$ref": "#/components/parameters/NginxUid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified nginx was successfully deleted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "message": "Failed to validate request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the system or nginx UID is a valid UUID."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11019,
                                    "message": "Error deleting the NGINX instance: the specified system does not exist. Check the System ID, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Specified System or NGINX instance not found."
                    }
                },
                "summary": "Delete the NGINX instance.",
                "tags": [
                    "NGINX Instances"
                ]
            },
            "get": {
                "description": "Returns the NGINX process details",
                "operationId": "getNginx",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SystemUid"
                    },
                    {
                        "$ref": "#/components/parameters/NginxUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "NginxInstance": {
                                        "$ref": "#/components/examples/NginxInstance"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/NginxInstanceResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the NGINX instance."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "message": "Failed to validate request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the system or nginx UID is a valid UUID."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11044,
                                    "message": "Error getting the instance: the specified instance does not exist in that system. Check the System ID and NGINX instance ID, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "System or NGINX instance not found."
                    }
                },
                "summary": "NGINX process details.",
                "tags": [
                    "NGINX Instances"
                ]
            }
        },
        "/systems/{systemUid}/instances/{nginxUid}/config": {
            "get": {
                "description": "Returns the NGINX configuration",
                "operationId": "getNginxConfig",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SystemUid"
                    },
                    {
                        "$ref": "#/components/parameters/NginxUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "NginxInstanceConfigResponse": {
                                        "$ref": "#/components/examples/NginxInstanceConfigResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/NginxInstanceConfigResponse"
                                }
                            }
                        },
                        "description": "Successfully returned the NGINX instance."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 100,
                                    "message": "Failed to validate request"
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request. Make sure that the system or nginx UID is a valid UUID."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 11019,
                                    "message": "Error getting the NGINX instance configuration: failed to upload the configuration."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The NGINX configuration was not uploaded to the controller from the agent and could not be retrieved."
                    }
                },
                "summary": "NGINX process details.",
                "tags": [
                    "NGINX Instances"
                ]
            },
            "post": {
                "description": "Publishes a NGINX configuration for either a staged configuration or provided config and aux files. If configFiles or auxFiles are provided, an updateTime is required.",
                "operationId": "publishNginxConfig",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SystemUid"
                    },
                    {
                        "$ref": "#/components/parameters/NginxUid"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "PublishConfigRequest": {
                                    "$ref": "#/components/examples/PublishConfigRequest"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/PublishConfigRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "PublishConfigResponse": {
                                        "$ref": "#/components/examples/PublishConfigResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/PublishConfigResponse"
                                }
                            }
                        },
                        "description": "Publish configuration request Accepted."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 131022,
                                    "message": "Error publishing the NGINX instance configuration: the publish request could not be validated. Please check the request and try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad request.  This might occur if there are errors in the request body or the configuration itself."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 131022,
                                    "message": "Error publishing the NGINX instance configuration: A newer configuration already exists."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Conflict found when publishing the NGINX configuration. A newer configuration already exists."
                    },
                    "503": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 131051,
                                    "message": "Error publishing the NGINX instance configuration: user does not have WRITE permissions for the parent system."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Service Unavailable.  This error occurs when the NGINX instance is offline."
                    }
                },
                "summary": "Publishes a NGINX configuration.",
                "tags": [
                    "NGINX Instances"
                ]
            }
        },
        "/templates": {
            "get": {
                "description": "Returns a list of Template metadata objects for all of the Templates.",
                "operationId": "listTemplates",
                "parameters": [
                    {
                        "description": "the exact version string to filter for",
                        "in": "query",
                        "name": "version",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the exact name to filter for",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the uuid of the template to filter for",
                        "in": "query",
                        "name": "uuid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "a group to filter for amongst the groups values of the template",
                        "in": "query",
                        "name": "groups",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the parent field of the template to filter for",
                        "in": "query",
                        "name": "parent",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateList"
                                }
                            }
                        },
                        "description": "Successfully retrieved a list of Templates."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    }
                },
                "summary": "List all Templates",
                "tags": [
                    "Templates"
                ],
                "x-f5-experimental": true
            },
            "post": {
                "description": "Creates a new Template resource.\n",
                "operationId": "createTemplate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "TemplateRequestBody": {
                                    "$ref": "#/components/examples/TemplateRequestBody"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Template"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "TemplateResponse": {
                                        "$ref": "#/components/examples/TemplateResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Template"
                                }
                            }
                        },
                        "description": "Successfully created the specified Template resource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 134009,
                                    "message": "Error adding the template: the template already exists. Use a unique name for the template, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The request failed due to a conflict with an existing template resource."
                    }
                },
                "summary": "Create a template",
                "tags": [
                    "Templates"
                ],
                "x-f5-experimental": true
            },
            "x-f5-experimental": true
        },
        "/templates/groups/{templateGroupName}": {
            "delete": {
                "description": "Deletes the specified Template Group resource.",
                "operationId": "deleteTemplateGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/TemplateGroupName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified Template Group resource was successfully deleted."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 136014,
                                    "message": "Error deleting the template group: the specified group does not exist. Check the group name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "summary": "Delete a Group",
                "tags": [
                    "Templates"
                ],
                "x-f5-experimental": true
            },
            "get": {
                "description": "Returns information for a specific Template Group resource.",
                "operationId": "getTemplateGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/TemplateGroupName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "TemplateResponse": {
                                        "$ref": "#/components/examples/TemplateGroupResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateGroup"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested Group."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 134001,
                                    "message": "Error getting the template: the specified template does not exist. Check the template name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "summary": "Get a Group",
                "tags": [
                    "Templates"
                ],
                "x-f5-experimental": true
            },
            "put": {
                "description": "Creates a new Template or updates an existing Template Group resource.",
                "operationId": "upsertTemplateGroup",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/TemplateGroupName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "GroupRequestBody": {
                                    "$ref": "#/components/examples/TemplateGroupRequestBody"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/TemplateGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "TemplateResponse": {
                                        "$ref": "#/components/examples/TemplateGroupResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateGroup"
                                }
                            }
                        },
                        "description": "Successfully updated the specified Template Group resource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Failed to upsert due to internal server error, check the logs and try again."
                    }
                },
                "summary": "Upsert a Template Group",
                "tags": [
                    "Templates"
                ],
                "x-f5-experimental": true
            },
            "x-f5-experimental": true
        },
        "/templates/{templateUid}": {
            "delete": {
                "description": "Deletes the specified Template resource.",
                "operationId": "deleteTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/TemplateUid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified Template resource was successfully deleted."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 134017,
                                    "message": "Error deleting the template: the specified template does not exist. Check the template name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "summary": "Delete a Template",
                "tags": [
                    "Templates"
                ],
                "x-f5-experimental": true
            },
            "get": {
                "description": "Returns information for a specific Template resource.",
                "operationId": "getTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/TemplateUid"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "TemplateResponse": {
                                        "$ref": "#/components/examples/TemplateResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Template"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested Template."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 1403,
                                    "message": "Error accessing resource: forbidden. Please contact the system administrator."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Access denied."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": 134001,
                                    "message": "Error getting the template: the specified template does not exist. Check the template name, then try again."
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "The resource defined in the URI could not be found. Check the URI for errors and try again."
                    }
                },
                "summary": "Get a Template",
                "tags": [
                    "Templates"
                ],
                "x-f5-experimental": true
            },
            "put": {
                "description": "Creates a new Template or updates an existing Template resource.",
                "operationId": "upsertTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/TemplateUid"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "TemplateRequestBody": {
                                    "$ref": "#/components/examples/TemplateRequestBody"
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/Template"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "TemplateResponse": {
                                        "$ref": "#/components/examples/TemplateResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Template"
                                }
                            }
                        },
                        "description": "Successfully updated the specified Template resource."
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "TemplateResponse": {
                                        "$ref": "#/components/examples/TemplateResponse"
                                    }
                                },
                                "schema": {
                                    "$ref": "#/components/schemas/Template"
                                }
                            }
                        },
                        "description": "Successfully created the requested Template resource."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorModel"
                                }
                            }
                        },
                        "description": "Bad input parameter, or possibly a bad URI. Check the input for typos and try again."
                    }
                },
                "summary": "Upsert a Template",
                "tags": [
                    "Templates"
                ],
                "x-f5-experimental": true
            },
            "x-f5-experimental": true
        },
        "/userinfo": {
            "get": {
                "description": "Returns all information about currently logged-in user.",
                "operationId": "userInfo",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Successfully retrieved user information."
                    },
                    "401": {
                        "$ref": "#/components/responses/UserInfoUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/UserInfoForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/UserInfoNotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UserInfoInternalServerError"
                    }
                },
                "summary": "Get info for currently logged-in user",
                "tags": [
                    "User info"
                ]
            }
        },
        "/users": {
            "get": {
                "description": "Returns an unfiltered list of User resources for the current Auth type.",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/source"
                    },
                    {
                        "$ref": "#/components/parameters/Limit"
                    },
                    {
                        "$ref": "#/components/parameters/Offset"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserListResponse"
                                }
                            }
                        },
                        "description": "Successfully retrieved a list of User resources."
                    },
                    "401": {
                        "$ref": "#/components/responses/UsersUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/UsersForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UsersInternal"
                    }
                },
                "summary": "List all Users",
                "tags": [
                    "Users"
                ]
            },
            "post": {
                "description": "Creates a new User resource.",
                "operationId": "addUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "metadata": {
                                    "description": "NGINX Manager user with prod env role",
                                    "displayName": "John Doe",
                                    "name": "john.doe"
                                },
                                "userDef": {
                                    "email": "john.doe@nginx.com",
                                    "firstName": "John",
                                    "lastName": "Doe",
                                    "roles": [
                                        {
                                            "ref": "/api/platform/v1/roles/prod"
                                        }
                                    ]
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/CreateUser"
                            }
                        }
                    },
                    "description": "Defines the details to use for the new User resource.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Successfully created the requested User resource."
                    },
                    "400": {
                        "$ref": "#/components/responses/UsersBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UsersUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/UsersForbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/UsersConflict"
                    },
                    "500": {
                        "$ref": "#/components/responses/UsersInternal"
                    }
                },
                "summary": "Create a User",
                "tags": [
                    "Users"
                ]
            }
        },
        "/users/{userName}": {
            "delete": {
                "description": "Deletes a User resource.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/userName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the user. No content was returned."
                    },
                    "401": {
                        "$ref": "#/components/responses/UsersUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/UsersForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/UsersNotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UsersInternal"
                    }
                },
                "summary": "Delete a User",
                "tags": [
                    "Users"
                ]
            },
            "get": {
                "description": "Gets information for an existing User resource.",
                "operationId": "getUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/userName"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Successfully retrieved the requested User resource."
                    },
                    "400": {
                        "$ref": "#/components/responses/UsersBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UsersUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/UsersForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/UsersNotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UsersInternal"
                    }
                },
                "summary": "Get a User",
                "tags": [
                    "Users"
                ]
            },
            "patch": {
                "description": "Updates an existing User resource.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/userName"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "metadata": {
                                    "description": "NGINX Manager user with prod env role",
                                    "displayName": "Jane Doe",
                                    "name": "john.doe"
                                },
                                "userDef": {
                                    "firstName": "Jane",
                                    "lastName": "Doe",
                                    "roles": [
                                        {
                                            "ref": "/api/platform/v1/roles/new"
                                        }
                                    ]
                                }
                            },
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUser"
                            }
                        }
                    },
                    "description": "Defines the updates to make to the specified User resource.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Successfully updated the specified User resource."
                    },
                    "400": {
                        "$ref": "#/components/responses/UsersBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/UsersUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/UsersForbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UsersInternal"
                    }
                },
                "summary": "Update a User",
                "tags": [
                    "Users"
                ]
            }
        }
    },
    "servers": [
        {
            "description": "default server URL",
            "url": "/api/platform/v1"
        }
    ],
    "tags": [
        {
            "name": "Analyzer"
        },
        {
            "name": "Catalogs"
        },
        {
            "name": "Certs"
        },
        {
            "name": "Configurations"
        },
        {
            "name": "Events"
        },
        {
            "name": "Groups"
        },
        {
            "name": "NGINX Instance Groups"
        },
        {
            "name": "NGINX Instances"
        },
        {
            "name": "NGINX Plus Instances Count"
        },
        {
            "name": "License"
        },
        {
            "name": "Metrics"
        },
        {
            "name": "Roles"
        },
        {
            "name": "Scanner"
        },
        {
            "name": "Security Content"
        },
        {
            "name": "SecurityLogProfiles"
        },
        {
            "name": "SecurityMonitoring"
        },
        {
            "name": "SecurityPolicies"
        },
        {
            "name": "Templates"
        },
        {
            "name": "UserInfo"
        },
        {
            "name": "Users"
        }
    ],
    "x-tagGroups": [
        {
            "name": "Indigo Common Components",
            "tags": []
        },
        {
            "name": "Configuration Analyzer API",
            "tags": [
                "Analyzer"
            ]
        },
        {
            "name": "Catalogs API",
            "tags": [
                "Catalogs"
            ]
        },
        {
            "name": "Certs API",
            "tags": [
                "Certs"
            ]
        },
        {
            "name": "NGINX Configurations API",
            "tags": [
                "Configurations"
            ]
        },
        {
            "name": "Events API",
            "tags": [
                "Events"
            ]
        },
        {
            "name": "Groups API",
            "tags": [
                "Groups"
            ]
        },
        {
            "name": "NGINX Instance Groups API",
            "tags": [
                "NGINX Instance Groups"
            ]
        },
        {
            "name": "NGINX Instance API",
            "tags": [
                "NGINX Instances"
            ]
        },
        {
            "name": "Inventory API",
            "tags": [
                "NGINX Plus Instances Count"
            ]
        },
        {
            "name": "License API",
            "tags": [
                "License"
            ]
        },
        {
            "name": "Metrics API",
            "tags": [
                "Metrics"
            ]
        },
        {
            "name": "NGINX API Gateway Modules API",
            "tags": []
        },
        {
            "name": "Roles API",
            "tags": [
                "Roles"
            ]
        },
        {
            "name": "Scan API",
            "tags": [
                "Scanner"
            ]
        },
        {
            "name": "Publish Security Content API",
            "tags": [
                "Security Content"
            ]
        },
        {
            "name": "Security Log Profile API",
            "tags": [
                "SecurityLogProfiles"
            ]
        },
        {
            "name": "Security Monitoring API",
            "tags": [
                "SecurityMonitoring"
            ]
        },
        {
            "name": "Security Policy API",
            "tags": [
                "SecurityPolicies"
            ]
        },
        {
            "name": "Templates API",
            "tags": [
                "Templates"
            ]
        },
        {
            "name": "User Info API",
            "tags": [
                "UserInfo"
            ]
        },
        {
            "name": "Users API",
            "tags": [
                "Users"
            ]
        }
    ]
}
